Return-Path: <alsa-devel-bounces@alsa-project.org>
X-Original-To: lists+alsa-devel@lfdr.de
Delivered-To: lists+alsa-devel@lfdr.de
Received: from alsa0.perex.cz (alsa0.perex.cz [77.48.224.243])
	by mail.lfdr.de (Postfix) with ESMTPS id 63FF2327FB7
	for <lists+alsa-devel@lfdr.de>; Mon,  1 Mar 2021 14:40:16 +0100 (CET)
Received: from alsa1.perex.cz (alsa1.perex.cz [207.180.221.201])
	(using TLSv1.2 with cipher AECDH-AES256-SHA (256/256 bits))
	(No client certificate requested)
	by alsa0.perex.cz (Postfix) with ESMTPS id F148D1683;
	Mon,  1 Mar 2021 14:39:25 +0100 (CET)
DKIM-Filter: OpenDKIM Filter v2.11.0 alsa0.perex.cz F148D1683
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/simple; d=alsa-project.org;
	s=default; t=1614606016;
	bh=RzxGfNUho/pRixRVXXF9kDanXJH3qDbV0/Ouz9m+A20=;
	h=Date:From:To:Subject:In-Reply-To:References:Cc:List-Id:
	 List-Unsubscribe:List-Archive:List-Post:List-Help:List-Subscribe:
	 From;
	b=AVzdx7QnaAQNPrHlh2HLoiuuMTA0SlWoHUj30hBUk5/XeXm3yJ3kW8MvbyhsClKAD
	 +8+3AQtInOTKqDD8ZnDkcN+ceCEIxf1YfGb+KlJ5+JII8q3ZYMu3mkQczfvEhg5cDG
	 6Bx7l0UsmjnzIBM4mOlD2o68vIwt8THaejPLxS1Q=
Received: from alsa1.perex.cz (localhost.localdomain [127.0.0.1])
	by alsa1.perex.cz (Postfix) with ESMTP id 458D5F80475;
	Mon,  1 Mar 2021 14:38:44 +0100 (CET)
X-Original-To: alsa-devel@alsa-project.org
Delivered-To: alsa-devel@alsa-project.org
Received: by alsa1.perex.cz (Postfix, from userid 50401)
 id C9E69F804E3; Mon,  1 Mar 2021 14:38:42 +0100 (CET)
X-Spam-Checker-Version: SpamAssassin 3.4.0 (2014-02-07) on alsa1.perex.cz
X-Spam-Level: 
X-Spam-Status: No, score=0.0 required=5.0 tests=SPF_HELO_NONE,SPF_NONE,
 URIBL_BLOCKED autolearn=disabled version=3.4.0
Received: from mx2.suse.de (mx2.suse.de [195.135.220.15])
 (using TLSv1.2 with cipher AECDH-AES256-SHA (256/256 bits))
 (No client certificate requested)
 by alsa1.perex.cz (Postfix) with ESMTPS id AE6F8F80475
 for <alsa-devel@alsa-project.org>; Mon,  1 Mar 2021 14:38:36 +0100 (CET)
DKIM-Filter: OpenDKIM Filter v2.11.0 alsa1.perex.cz AE6F8F80475
X-Virus-Scanned: by amavisd-new at test-mx.suse.de
Received: from relay2.suse.de (unknown [195.135.221.27])
 by mx2.suse.de (Postfix) with ESMTP id 260CEAB8C;
 Mon,  1 Mar 2021 13:38:36 +0000 (UTC)
Date: Mon, 01 Mar 2021 14:38:36 +0100
Message-ID: <s5hzgznhu3n.wl-tiwai@suse.de>
From: Takashi Iwai <tiwai@suse.de>
To: Anton Yakovlev <anton.yakovlev@opensynergy.com>
Subject: Re: [PATCH v6 9/9] ALSA: virtio: introduce device suspend/resume
 support
In-Reply-To: <54854cb9-99c3-4c05-3b43-f41d89a29aec@opensynergy.com>
References: <20210227085956.1700687-1-anton.yakovlev@opensynergy.com>
 <20210227085956.1700687-10-anton.yakovlev@opensynergy.com>
 <s5hpn0kjt31.wl-tiwai@suse.de>
 <54854cb9-99c3-4c05-3b43-f41d89a29aec@opensynergy.com>
User-Agent: Wanderlust/2.15.9 (Almost Unreal) SEMI/1.14.6 (Maruoka)
 FLIM/1.14.9 (=?UTF-8?B?R29qxY0=?=) APEL/10.8 Emacs/25.3
 (x86_64-suse-linux-gnu) MULE/6.0 (HANACHIRUSATO)
MIME-Version: 1.0 (generated by SEMI 1.14.6 - "Maruoka")
Content-Type: text/plain; charset=US-ASCII
Cc: virtio-dev@lists.oasis-open.org, alsa-devel@alsa-project.org,
 "Michael S. Tsirkin" <mst@redhat.com>, linux-kernel@vger.kernel.org,
 Takashi Iwai <tiwai@suse.com>, virtualization@lists.linux-foundation.org
X-BeenThere: alsa-devel@alsa-project.org
X-Mailman-Version: 2.1.15
Precedence: list
List-Id: "Alsa-devel mailing list for ALSA developers -
 http://www.alsa-project.org" <alsa-devel.alsa-project.org>
List-Unsubscribe: <https://mailman.alsa-project.org/mailman/options/alsa-devel>, 
 <mailto:alsa-devel-request@alsa-project.org?subject=unsubscribe>
List-Archive: <http://mailman.alsa-project.org/pipermail/alsa-devel/>
List-Post: <mailto:alsa-devel@alsa-project.org>
List-Help: <mailto:alsa-devel-request@alsa-project.org?subject=help>
List-Subscribe: <https://mailman.alsa-project.org/mailman/listinfo/alsa-devel>, 
 <mailto:alsa-devel-request@alsa-project.org?subject=subscribe>
Errors-To: alsa-devel-bounces@alsa-project.org
Sender: "Alsa-devel" <alsa-devel-bounces@alsa-project.org>

On Mon, 01 Mar 2021 11:03:04 +0100,
Anton Yakovlev wrote:
> 
> On 28.02.2021 13:05, Takashi Iwai wrote:
> > On Sat, 27 Feb 2021 09:59:56 +0100,
> > Anton Yakovlev wrote:
> >>
> >> All running PCM substreams are stopped on device suspend and restarted
> >> on device resume.
> >>
> >> Signed-off-by: Anton Yakovlev <anton.yakovlev@opensynergy.com>
> >> ---
> >>   sound/virtio/virtio_card.c    | 56 +++++++++++++++++++++++++++++++++++
> >>   sound/virtio/virtio_pcm.c     |  1 +
> >>   sound/virtio/virtio_pcm_ops.c | 41 ++++++++++++++++++++-----
> >>   3 files changed, 90 insertions(+), 8 deletions(-)
> >>
> >> diff --git a/sound/virtio/virtio_card.c b/sound/virtio/virtio_card.c
> >> index 59455a562018..c7ae8801991d 100644
> >> --- a/sound/virtio/virtio_card.c
> >> +++ b/sound/virtio/virtio_card.c
> >> @@ -323,6 +323,58 @@ static void virtsnd_remove(struct virtio_device *vdev)
> >>        kfree(snd->event_msgs);
> >>   }
> >>
> >> +#ifdef CONFIG_PM_SLEEP
> >> +/**
> >> + * virtsnd_freeze() - Suspend device.
> >> + * @vdev: VirtIO parent device.
> >> + *
> >> + * Context: Any context.
> >> + * Return: 0 on success, -errno on failure.
> >> + */
> >> +static int virtsnd_freeze(struct virtio_device *vdev)
> >> +{
> >> +     struct virtio_snd *snd = vdev->priv;
> >> +
> >> +     virtsnd_ctl_msg_cancel_all(snd);
> >> +
> >> +     vdev->config->del_vqs(vdev);
> >> +     vdev->config->reset(vdev);
> >> +
> >> +     kfree(snd->event_msgs);
> >> +
> >> +     /*
> >> +      * If the virtsnd_restore() fails before re-allocating events, then we
> >> +      * get a dangling pointer here.
> >> +      */
> >> +     snd->event_msgs = NULL;
> >> +
> >> +     return 0;
> >
> > I suppose some cancel of inflight works is needed?
> > Ditto for the device removal, too.
> 
> It's not necessary here, since the device is reset and all of this are
> happened automatically.

Hrm, but the reset call itself might conflict with the inflight reset
work?  I haven't see any work canceling or flushing, so...

> But in the device remove it makes sense also to
> disable events before calling snd_card_free(), since the device is still
> able to send notifications at that moment. Thanks!
> 
> 
> >> --- a/sound/virtio/virtio_pcm.c
> >> +++ b/sound/virtio/virtio_pcm.c
> >> @@ -109,6 +109,7 @@ static int virtsnd_pcm_build_hw(struct virtio_pcm_substream *vss,
> >>                SNDRV_PCM_INFO_BATCH |
> >>                SNDRV_PCM_INFO_BLOCK_TRANSFER |
> >>                SNDRV_PCM_INFO_INTERLEAVED |
> >> +             SNDRV_PCM_INFO_RESUME |
> >>                SNDRV_PCM_INFO_PAUSE;
> >
> > Actually you don't need to set SNDRV_PCM_INFO_RESUME.
> > This flag means that the driver supports the full resume procedure,
> > which isn't often the case; with this, the driver is supposed to
> > resume the stream exactly from the suspended position.
> 
> If I understood you right, that's exactly how resume is implemented now
> in the driver. Although we fully restart substream on the device side,
> from an application point of view it is resumed exactly at the same
> position.
> 
> 
> > Most drivers don't set this but implement only the suspend-stop
> > action.  Then the application (or the sound backend) will re-setup the
> > stream and restart accordingly.
> 
> And an application must be aware of such possible situation? Since I
> have no doubt in alsa-lib, but I don't think that for example tinyalsa
> can handle this right.

Tiny ALSA should work, too.  Actually there are only few drivers that
have the full PCM resume.  The majority of drivers are without the
resume support (including a large one like HD-audio).

And, with the resume implementation, I'm worried by the style like:

> >> @@ -309,6 +318,21 @@ static int virtsnd_pcm_trigger(struct snd_pcm_substream *substream, int command)
> >>        int rc;
> >>
> >>        switch (command) {
> >> +     case SNDRV_PCM_TRIGGER_RESUME: {
> >> +             /*
> >> +              * We restart the substream by executing the standard command
> >> +              * sequence.
> >> +              */
> >> +             rc = virtsnd_pcm_hw_params(substream, NULL);
> >> +             if (rc)
> >> +                     return rc;
> >> +
> >> +             rc = virtsnd_pcm_prepare(substream);
> >> +             if (rc)
> >> +                     return rc;

... and this is rather what the core code should do, and it's exactly
the same procedure that would be done without RESUME flag.


Takashi
