Return-Path: <alsa-devel-bounces@alsa-project.org>
X-Original-To: lists+alsa-devel@lfdr.de
Delivered-To: lists+alsa-devel@lfdr.de
Received: from alsa0.perex.cz (alsa0.perex.cz [77.48.224.243])
	by mail.lfdr.de (Postfix) with ESMTPS id C2626FDEA8
	for <lists+alsa-devel@lfdr.de>; Fri, 15 Nov 2019 14:14:45 +0100 (CET)
Received: from alsa1.perex.cz (alsa1.perex.cz [207.180.221.201])
	(using TLSv1.2 with cipher AECDH-AES256-SHA (256/256 bits))
	(No client certificate requested)
	by alsa0.perex.cz (Postfix) with ESMTPS id 24C0D165F;
	Fri, 15 Nov 2019 14:13:55 +0100 (CET)
DKIM-Filter: OpenDKIM Filter v2.11.0 alsa0.perex.cz 24C0D165F
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/simple; d=alsa-project.org;
	s=default; t=1573823685;
	bh=ddB9YVzw7fpHFDhWt5y+z8E6IiIOb4RDEq3482ppwTo=;
	h=Date:From:To:In-Reply-To:References:Cc:Subject:List-Id:
	 List-Unsubscribe:List-Archive:List-Post:List-Help:List-Subscribe:
	 From;
	b=hSeSB82AxirrVIfrL8/MKBtkVDFtEwZxeHRJaCNVYSlqkz7BvAGIVQDNnAmQbFmFi
	 2ahMlVkjiZkswAegbFAseH+VcLnckf7LDgeWOVjpRQi6b81J6V+uxXnSCOWpaaWS8C
	 svb4pRlx5/cZLFpnJy4BREUeZhN3hP//xVH+Xgww=
Received: from alsa1.perex.cz (localhost.localdomain [127.0.0.1])
	by alsa1.perex.cz (Postfix) with ESMTP id 89C33F80105;
	Fri, 15 Nov 2019 14:13:01 +0100 (CET)
X-Original-To: alsa-devel@alsa-project.org
Delivered-To: alsa-devel@alsa-project.org
Received: by alsa1.perex.cz (Postfix, from userid 50401)
 id D95D1F80104; Fri, 15 Nov 2019 14:12:58 +0100 (CET)
X-Spam-Checker-Version: SpamAssassin 3.4.0 (2014-02-07) on alsa1.perex.cz
X-Spam-Level: *
X-Spam-Status: No, score=1.0 required=5.0 tests=PRX_BODY_30,SPF_HELO_NONE,
 SPF_PASS autolearn=disabled version=3.4.0
Received: from mx1.suse.de (mx2.suse.de [195.135.220.15])
 (using TLSv1.2 with cipher AECDH-AES256-SHA (256/256 bits))
 (No client certificate requested)
 by alsa1.perex.cz (Postfix) with ESMTPS id A0CBFF800CC
 for <alsa-devel@alsa-project.org>; Fri, 15 Nov 2019 14:12:56 +0100 (CET)
DKIM-Filter: OpenDKIM Filter v2.11.0 alsa1.perex.cz A0CBFF800CC
X-Virus-Scanned: by amavisd-new at test-mx.suse.de
Received: from relay2.suse.de (unknown [195.135.220.254])
 by mx1.suse.de (Postfix) with ESMTP id A5426B27D;
 Fri, 15 Nov 2019 13:12:55 +0000 (UTC)
Date: Fri, 15 Nov 2019 14:12:55 +0100
Message-ID: <s5hd0dtjnag.wl-tiwai@suse.de>
From: Takashi Iwai <tiwai@suse.de>
To: Nikhil Mahale <nmahale@nvidia.com>
In-Reply-To: <20191115095606.22392-3-nmahale@nvidia.com>
References: <20191115095606.22392-1-nmahale@nvidia.com>
 <20191115095606.22392-3-nmahale@nvidia.com>
User-Agent: Wanderlust/2.15.9 (Almost Unreal) SEMI/1.14.6 (Maruoka)
 FLIM/1.14.9 (=?UTF-8?B?R29qxY0=?=) APEL/10.8 Emacs/25.3
 (x86_64-suse-linux-gnu) MULE/6.0 (HANACHIRUSATO)
MIME-Version: 1.0 (generated by SEMI 1.14.6 - "Maruoka")
Cc: alsa-devel@alsa-project.org, tiwai@suse.com, aplattner@nvidia.com
Subject: Re: [alsa-devel] [PATCH v2 2/5] ALSA: hda - Add DP-MST jack support
X-BeenThere: alsa-devel@alsa-project.org
X-Mailman-Version: 2.1.15
Precedence: list
List-Id: "Alsa-devel mailing list for ALSA developers -
 http://www.alsa-project.org" <alsa-devel.alsa-project.org>
List-Unsubscribe: <https://mailman.alsa-project.org/mailman/options/alsa-devel>, 
 <mailto:alsa-devel-request@alsa-project.org?subject=unsubscribe>
List-Archive: <http://mailman.alsa-project.org/pipermail/alsa-devel/>
List-Post: <mailto:alsa-devel@alsa-project.org>
List-Help: <mailto:alsa-devel-request@alsa-project.org?subject=help>
List-Subscribe: <https://mailman.alsa-project.org/mailman/listinfo/alsa-devel>, 
 <mailto:alsa-devel-request@alsa-project.org?subject=subscribe>
Content-Type: text/plain; charset="us-ascii"
Content-Transfer-Encoding: 7bit
Errors-To: alsa-devel-bounces@alsa-project.org
Sender: "Alsa-devel" <alsa-devel-bounces@alsa-project.org>

On Fri, 15 Nov 2019 10:56:03 +0100,
Nikhil Mahale wrote:
> 
>  static struct hda_jack_tbl *
> -snd_hda_jack_tbl_new(struct hda_codec *codec, hda_nid_t nid)
> +snd_hda_jack_tbl_new(struct hda_codec *codec, hda_nid_t nid, int dev_id)
>  {
> -	struct hda_jack_tbl *jack = snd_hda_jack_tbl_get(codec, nid);
> +	struct hda_jack_tbl *jack =
> +		snd_hda_jack_tbl_get_mst(codec, nid, dev_id);
> +	struct hda_jack_tbl *existing_nid_jack =
> +		any_jack_tbl_get_from_nid(codec, nid);
> +
> +	WARN_ON(dev_id != 0 && !codec->dp_mst);
> +
>  	if (jack)
>  		return jack;
>  	jack = snd_array_new(&codec->jacktbl);
>  	if (!jack)
>  		return NULL;
>  	jack->nid = nid;
> +	jack->dev_id = dev_id;
>  	jack->jack_dirty = 1;
> -	jack->tag = codec->jacktbl.used;
> +	if (!existing_nid_jack)
> +		jack->tag = codec->jacktbl.used;
> +	else
> +		jack->tag = existing_nid_jack->tag;
> +
>  	return jack;
>  }

In this logic, we assign the same tag to multiple jack objects, and
this will lead to the multiple calls of SET_UNSOLICITED_ENABLE on the
same pin.  But this should be only once at parsing, and the rest
resume init will be done from the codec regmap cache, so it's not too
bad, I guess.

Alternatively we can set 0 to jack->tag when existing_nid_jack!=NULL,
too, and skip SET_UNSOLICITED_ENABLE for tag==0.  But this will make
*_get_from_tag() won't work as you intended, hence the step will be
- get the jack once via snd_hda_jack_tbl_get_from_tag(tag)
- get the jack again with snd_hda_jack_tbl_get_mst(jack->nid, dev_id)
But it's more complex, and not better, either.


thanks,

Takashi
_______________________________________________
Alsa-devel mailing list
Alsa-devel@alsa-project.org
https://mailman.alsa-project.org/mailman/listinfo/alsa-devel
