Return-Path: <alsa-devel-bounces@alsa-project.org>
X-Original-To: lists+alsa-devel@lfdr.de
Delivered-To: lists+alsa-devel@lfdr.de
Received: from alsa0.perex.cz (alsa0.perex.cz [77.48.224.243])
	by mail.lfdr.de (Postfix) with ESMTPS id 5AA881104D0
	for <lists+alsa-devel@lfdr.de>; Tue,  3 Dec 2019 20:12:39 +0100 (CET)
Received: from alsa1.perex.cz (alsa1.perex.cz [207.180.221.201])
	(using TLSv1.2 with cipher AECDH-AES256-SHA (256/256 bits))
	(No client certificate requested)
	by alsa0.perex.cz (Postfix) with ESMTPS id E10EA165E;
	Tue,  3 Dec 2019 20:11:48 +0100 (CET)
DKIM-Filter: OpenDKIM Filter v2.11.0 alsa0.perex.cz E10EA165E
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/simple; d=alsa-project.org;
	s=default; t=1575400359;
	bh=Rbq4ZNp+mlxLtlfZlmVuCLEmLY0yjYmTMX1aAxoAy18=;
	h=Date:From:To:In-Reply-To:References:Cc:Subject:List-Id:
	 List-Unsubscribe:List-Archive:List-Post:List-Help:List-Subscribe:
	 From;
	b=Tw/zDASkKIhGUmz8vey458vVDxQTzYodETnYKWjVinTSkSRLGL8HCvbzrEs1hTXDI
	 r3W0Lxb3PVqDeab3pxHJZXN7H2Vmcr2JerTMcDCuZ0dKxdMA3EmONqIeiISAdZC6rU
	 vQG7I7bXlomTZN7o+L8QXcLS0R40CDf4l5+x8U0Q=
Received: from alsa1.perex.cz (localhost.localdomain [127.0.0.1])
	by alsa1.perex.cz (Postfix) with ESMTP id 4AEC0F80227;
	Tue,  3 Dec 2019 20:10:55 +0100 (CET)
X-Original-To: alsa-devel@alsa-project.org
Delivered-To: alsa-devel@alsa-project.org
Received: by alsa1.perex.cz (Postfix, from userid 50401)
 id 04F95F80227; Tue,  3 Dec 2019 20:10:53 +0100 (CET)
X-Spam-Checker-Version: SpamAssassin 3.4.0 (2014-02-07) on alsa1.perex.cz
X-Spam-Level: *
X-Spam-Status: No, score=1.0 required=5.0 tests=RCVD_IN_DNSWL_BLOCKED,
 SPF_HELO_NONE,SPF_PASS,SURBL_BLOCKED,URIBL_BLOCKED autolearn=disabled
 version=3.4.0
Received: from mx1.suse.de (mx2.suse.de [195.135.220.15])
 (using TLSv1.2 with cipher AECDH-AES256-SHA (256/256 bits))
 (No client certificate requested)
 by alsa1.perex.cz (Postfix) with ESMTPS id 139EEF800B4
 for <alsa-devel@alsa-project.org>; Tue,  3 Dec 2019 20:10:49 +0100 (CET)
DKIM-Filter: OpenDKIM Filter v2.11.0 alsa1.perex.cz 139EEF800B4
X-Virus-Scanned: by amavisd-new at test-mx.suse.de
Received: from relay2.suse.de (unknown [195.135.220.254])
 by mx1.suse.de (Postfix) with ESMTP id AA86BB2A69;
 Tue,  3 Dec 2019 19:10:48 +0000 (UTC)
Date: Tue, 03 Dec 2019 20:10:48 +0100
Message-ID: <s5hk17dfcnb.wl-tiwai@suse.de>
From: Takashi Iwai <tiwai@suse.de>
To: Curtis Malainey <cujomalainey@chromium.org>
In-Reply-To: <20191203173007.46504-1-cujomalainey@chromium.org>
References: <20191203173007.46504-1-cujomalainey@chromium.org>
User-Agent: Wanderlust/2.15.9 (Almost Unreal) SEMI/1.14.6 (Maruoka)
 FLIM/1.14.9 (=?UTF-8?B?R29qxY0=?=) APEL/10.8 Emacs/25.3
 (x86_64-suse-linux-gnu) MULE/6.0 (HANACHIRUSATO)
MIME-Version: 1.0 (generated by SEMI 1.14.6 - "Maruoka")
Cc: alsa-devel@alsa-project.org, Takashi Iwai <tiwai@suse.com>,
 Liam Girdwood <lgirdwood@gmail.com>, Vinod Koul <vkoul@kernel.org>,
 Mark Brown <broonie@kernel.org>
Subject: Re: [alsa-devel] [PATCH v2] ASoC: core: Init pcm runtime work early
	to avoid warnings
X-BeenThere: alsa-devel@alsa-project.org
X-Mailman-Version: 2.1.15
Precedence: list
List-Id: "Alsa-devel mailing list for ALSA developers -
 http://www.alsa-project.org" <alsa-devel.alsa-project.org>
List-Unsubscribe: <https://mailman.alsa-project.org/mailman/options/alsa-devel>, 
 <mailto:alsa-devel-request@alsa-project.org?subject=unsubscribe>
List-Archive: <http://mailman.alsa-project.org/pipermail/alsa-devel/>
List-Post: <mailto:alsa-devel@alsa-project.org>
List-Help: <mailto:alsa-devel-request@alsa-project.org?subject=help>
List-Subscribe: <https://mailman.alsa-project.org/mailman/listinfo/alsa-devel>, 
 <mailto:alsa-devel-request@alsa-project.org?subject=subscribe>
Content-Type: text/plain; charset="us-ascii"
Content-Transfer-Encoding: 7bit
Errors-To: alsa-devel-bounces@alsa-project.org
Sender: "Alsa-devel" <alsa-devel-bounces@alsa-project.org>

On Tue, 03 Dec 2019 18:30:07 +0100,
Curtis Malainey wrote:
> 
> There are cases where we fail before we reach soc_new_pcm which would
> init the workqueue. When we fail we attempt to flush the queue which
> generates warnings from the workqueue subsystem when we have not inited
> the queue. Solution is to use a proxy function to get around this issue.
> 
> Signed-off-by: Curtis Malainey <cujomalainey@chromium.org>
> Cc: Takashi Iwai <tiwai@suse.de>
> Signed-off-by: Curtis Malainey <cujomalainey@chromium.org>

Doubly sign-off.

Other than that, looks good to me:
Reviewed-by: Takashi Iwai <tiwai@suse.de>


I'm going to submit the remaining fix for the uninitialized list later
on top of this.


Thanks!

Takashi

> ---
>  include/sound/soc.h      |  1 +
>  sound/soc/soc-compress.c |  6 ++----
>  sound/soc/soc-core.c     | 10 ++++++++++
>  sound/soc/soc-pcm.c      | 11 ++++-------
>  4 files changed, 17 insertions(+), 11 deletions(-)
> 
> diff --git a/include/sound/soc.h b/include/sound/soc.h
> index c28a1ed5e8df9..2628967998264 100644
> --- a/include/sound/soc.h
> +++ b/include/sound/soc.h
> @@ -1150,6 +1150,7 @@ struct snd_soc_pcm_runtime {
>  	unsigned int num_codecs;
>  
>  	struct delayed_work delayed_work;
> +	void (*close_delayed_work_func)(struct snd_soc_pcm_runtime *rtd);
>  #ifdef CONFIG_DEBUG_FS
>  	struct dentry *debugfs_dpcm_root;
>  #endif
> diff --git a/sound/soc/soc-compress.c b/sound/soc/soc-compress.c
> index 61f230324164d..6615ef64c7f55 100644
> --- a/sound/soc/soc-compress.c
> +++ b/sound/soc/soc-compress.c
> @@ -214,10 +214,8 @@ static int soc_compr_open_fe(struct snd_compr_stream *cstream)
>   * This is to ensure there are no pops or clicks in between any music tracks
>   * due to DAPM power cycling.
>   */
> -static void close_delayed_work(struct work_struct *work)
> +static void close_delayed_work(struct snd_soc_pcm_runtime *rtd)
>  {
> -	struct snd_soc_pcm_runtime *rtd =
> -			container_of(work, struct snd_soc_pcm_runtime, delayed_work.work);
>  	struct snd_soc_dai *codec_dai = rtd->codec_dai;
>  
>  	mutex_lock_nested(&rtd->card->pcm_mutex, rtd->card->pcm_subclass);
> @@ -929,7 +927,7 @@ int snd_soc_new_compress(struct snd_soc_pcm_runtime *rtd, int num)
>  	}
>  
>  	/* DAPM dai link stream work */
> -	INIT_DELAYED_WORK(&rtd->delayed_work, close_delayed_work);
> +	rtd->close_delayed_work_func = close_delayed_work;
>  
>  	rtd->compr = compr;
>  	compr->private_data = rtd;
> diff --git a/sound/soc/soc-core.c b/sound/soc/soc-core.c
> index 062653ab03a37..0e2e628302f1d 100644
> --- a/sound/soc/soc-core.c
> +++ b/sound/soc/soc-core.c
> @@ -435,6 +435,15 @@ static void soc_free_pcm_runtime(struct snd_soc_pcm_runtime *rtd)
>  	device_unregister(rtd->dev);
>  }
>  
> +static void close_delayed_work(struct work_struct *work) {
> +	struct snd_soc_pcm_runtime *rtd =
> +			container_of(work, struct snd_soc_pcm_runtime,
> +				     delayed_work.work);
> +
> +	if (rtd->close_delayed_work_func)
> +		rtd->close_delayed_work_func(rtd);
> +}
> +
>  static struct snd_soc_pcm_runtime *soc_new_pcm_runtime(
>  	struct snd_soc_card *card, struct snd_soc_dai_link *dai_link)
>  {
> @@ -470,6 +479,7 @@ static struct snd_soc_pcm_runtime *soc_new_pcm_runtime(
>  
>  	rtd->dev = dev;
>  	dev_set_drvdata(dev, rtd);
> +	INIT_DELAYED_WORK(&rtd->delayed_work, close_delayed_work);
>  
>  	/*
>  	 * for rtd->codec_dais
> diff --git a/sound/soc/soc-pcm.c b/sound/soc/soc-pcm.c
> index 01eb8700c3de5..b78f6ff2b1d3f 100644
> --- a/sound/soc/soc-pcm.c
> +++ b/sound/soc/soc-pcm.c
> @@ -637,10 +637,8 @@ static int soc_pcm_open(struct snd_pcm_substream *substream)
>   * This is to ensure there are no pops or clicks in between any music tracks
>   * due to DAPM power cycling.
>   */
> -static void close_delayed_work(struct work_struct *work)
> +static void close_delayed_work(struct snd_soc_pcm_runtime *rtd)
>  {
> -	struct snd_soc_pcm_runtime *rtd =
> -			container_of(work, struct snd_soc_pcm_runtime, delayed_work.work);
>  	struct snd_soc_dai *codec_dai = rtd->codec_dais[0];
>  
>  	mutex_lock_nested(&rtd->card->pcm_mutex, rtd->card->pcm_subclass);
> @@ -660,7 +658,7 @@ static void close_delayed_work(struct work_struct *work)
>  	mutex_unlock(&rtd->card->pcm_mutex);
>  }
>  
> -static void codec2codec_close_delayed_work(struct work_struct *work)
> +static void codec2codec_close_delayed_work(struct snd_soc_pcm_runtime *rtd)
>  {
>  	/*
>  	 * Currently nothing to do for c2c links
> @@ -2974,10 +2972,9 @@ int soc_new_pcm(struct snd_soc_pcm_runtime *rtd, int num)
>  
>  	/* DAPM dai link stream work */
>  	if (rtd->dai_link->params)
> -		INIT_DELAYED_WORK(&rtd->delayed_work,
> -				  codec2codec_close_delayed_work);
> +		rtd->close_delayed_work_func = codec2codec_close_delayed_work;
>  	else
> -		INIT_DELAYED_WORK(&rtd->delayed_work, close_delayed_work);
> +		rtd->close_delayed_work_func = close_delayed_work;
>  
>  	pcm->nonatomic = rtd->dai_link->nonatomic;
>  	rtd->pcm = pcm;
> -- 
> 2.24.0.393.g34dc348eaf-goog
> 
_______________________________________________
Alsa-devel mailing list
Alsa-devel@alsa-project.org
https://mailman.alsa-project.org/mailman/listinfo/alsa-devel
