Return-Path: <alsa-devel-bounces@alsa-project.org>
X-Original-To: lists+alsa-devel@lfdr.de
Delivered-To: lists+alsa-devel@lfdr.de
Received: from alsa0.perex.cz (alsa0.perex.cz [77.48.224.243])
	by mail.lfdr.de (Postfix) with ESMTPS id 3C52B28C80B
	for <lists+alsa-devel@lfdr.de>; Tue, 13 Oct 2020 06:52:20 +0200 (CEST)
Received: from alsa1.perex.cz (alsa1.perex.cz [207.180.221.201])
	(using TLSv1.2 with cipher AECDH-AES256-SHA (256/256 bits))
	(No client certificate requested)
	by alsa0.perex.cz (Postfix) with ESMTPS id C576D168E;
	Tue, 13 Oct 2020 06:51:29 +0200 (CEST)
DKIM-Filter: OpenDKIM Filter v2.11.0 alsa0.perex.cz C576D168E
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/simple; d=alsa-project.org;
	s=default; t=1602564739;
	bh=BEwgfrdqMkqptKraAEbHBatoG7Qr1iHanZEaFwZfh9E=;
	h=Date:From:To:Subject:In-Reply-To:References:Cc:List-Id:
	 List-Unsubscribe:List-Archive:List-Post:List-Help:List-Subscribe:
	 From;
	b=YVb4Qhtfx5jVtcUlMFG9jqOaicKq9FtHX0ntRVHpoN0fDdcId0AUI6pA6vJn0eXoS
	 kGQRKfkWWDjiJrZXzwrWhlZ0n3oa3L2rcCVcruDap4ubODKsOHObDQ8ES7C0kxF8LT
	 0+HzXYGKOD/KIQ5QGi3qVsrof7qLFYFx5Arzw/2g=
Received: from alsa1.perex.cz (localhost.localdomain [127.0.0.1])
	by alsa1.perex.cz (Postfix) with ESMTP id 605B0F8016F;
	Tue, 13 Oct 2020 06:50:39 +0200 (CEST)
X-Original-To: alsa-devel@alsa-project.org
Delivered-To: alsa-devel@alsa-project.org
Received: by alsa1.perex.cz (Postfix, from userid 50401)
 id 05646F801A3; Tue, 13 Oct 2020 06:50:37 +0200 (CEST)
X-Spam-Checker-Version: SpamAssassin 3.4.0 (2014-02-07) on alsa1.perex.cz
X-Spam-Level: 
X-Spam-Status: No, score=0.0 required=5.0 tests=SPF_HELO_NONE,SPF_PASS
 autolearn=disabled version=3.4.0
Received: from relmlie6.idc.renesas.com (relmlor2.renesas.com
 [210.160.252.172])
 by alsa1.perex.cz (Postfix) with ESMTP id 1A03DF800CE
 for <alsa-devel@alsa-project.org>; Tue, 13 Oct 2020 06:50:28 +0200 (CEST)
DKIM-Filter: OpenDKIM Filter v2.11.0 alsa1.perex.cz 1A03DF800CE
Date: 13 Oct 2020 13:50:25 +0900
X-IronPort-AV: E=Sophos;i="5.77,369,1596466800"; d="scan'208";a="59409943"
Received: from unknown (HELO relmlir5.idc.renesas.com) ([10.200.68.151])
 by relmlie6.idc.renesas.com with ESMTP; 13 Oct 2020 13:50:25 +0900
Received: from mercury.renesas.com (unknown [10.166.252.133])
 by relmlir5.idc.renesas.com (Postfix) with ESMTP id 13035400F923;
 Tue, 13 Oct 2020 13:50:25 +0900 (JST)
Message-ID: <87imbeybq5.wl-kuninori.morimoto.gx@renesas.com>
From: Kuninori Morimoto <kuninori.morimoto.gx@renesas.com>
To: Mark Brown <broonie@kernel.org>
Subject: Re: More Generic Audio Graph Sound Card idea
In-Reply-To: <87k0xszlep.wl-kuninori.morimoto.gx@renesas.com>
References: <87k0xszlep.wl-kuninori.morimoto.gx@renesas.com>
User-Agent: Wanderlust/2.15.9 Emacs/26.3 Mule/6.0
MIME-Version: 1.0 (generated by SEMI-EPG 1.14.7 - "Harue")
Content-Type: text/plain; charset=US-ASCII
Cc: Sameer Pujar <spujar@nvidia.com>,
 Pierre-Louis Bossart <pierre-louis.bossart@linux.intel.com>,
 Linux-ALSA <alsa-devel@alsa-project.org>
X-BeenThere: alsa-devel@alsa-project.org
X-Mailman-Version: 2.1.15
Precedence: list
List-Id: "Alsa-devel mailing list for ALSA developers -
 http://www.alsa-project.org" <alsa-devel.alsa-project.org>
List-Unsubscribe: <https://mailman.alsa-project.org/mailman/options/alsa-devel>, 
 <mailto:alsa-devel-request@alsa-project.org?subject=unsubscribe>
List-Archive: <http://mailman.alsa-project.org/pipermail/alsa-devel/>
List-Post: <mailto:alsa-devel@alsa-project.org>
List-Help: <mailto:alsa-devel-request@alsa-project.org?subject=help>
List-Subscribe: <https://mailman.alsa-project.org/mailman/listinfo/alsa-devel>, 
 <mailto:alsa-devel-request@alsa-project.org?subject=subscribe>
Errors-To: alsa-devel-bounces@alsa-project.org
Sender: "Alsa-devel" <alsa-devel-bounces@alsa-project.org>


Hi ALSA ML


> I'm thinking below style as new audio-graph-card2.
> It is not tricky, thus connection judgement for normal vs DSP is easy.
> Then, code can be more readable (= no guaranty :P) ?

I have proposed DPCM connection idea for audio-card2 before,
and proposed Multi-CPU/Codec connection idea later.
I'm not yet implemented these, but I want to merge / reuse these
idea to keep simple code.

By this mail, I want to propose Codec2Codec idea.
It is almost same idea with DPCM, Multi-CPU/Codec,
and is last parts for missing feature.

I think this idea can be generic and easy to update
in the future (if needed).

But, I want feedback, opinion.
I wonder does it works for your use-case ?

-- Image ---

Codec2Codec

Codec1 <--> Codec2

-- DT Image --

   +--+
=> |  |<--> Codec1
   |  |<--> Codec2
   +--+

-- DT Sample --

	sound {
		compatible = "audio-graph-card2";

		dais = <&codec2codec>;
	};

	CODEC2CODEC {
		compatible = "audio-graph-card2-codec2codec";

		ports {
			codec2codec: port@0 { fe_ep: endpoint { remote-endpoint = <&codec1_ep>; }; };
			             port@1 { be_ep: endpoint { remote-endpoint = <&codec2_ep>; }; };
		};
	};

 	Codec1 {
		port@0 { codec1_ep: endpoint { remote-endpoint = <&fe_ep>; }; };
	};

 	Codec2 {
		port@0 { codec2_ep: endpoint { remote-endpoint = <&be_ep>; }; };
	};


-- Image ---

          *******
PCM0 <--> *     * <--> DAI0: Codec Headset
PCM1 <--> *     * <--> DAI1: Codec Speakers
PCM2 <--> * DSP * <--> DAI2: MODEM
PCM3 <--> *     * <--> DAI3: BT
          *     * <--> DAI4: DMIC
          *     * <--> DAI5: FM
          *******

-- DT Image --

   +--+                ****                 +--+
=> |  |<--> PCM0       *  * <-- (dummy) --> |  | <=
   |  |<-- (dummy) --> *  *       DAI0 <--> |  |
   +--+                *  *                 +--+
                       *  *            
   +--+                *  *                 +--+
=> |  |<--> PCM1       *  * <-- (dummy) --> |  | <=
   |  |<-- (dummy) --> *  *       DAI1 <--> |  |
   +--+                *  *                 +--+
   ...                 ...                 ...


-- DT Sample --

	sound {
		compatible = "audio-graph-card2";

		/* indicate all Front-End, Back-End in DPCM case */
		dais = <&dsp_fe0, &dsp_fe1, &dsp_fe2, &dsp_fe3,
		        &dsp_be0, &dsp_be1, &dsp_be2, &dsp_be3, &dsp_be4, &dsp_be5>;
	};

	DSP {
		compatible = "audio-graph-card2-dsp";

		ports@0 {
			/* Front-End is pcm0_ep, Back-End is dummy */
			dsp_fe0: port@0 { dsp_fe0_ep: endpoint { remote-endpoint = <&pcm0_ep>; }; };
			         port@1 { };
		};

		...

		ports@4 {
			/* Front-End is dummy, Back-End is dai_ep */
			dsp_be0: port@0 { };
			         port@1 { dsp_be0_ep: endpoint { remote-endpoint = <&dai0_ep>; }; };
		};

		...

	};

 	CPU {
		ports {
			port@0 { pcm0_ep: endpoint { remote-endpoint = <&dsp_fe0_ep>; }; };
			port@1 { pcm1_ep: endpoint { remote-endpoint = <&dsp_fe1_ep>; }; };
			port@2 { pcm2_ep: endpoint { remote-endpoint = <&dsp_fe2_ep>; }; };
			port@3 { pcm3_ep: endpoint { remote-endpoint = <&dsp_fe3_ep>; }; };
			...
		};
	};

	Codec {
		ports {
			port@0 { dai0_ep: endpoint { remote-endpoint = <&dsp_be0_ep>; }; };
			port@1 { dai1_ep: endpoint { remote-endpoint = <&dsp_be1_ep>; }; };
			port@2 { dai2_ep: endpoint { remote-endpoint = <&dsp_be2_ep>; }; };
			port@3 { dai3_ep: endpoint { remote-endpoint = <&dsp_be3_ep>; }; };
			port@4 { dai4_ep: endpoint { remote-endpoint = <&dsp_be4_ep>; }; };
			port@5 { dai5_ep: endpoint { remote-endpoint = <&dsp_be5_ep>; }; };
			...
		};
	};


-- Image ---

As Sample, Normal Audio-Graph

CPU <---> Codec (Same as before)

-- DT Sample --

	sound {
		compatible = "audio-graph-card2";

		dais = <&cpu>;
	};

	CPU {
		cpu: port { cpu_ep: endpoint { remote-endpoint = <&codec_ep>; }; };
	};

	Codec {
		codec: port { codec_ep: endpoint { remote-endpoint = <&cpu_ep>; }; };
	};


-- Image ---

Multi-CPU/Codec
(complex connection as sample)

<- multi_CPU_0 ->
           ******
CPU01 <--> *    * <--> Codec0
       \-> *    *
CPU02 <--> *    *
           ******

           <-- multi_codec_1 -->
          ******
CPU1 <--> *    * <--> Codec11
          *    * <-/
          *    * <--> Codec12
          ******

-- DT Image --

   +--+                     +--+
=> |  | <--> CPU01_1     => |  | <--> CPU1
   |  | <--> CPU01_2        |  |
   |  | <--> CPU02          |  | <--> Codec11_1
   |  |                     |  | <--> Codec11_2
   |  | <--> Codec0         |  | <--> Codec12
   +--+                     +--+

-- DT Sample --

	sound {
		compatible = "audio-graph-card2";

		dais = <&cpu_0,
		        &cpu_1>;
	};

	MULTI0 {
		compatible = "audio-graph-card2-multi";

		cpu_0: ports@0 {
			port@0 { fe0_1_ep: endpoint { remote-endpoint = <&cpu01_1_ep>; }; };
			port@1 { fe0_2_ep: endpoint { remote-endpoint = <&cpu01_2_ep>; }; };
			port@2 { fe0_3_ep: endpoint { remote-endpoint = <&cpu02_ep>; }; };
		};
		ports@1 {
			port@0 { be0_ep: endpoint { remote-endpoint = <&codec0_ep>; }; };
		};
	};

	MULTI1 {
		compatible = "audio-graph-card2-multi";

		cpu_1: ports@0 {
			port@0 { fe1_ep: endpoint { remote-endpoint = <&cpu1_ep>; }; };
		};
		ports@1 {
			port@0 { be1_1_ep: endpoint { remote-endpoint = <&codec11_1_ep>; }; };
			port@1 { be1_2_ep: endpoint { remote-endpoint = <&codec11_2_ep>; }; };
			port@2 { be1_3_ep: endpoint { remote-endpoint = <&codec12_ep>; }; };
		};
	};

	CPU01 {
		ports {
			port@0 { cpu01_1_ep: endpoint { remote-endpoint = <&fe0_1_ep>; }; };
			port@1 { cpu01_2_ep: endpoint { remote-endpoint = <&fe0_2_ep>; }; };
			...
		};
	};

	CPU02 {
		ports {
			port@0 { cpu02_ep: endpoint { remote-endpoint = <&fe0_3_ep>; }; };
			...
		};
	};

	CPU1 {
		ports {
			port@0 { cpu1_ep: endpoint { remote-endpoint = <&fe1_ep>; }; };
			...
		};
	};

	Codec0 {
		ports {
			port@0 { codec0_ep: endpoint { remote-endpoint = <&be0_ep>; }; };
			port@1 { ... };
		};
	};

	Codec11 {
		ports {
			port@0 { codec11_1_ep: endpoint { remote-endpoint = <&be1_1_ep>; }; };
			port@1 { codec11_2_ep: endpoint { remote-endpoint = <&be1_2_ep>; }; };
			port@2 { ... };
		};
	};

	Codec12 {
		ports {
			port@0 { codec12_ep: endpoint { remote-endpoint = <&be1_3_ep>; }; };
			port@1 { ... };
		};
	};
