Return-Path: <alsa-devel-bounces@alsa-project.org>
X-Original-To: lists+alsa-devel@lfdr.de
Delivered-To: lists+alsa-devel@lfdr.de
Received: from alsa0.perex.cz (alsa0.perex.cz [77.48.224.243])
	by mail.lfdr.de (Postfix) with ESMTPS id C43DC259224
	for <lists+alsa-devel@lfdr.de>; Tue,  1 Sep 2020 17:03:50 +0200 (CEST)
Received: from alsa1.perex.cz (alsa1.perex.cz [207.180.221.201])
	(using TLSv1.2 with cipher AECDH-AES256-SHA (256/256 bits))
	(No client certificate requested)
	by alsa0.perex.cz (Postfix) with ESMTPS id 6E7F017DC;
	Tue,  1 Sep 2020 17:03:00 +0200 (CEST)
DKIM-Filter: OpenDKIM Filter v2.11.0 alsa0.perex.cz 6E7F017DC
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/simple; d=alsa-project.org;
	s=default; t=1598972630;
	bh=2sn+LK0S8SKkNzXegWVAmwmL7+Fsh4MLgHvT/o+ZGxs=;
	h=Date:From:To:Subject:In-Reply-To:References:Cc:List-Id:
	 List-Unsubscribe:List-Archive:List-Post:List-Help:List-Subscribe:
	 From;
	b=Vor4Fu5MDze2jX+5iNdLcEfcfT8IFEG8r4Nklh/1UleUZ84j0lqNb1NoX7APbsI65
	 soNkJ7xtgUmjLt0hLLUrtuvC4nFXDnkLPny0l41Jlf4w1dzmz/+NXqFB3pcknufO6N
	 sqdoBkDmuPumbY6T22i9Dtk6cecn27/YfSkr/fvk=
Received: from alsa1.perex.cz (localhost.localdomain [127.0.0.1])
	by alsa1.perex.cz (Postfix) with ESMTP id 95A33F8020D;
	Tue,  1 Sep 2020 17:02:09 +0200 (CEST)
X-Original-To: alsa-devel@alsa-project.org
Delivered-To: alsa-devel@alsa-project.org
Received: by alsa1.perex.cz (Postfix, from userid 50401)
 id CA2E4F80217; Tue,  1 Sep 2020 17:02:07 +0200 (CEST)
X-Spam-Checker-Version: SpamAssassin 3.4.0 (2014-02-07) on alsa1.perex.cz
X-Spam-Level: 
X-Spam-Status: No, score=0.0 required=5.0 tests=RCVD_IN_MSPIKE_H3,
 RCVD_IN_MSPIKE_WL,SPF_HELO_NONE,SPF_PASS autolearn=disabled version=3.4.0
Received: from mx2.suse.de (mx2.suse.de [195.135.220.15])
 (using TLSv1.2 with cipher AECDH-AES256-SHA (256/256 bits))
 (No client certificate requested)
 by alsa1.perex.cz (Postfix) with ESMTPS id 64D2EF801EB
 for <alsa-devel@alsa-project.org>; Tue,  1 Sep 2020 17:01:56 +0200 (CEST)
DKIM-Filter: OpenDKIM Filter v2.11.0 alsa1.perex.cz 64D2EF801EB
X-Virus-Scanned: by amavisd-new at test-mx.suse.de
Received: from relay2.suse.de (unknown [195.135.221.27])
 by mx2.suse.de (Postfix) with ESMTP id A76E4ACC3;
 Tue,  1 Sep 2020 15:01:56 +0000 (UTC)
Date: Tue, 01 Sep 2020 17:01:55 +0200
Message-ID: <s5hft81czh8.wl-tiwai@suse.de>
From: Takashi Iwai <tiwai@suse.de>
To: Jaroslav Kysela <perex@perex.cz>
Subject: Re: [PATCH] ALSA: hda/realtek - Add control fixup for Lenovo Thinkpad
 X1 Carbon 7th
In-Reply-To: <32b649db-ede6-d3ea-a963-d0bac331e4b4@perex.cz>
References: <20200829112746.3118-1-benjamin.poirier@gmail.com>
 <32b649db-ede6-d3ea-a963-d0bac331e4b4@perex.cz>
User-Agent: Wanderlust/2.15.9 (Almost Unreal) SEMI/1.14.6 (Maruoka)
 FLIM/1.14.9 (=?UTF-8?B?R29qxY0=?=) APEL/10.8 Emacs/25.3
 (x86_64-suse-linux-gnu) MULE/6.0 (HANACHIRUSATO)
MIME-Version: 1.0 (generated by SEMI 1.14.6 - "Maruoka")
Content-Type: text/plain; charset=US-ASCII
Cc: alsa-devel@alsa-project.org, Kailang Yang <kailang@realtek.com>,
 Takashi Iwai <tiwai@suse.com>, Hui Wang <hui.wang@canonical.com>,
 Benjamin Poirier <benjamin.poirier@gmail.com>,
 Kai-Heng Feng <kai.heng.feng@canonical.com>,
 Vincent Bernat <vincent@bernat.ch>, Even Brenden <evenbrenden@gmail.com>,
 Mark Pearson <mpearson@lenovo.com>
X-BeenThere: alsa-devel@alsa-project.org
X-Mailman-Version: 2.1.15
Precedence: list
List-Id: "Alsa-devel mailing list for ALSA developers -
 http://www.alsa-project.org" <alsa-devel.alsa-project.org>
List-Unsubscribe: <https://mailman.alsa-project.org/mailman/options/alsa-devel>, 
 <mailto:alsa-devel-request@alsa-project.org?subject=unsubscribe>
List-Archive: <http://mailman.alsa-project.org/pipermail/alsa-devel/>
List-Post: <mailto:alsa-devel@alsa-project.org>
List-Help: <mailto:alsa-devel-request@alsa-project.org?subject=help>
List-Subscribe: <https://mailman.alsa-project.org/mailman/listinfo/alsa-devel>, 
 <mailto:alsa-devel-request@alsa-project.org?subject=subscribe>
Errors-To: alsa-devel-bounces@alsa-project.org
Sender: "Alsa-devel" <alsa-devel-bounces@alsa-project.org>

On Tue, 01 Sep 2020 15:52:09 +0200,
Jaroslav Kysela wrote:
> 
> > +}
> > +
> > +static int tpx1_dual_speaker_vol_put(struct snd_kcontrol *kcontrol,
> > +				     struct snd_ctl_elem_value *ucontrol)
> > +{
> > +	struct tpx1_dual_speaker *speaker_priv = snd_kcontrol_chip(kcontrol);
> > +	int err;
> > +
> > +	/* Control tweeter volume */
> > +	err = speaker_priv->underlying.put(&speaker_priv->underlying,
> > +					   ucontrol);
> > +	if (err < 0)
> > +		return err;
> > +
> > +	/* Control woofer volume (shared with headphone) */
> > +	err = speaker_priv->hp_vol.put(&speaker_priv->hp_vol, ucontrol);
> > +	if (err < 0)
> > +		return err;
> > +
> > +	snd_ctl_notify(speaker_priv->codec->card, SNDRV_CTL_EVENT_MASK_VALUE,
> > +		       &speaker_priv->hp_vol.id);
> > +	return err;
> > +}
> > +
> > +static int tpx1_dual_speaker_vol_tlv(struct snd_kcontrol *kcontrol,
> > +				     int op_flag, unsigned int size,
> > +				     unsigned int __user *tlv)
> > +{
> > +	struct tpx1_dual_speaker *speaker_priv = snd_kcontrol_chip(kcontrol);
> > +
> > +	return speaker_priv->underlying.tlv.c(&speaker_priv->underlying,
> > +					      op_flag, size, tlv);
> > +}
> > +
> > +static void tpx1_dual_speaker_vol_free(struct snd_kcontrol *kcontrol)
> > +{
> > +	struct tpx1_dual_speaker *speaker_priv = snd_kcontrol_chip(kcontrol);
> > +
> > +	if (speaker_priv->underlying.private_free)
> > +		speaker_priv->underlying.private_free(
> > +			&speaker_priv->underlying);
> > +	kfree(speaker_priv);
> > +}
> > +
> > +static int tpx1_dual_override_speaker_vol(struct hda_codec *codec,
> > +					  struct snd_kcontrol *speaker_vol,
> > +					  struct snd_kcontrol *hp_vol)
> > +{
> > +	struct tpx1_dual_speaker *speaker_priv;
> > +
> > +	speaker_priv = kmalloc(sizeof(struct tpx1_dual_speaker), GFP_KERNEL);
> > +	if (!speaker_priv)
> > +		return -ENOMEM;
> > +	speaker_priv->codec = codec;
> > +	memcpy(&speaker_priv->underlying, speaker_vol,
> > +	       sizeof(struct snd_kcontrol));
> > +	memcpy(&speaker_priv->hp_vol, hp_vol, sizeof(struct snd_kcontrol));
> 
> This is a bit clumsy part. It would be probably nice to have a helper in the
> upper control code to clone the original control safely. Takashi?

The purpose of those is to have two controls managing the same amp and
get notified with each other at other's update, right?  The missing
piece is only about notification, and that could be done in the common
code somehow, too.  For example, we can reduce the 16bit usage of NID
to 8 bit embedded in private_value, then we'll have 8 bit space for
storing the coupled kctl nid or some other tag for notification.

However, the approach by this patch has minor problems, as far as I
see:

- The notification may be issued unnecessarily for Master volume
  change;
  when you change Master volume, it'll notify Headphone and/or Speaker
  as well although those (virtual) values aren't changed.
  It's a minor issue and can be almost negligible, though.

- The volume status depends on the operation order;
  e.g. when switching the output from speaker to headphone, at first
  mute and set volume zero Speaker, then unmute/raise Headphone.
  But if we do unmute/raise Headphone at first, then mute/zero
  Speaker, the headphone output will be also zero volume out of
  sudden.
  It seems that PA does in the former way, so the current approach
  might work practically, but it can be a pitfall in some corner
  cases.

BTW, if this approach with the tied kctls sharing the same amp is
acceptable, we may apply it also for the existing case; e.g. the
generic parser already creates a bit weird kctl like "Headphone+LO" or
"Speaker+LO".  Those can be re-implemented with two tied kctls, too.


thanks,

Takashi
