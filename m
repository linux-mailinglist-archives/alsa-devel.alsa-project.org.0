Return-Path: <alsa-devel-bounces@alsa-project.org>
X-Original-To: lists+alsa-devel@lfdr.de
Delivered-To: lists+alsa-devel@lfdr.de
Received: from alsa0.perex.cz (alsa0.perex.cz [77.48.224.243])
	by mail.lfdr.de (Postfix) with ESMTPS id DB61B172DAE
	for <lists+alsa-devel@lfdr.de>; Fri, 28 Feb 2020 01:48:44 +0100 (CET)
Received: from alsa1.perex.cz (alsa1.perex.cz [207.180.221.201])
	(using TLSv1.2 with cipher AECDH-AES256-SHA (256/256 bits))
	(No client certificate requested)
	by alsa0.perex.cz (Postfix) with ESMTPS id 4AAC7169B;
	Fri, 28 Feb 2020 01:47:54 +0100 (CET)
DKIM-Filter: OpenDKIM Filter v2.11.0 alsa0.perex.cz 4AAC7169B
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/simple; d=alsa-project.org;
	s=default; t=1582850924;
	bh=lLvgvFsUmsr2TiodLvi3NOTIFVugwFoon3QVFhPDHL4=;
	h=Date:From:To:Subject:In-Reply-To:References:Cc:List-Id:
	 List-Unsubscribe:List-Archive:List-Post:List-Help:List-Subscribe:
	 From;
	b=O3TMsMJJzZG084RpjvB+ozh4QTX5a8bfAq5uoI1j1LJh/EBf4qMTh/6PHYYQMB2Ir
	 3z0cEu6l0RdNr2n+RxZpqFnuebHIPIkQdBjbPr1AMdlccWzg73hgEpNhcoR/0vSWLu
	 FaHH2UA9dXIXSdi6jSi9YpfGSzii7otyIw+xALAk=
Received: from alsa1.perex.cz (localhost.localdomain [127.0.0.1])
	by alsa1.perex.cz (Postfix) with ESMTP id 5F9D2F80143;
	Fri, 28 Feb 2020 01:47:03 +0100 (CET)
X-Original-To: alsa-devel@alsa-project.org
Delivered-To: alsa-devel@alsa-project.org
Received: by alsa1.perex.cz (Postfix, from userid 50401)
 id 5F434F80142; Fri, 28 Feb 2020 01:47:00 +0100 (CET)
X-Spam-Checker-Version: SpamAssassin 3.4.0 (2014-02-07) on alsa1.perex.cz
X-Spam-Level: 
X-Spam-Status: No, score=0.0 required=5.0 tests=SPF_HELO_NONE,SPF_PASS
 autolearn=disabled version=3.4.0
Received: from relmlie6.idc.renesas.com (relmlor2.renesas.com
 [210.160.252.172])
 by alsa1.perex.cz (Postfix) with ESMTP id 3B51EF80089
 for <alsa-devel@alsa-project.org>; Fri, 28 Feb 2020 01:46:54 +0100 (CET)
DKIM-Filter: OpenDKIM Filter v2.11.0 alsa1.perex.cz 3B51EF80089
Date: 28 Feb 2020 09:46:51 +0900
X-IronPort-AV: E=Sophos;i="5.70,493,1574089200"; d="scan'208";a="40246138"
Received: from unknown (HELO relmlir6.idc.renesas.com) ([10.200.68.152])
 by relmlie6.idc.renesas.com with ESMTP; 28 Feb 2020 09:46:51 +0900
Received: from mercury.renesas.com (unknown [10.166.252.133])
 by relmlir6.idc.renesas.com (Postfix) with ESMTP id 58E0B4139DE1;
 Fri, 28 Feb 2020 09:46:51 +0900 (JST)
Message-ID: <874kvb7d38.wl-kuninori.morimoto.gx@renesas.com>
From: Kuninori Morimoto <kuninori.morimoto.gx@renesas.com>
To: Kai Vehmanen <kai.vehmanen@linux.intel.com>
Subject: Re: [PATCH] ASoC: soc-pcm: Revert "call
 snd_soc_component_open/close() once"
In-Reply-To: <alpine.DEB.2.21.2002271110010.2957@eliteleevi.tm.intel.com>
References: <20200219182650.1416-1-kai.vehmanen@linux.intel.com>
 <87blput7hh.wl-kuninori.morimoto.gx@renesas.com>
 <alpine.DEB.2.21.2002201103060.2957@eliteleevi.tm.intel.com>
 <87mu9cspyf.wl-kuninori.morimoto.gx@renesas.com>
 <alpine.DEB.2.21.2002211251280.2957@eliteleevi.tm.intel.com>
 <87mu978pob.wl-kuninori.morimoto.gx@renesas.com>
 <87ftey88wk.wl-kuninori.morimoto.gx@renesas.com>
 <alpine.DEB.2.21.2002271110010.2957@eliteleevi.tm.intel.com>
User-Agent: Wanderlust/2.15.9 Emacs/25.2 Mule/6.0
MIME-Version: 1.0 (generated by SEMI-EPG 1.14.7 - "Harue")
Content-Type: text/plain; charset=ISO-8859-1
Content-Transfer-Encoding: quoted-printable
Cc: alsa-devel@alsa-project.org, broonie@kernel.org,
 ranjani.sridharan@linux.intel.com, digetx@gmail.com,
 pierre-louis.bossart@linux.intel.com
X-BeenThere: alsa-devel@alsa-project.org
X-Mailman-Version: 2.1.15
Precedence: list
List-Id: "Alsa-devel mailing list for ALSA developers -
 http://www.alsa-project.org" <alsa-devel.alsa-project.org>
List-Unsubscribe: <https://mailman.alsa-project.org/mailman/options/alsa-devel>, 
 <mailto:alsa-devel-request@alsa-project.org?subject=unsubscribe>
List-Archive: <http://mailman.alsa-project.org/pipermail/alsa-devel/>
List-Post: <mailto:alsa-devel@alsa-project.org>
List-Help: <mailto:alsa-devel-request@alsa-project.org?subject=help>
List-Subscribe: <https://mailman.alsa-project.org/mailman/listinfo/alsa-devel>, 
 <mailto:alsa-devel-request@alsa-project.org?subject=subscribe>
Errors-To: alsa-devel-bounces@alsa-project.org
Sender: "Alsa-devel" <alsa-devel-bounces@alsa-project.org>


Hi Kai

Thank you for feedback

> thanks for the longer explanation. It's true we have a lot of code with=20
> for_each_xxx() loops, and loop logic where errors can occur. It seems the=
=20
> most common approach is to store the index and use for_each_xxx_rollback(=
)=20
> macros to clean up in case error happens. This does lead to the problem o=
f=20
> essentially duplicated logic e.g. for soc_pcm_close() and error handling =

> of snd_pcm_open().

Thank you for understanding my headache.
My opinion is that complex duplicated code never bring luck to us.

> And yeah, it's also a bit error prone as the logic is=20
> not exactly the same. E.g. I'm not convinced this is quite right in=20
> soc_pcm_open():
>=20
> =BB       for_each_rtd_codec_dai(rtd, i, codec_dai) {                    =
                                                                           =
                                                          =20
> =BB       =BB       ret =3D snd_soc_dai_startup(codec_dai, substream);   =
                                                                           =
                                                              =20
> =BB       =BB       if (ret < 0) {                                       =
                                                                           =
                                                            =20
> =BB       =BB       =BB       dev_err(codec_dai->dev,                    =
                                                                           =
                                                              =20
> =BB       =BB       =BB       =BB       "ASoC: can't open codec %s: %d\n"=
,                                                                          =
                                                                =20
> =BB       =BB       =BB       =BB       codec_dai->name, ret);           =
                                                                           =
                                                                =20
> =BB       =BB       =BB       goto config_err;                           =
                                                                           =
                                                              =20
> =BB       =BB       }                                            =20
> ...
> config_err:                                                              =
                                                                           =
                                                        =20
> =BB       for_each_rtd_codec_dai(rtd, i, codec_dai)                      =
                                                                           =
                                                          =20
> =BB       =BB       snd_soc_dai_shutdown(codec_dai, substream);          =
                                                                           =
                                                            =20
> =BB       i =3D rtd->num_cpus;

Yeah indeed.
I think this is just one of the BUG.
I guess we can find similar issue everywhere.

> Having a single cleanup path would be easier, but I think in the end it=20
> comes down to how cleanly you can track the opened state. It seems bigges=
t=20
> issue is how to cleanly track the component-substream pairs. Ideally we'd=
=20
> have a dedicated state object to represent an opened component-substream =

> pair, but that's not how the APIs are defined now. But something to that
> effect is needed.

Yeah, I can understand your concern, but not 100% yet.
In my understanding, counting start vs stop is not enough but not so bad.
If my understanding was correct, your concern is
counting only is not enough, because wrong component-substream pair
can be used, like this ?

	start(substream-A); <=3D
	start(substream-B);
	start(substream-C);

	stop(substream-Z);  <=3D
	stop(substream-B);
	stop(substream-C);

But I wonder is it really happen ?
If there is clear such case, yes, we need to consider
component-substream pair list, somehow.

If you are worry about some kind of BUG, I guess we need to solve
is such bug, not error handling method.
But how about step-by-step approach (I like it :) ?
At first, add counting method as 1st step. Indeed it is not enough,
but we can cleanup error handling.
If we found/noticed above not-enough-case,
start to consider about component-substream pair list ?

Thank you for your help !!
Best regards
---
Kuninori Morimoto
