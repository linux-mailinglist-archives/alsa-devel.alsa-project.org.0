Return-Path: <alsa-devel-bounces@alsa-project.org>
X-Original-To: lists+alsa-devel@lfdr.de
Delivered-To: lists+alsa-devel@lfdr.de
Received: from alsa0.perex.cz (alsa0.perex.cz [77.48.224.243])
	by mail.lfdr.de (Postfix) with ESMTPS id 0B8F43A5B41
	for <lists+alsa-devel@lfdr.de>; Mon, 14 Jun 2021 03:00:59 +0200 (CEST)
Received: from alsa1.perex.cz (alsa1.perex.cz [207.180.221.201])
	(using TLSv1.2 with cipher AECDH-AES256-SHA (256/256 bits))
	(No client certificate requested)
	by alsa0.perex.cz (Postfix) with ESMTPS id 9F27417B1;
	Mon, 14 Jun 2021 03:00:08 +0200 (CEST)
DKIM-Filter: OpenDKIM Filter v2.11.0 alsa0.perex.cz 9F27417B1
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/simple; d=alsa-project.org;
	s=default; t=1623632458;
	bh=ChO3J9xbNQYCQIhfw6eGm5+MqXavHtOQuWKTPcb9oz0=;
	h=Date:From:Subject:To:In-Reply-To:References:Cc:List-Id:
	 List-Unsubscribe:List-Archive:List-Post:List-Help:List-Subscribe:
	 From;
	b=eq0lNCOJjwW3YJ6zzgSexo2DqHoFdvjMchCme2Ht6IGIjze4cqPBdigpzFZ4rTLBX
	 uy1c9i2ucwjYNTkp4ghmuKlIAvaLvJ5s7Jh4YRXSpSA5Mbzt+HAcOxSCMWQWEbQUTj
	 /IpouuPEDiUm1/VXC5GJNhXcRRGEYHATKX76LBio=
Received: from alsa1.perex.cz (localhost.localdomain [127.0.0.1])
	by alsa1.perex.cz (Postfix) with ESMTP id E3A71F804E3;
	Mon, 14 Jun 2021 02:58:50 +0200 (CEST)
X-Original-To: alsa-devel@alsa-project.org
Delivered-To: alsa-devel@alsa-project.org
Received: by alsa1.perex.cz (Postfix, from userid 50401)
 id 8B05EF804CF; Mon, 14 Jun 2021 02:58:49 +0200 (CEST)
X-Spam-Checker-Version: SpamAssassin 3.4.0 (2014-02-07) on alsa1.perex.cz
X-Spam-Level: 
X-Spam-Status: No, score=0.4 required=5.0 tests=KHOP_HELO_FCRDNS, SPF_HELO_NONE,
 SPF_NONE,URIBL_BLOCKED autolearn=disabled version=3.4.0
Received: from relmlie5.idc.renesas.com (relmlor1.renesas.com
 [210.160.252.171])
 by alsa1.perex.cz (Postfix) with ESMTP id 08C49F804CF
 for <alsa-devel@alsa-project.org>; Mon, 14 Jun 2021 02:58:36 +0200 (CEST)
DKIM-Filter: OpenDKIM Filter v2.11.0 alsa1.perex.cz 08C49F804CF
Date: 14 Jun 2021 09:58:35 +0900
X-IronPort-AV: E=Sophos;i="5.83,272,1616425200"; d="scan'208";a="84248308"
Received: from unknown (HELO relmlir6.idc.renesas.com) ([10.200.68.152])
 by relmlie5.idc.renesas.com with ESMTP; 14 Jun 2021 09:58:35 +0900
Received: from mercury.renesas.com (unknown [10.166.252.133])
 by relmlir6.idc.renesas.com (Postfix) with ESMTP id 9277A4143002;
 Mon, 14 Jun 2021 09:58:35 +0900 (JST)
Message-ID: <87zgvtuuro.wl-kuninori.morimoto.gx@renesas.com>
From: Kuninori Morimoto <kuninori.morimoto.gx@renesas.com>
Subject: [PATCH v3 8/8] ASoC: soc-core: remove snd_soc_of_parse_daifmt()
User-Agent: Wanderlust/2.15.9 Emacs/26.3 Mule/6.0
To: Liam Girdwood <lgirdwood@gmail.com>,
	Mark Brown <broonie@kernel.org>
In-Reply-To: <87bl89w9fw.wl-kuninori.morimoto.gx@renesas.com>
References: <87bl89w9fw.wl-kuninori.morimoto.gx@renesas.com>
MIME-Version: 1.0 (generated by SEMI-EPG 1.14.7 - "Harue")
Content-Type: text/plain; charset=US-ASCII
Cc: Alexandre Belloni <alexandre.belloni@bootlin.com>,
 Timur Tabi <timur@kernel.org>, Xiubo Li <Xiubo.Lee@gmail.com>,
 Martin Blumenstingl <martin.blumenstingl@googlemail.com>,
 Shengjiu Wang <shengjiu.wang@gmail.com>, Sameer Pujar <spujar@nvidia.com>,
 Neil Armstrong <narmstrong@baylibre.com>,
 Nicolas Ferre <nicolas.ferre@microchip.com>,
 Nicolin Chen <nicoleotsuka@gmail.com>,
 Ludovic Desroches <ludovic.desroches@microchip.com>,
 Kevin Hilman <khilman@baylibre.com>,
 Codrin Ciubotariu <codrin.ciubotariu@microchip.com>,
 alsa-devel@alsa-project.org, Fabio Estevam <festevam@gmail.com>,
 Jerome Brunet <jbrunet@baylibre.com>
X-BeenThere: alsa-devel@alsa-project.org
X-Mailman-Version: 2.1.15
Precedence: list
List-Id: "Alsa-devel mailing list for ALSA developers -
 http://www.alsa-project.org" <alsa-devel.alsa-project.org>
List-Unsubscribe: <https://mailman.alsa-project.org/mailman/options/alsa-devel>, 
 <mailto:alsa-devel-request@alsa-project.org?subject=unsubscribe>
List-Archive: <http://mailman.alsa-project.org/pipermail/alsa-devel/>
List-Post: <mailto:alsa-devel@alsa-project.org>
List-Help: <mailto:alsa-devel-request@alsa-project.org?subject=help>
List-Subscribe: <https://mailman.alsa-project.org/mailman/listinfo/alsa-devel>, 
 <mailto:alsa-devel-request@alsa-project.org?subject=subscribe>
Errors-To: alsa-devel-bounces@alsa-project.org
Sender: "Alsa-devel" <alsa-devel-bounces@alsa-project.org>


From: Kuninori Morimoto <kuninori.morimoto.gx@renesas.com>

No driver is using snd_soc_of_parse_daifmt().
This patch removes it.

Signed-off-by: Kuninori Morimoto <kuninori.morimoto.gx@renesas.com>
---
 include/sound/soc.h  |   4 --
 sound/soc/soc-core.c | 104 -------------------------------------------
 2 files changed, 108 deletions(-)

diff --git a/include/sound/soc.h b/include/sound/soc.h
index 63194a8773cd..675849d07284 100644
--- a/include/sound/soc.h
+++ b/include/sound/soc.h
@@ -1249,10 +1249,6 @@ unsigned int snd_soc_daifmt_parse_clock_provider_raw(struct device_node *np,
 	snd_soc_daifmt_clock_provider_from_bitmap(			\
 		snd_soc_daifmt_parse_clock_provider_as_bitmap(np, prefix))
 
-unsigned int snd_soc_of_parse_daifmt(struct device_node *np,
-				     const char *prefix,
-				     struct device_node **bitclkmaster,
-				     struct device_node **framemaster);
 int snd_soc_get_dai_id(struct device_node *ep);
 int snd_soc_get_dai_name(const struct of_phandle_args *args,
 			 const char **dai_name);
diff --git a/sound/soc/soc-core.c b/sound/soc/soc-core.c
index 4cb9bb009e90..b9d2b8b650c4 100644
--- a/sound/soc/soc-core.c
+++ b/sound/soc/soc-core.c
@@ -3169,110 +3169,6 @@ unsigned int snd_soc_daifmt_parse_clock_provider_raw(struct device_node *np,
 }
 EXPORT_SYMBOL_GPL(snd_soc_daifmt_parse_clock_provider_raw);
 
-unsigned int snd_soc_of_parse_daifmt(struct device_node *np,
-				     const char *prefix,
-				     struct device_node **bitclkmaster,
-				     struct device_node **framemaster)
-{
-	int ret, i;
-	char prop[128];
-	unsigned int format = 0;
-	int bit, frame;
-	const char *str;
-	struct {
-		char *name;
-		unsigned int val;
-	} of_fmt_table[] = {
-		{ "i2s",	SND_SOC_DAIFMT_I2S },
-		{ "right_j",	SND_SOC_DAIFMT_RIGHT_J },
-		{ "left_j",	SND_SOC_DAIFMT_LEFT_J },
-		{ "dsp_a",	SND_SOC_DAIFMT_DSP_A },
-		{ "dsp_b",	SND_SOC_DAIFMT_DSP_B },
-		{ "ac97",	SND_SOC_DAIFMT_AC97 },
-		{ "pdm",	SND_SOC_DAIFMT_PDM},
-		{ "msb",	SND_SOC_DAIFMT_MSB },
-		{ "lsb",	SND_SOC_DAIFMT_LSB },
-	};
-
-	if (!prefix)
-		prefix = "";
-
-	/*
-	 * check "dai-format = xxx"
-	 * or    "[prefix]format = xxx"
-	 * SND_SOC_DAIFMT_FORMAT_MASK area
-	 */
-	ret = of_property_read_string(np, "dai-format", &str);
-	if (ret < 0) {
-		snprintf(prop, sizeof(prop), "%sformat", prefix);
-		ret = of_property_read_string(np, prop, &str);
-	}
-	if (ret == 0) {
-		for (i = 0; i < ARRAY_SIZE(of_fmt_table); i++) {
-			if (strcmp(str, of_fmt_table[i].name) == 0) {
-				format |= of_fmt_table[i].val;
-				break;
-			}
-		}
-	}
-
-	/*
-	 * check "[prefix]continuous-clock"
-	 * SND_SOC_DAIFMT_CLOCK_MASK area
-	 */
-	snprintf(prop, sizeof(prop), "%scontinuous-clock", prefix);
-	if (of_property_read_bool(np, prop))
-		format |= SND_SOC_DAIFMT_CONT;
-	else
-		format |= SND_SOC_DAIFMT_GATED;
-
-	/*
-	 * check "[prefix]bitclock-inversion"
-	 * check "[prefix]frame-inversion"
-	 * SND_SOC_DAIFMT_INV_MASK area
-	 */
-	snprintf(prop, sizeof(prop), "%sbitclock-inversion", prefix);
-	bit = !!of_get_property(np, prop, NULL);
-
-	snprintf(prop, sizeof(prop), "%sframe-inversion", prefix);
-	frame = !!of_get_property(np, prop, NULL);
-
-	switch ((bit << 4) + frame) {
-	case 0x11:
-		format |= SND_SOC_DAIFMT_IB_IF;
-		break;
-	case 0x10:
-		format |= SND_SOC_DAIFMT_IB_NF;
-		break;
-	case 0x01:
-		format |= SND_SOC_DAIFMT_NB_IF;
-		break;
-	default:
-		/* SND_SOC_DAIFMT_NB_NF is default */
-		break;
-	}
-
-	/*
-	 * check "[prefix]bitclock-master"
-	 * check "[prefix]frame-master"
-	 * SND_SOC_DAIFMT_MASTER_MASK area
-	 */
-	snprintf(prop, sizeof(prop), "%sbitclock-master", prefix);
-	bit = !!of_get_property(np, prop, NULL);
-	if (bit && bitclkmaster)
-		*bitclkmaster = of_parse_phandle(np, prop, 0);
-
-	snprintf(prop, sizeof(prop), "%sframe-master", prefix);
-	frame = !!of_get_property(np, prop, NULL);
-	if (frame && framemaster)
-		*framemaster = of_parse_phandle(np, prop, 0);
-
-	format |= snd_soc_daifmt_clock_provider_from_bitmap((bit << 4) + frame);
-
-	return format;
-}
-EXPORT_SYMBOL_GPL(snd_soc_of_parse_daifmt);
-
 int snd_soc_get_dai_id(struct device_node *ep)
 {
 	struct snd_soc_component *component;
-- 
2.25.1

