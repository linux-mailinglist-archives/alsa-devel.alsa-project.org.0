Return-Path: <alsa-devel-bounces@alsa-project.org>
X-Original-To: lists+alsa-devel@lfdr.de
Delivered-To: lists+alsa-devel@lfdr.de
Received: from alsa0.perex.cz (alsa0.perex.cz [77.48.224.243])
	by mail.lfdr.de (Postfix) with ESMTPS id 3584C5234D9
	for <lists+alsa-devel@lfdr.de>; Wed, 11 May 2022 15:58:50 +0200 (CEST)
Received: from alsa1.perex.cz (alsa1.perex.cz [207.180.221.201])
	(using TLSv1.2 with cipher AECDH-AES256-SHA (256/256 bits))
	(No client certificate requested)
	by alsa0.perex.cz (Postfix) with ESMTPS id C94841A73;
	Wed, 11 May 2022 15:57:59 +0200 (CEST)
DKIM-Filter: OpenDKIM Filter v2.11.0 alsa0.perex.cz C94841A73
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/simple; d=alsa-project.org;
	s=default; t=1652277529;
	bh=yVNMDnFX7EMJ+n2LtqIgAoU0BAg9+mD21GLIyvfrkng=;
	h=Date:From:To:Subject:In-Reply-To:References:Cc:List-Id:
	 List-Unsubscribe:List-Archive:List-Post:List-Help:List-Subscribe:
	 From;
	b=DtuezUHjcxx2X17FODcF4Z6PBLcHqwPJdZVQ177fG2oituz9pL5yE/Wn8IBEYAZBx
	 dmrg/tKGWvUzHc8B5sVuB1BVfKQRpyXEKFQLWCN62cBbnQuwUinlJiUfEb++dimo3H
	 PiDP2wdWyvmnz3DJnIbMWp4IM6xtkQJ3LV09A060=
Received: from alsa1.perex.cz (localhost.localdomain [127.0.0.1])
	by alsa1.perex.cz (Postfix) with ESMTP id E3B42F80511;
	Wed, 11 May 2022 15:57:34 +0200 (CEST)
X-Original-To: alsa-devel@alsa-project.org
Delivered-To: alsa-devel@alsa-project.org
Received: by alsa1.perex.cz (Postfix, from userid 50401)
 id E3863F80510; Wed, 11 May 2022 15:57:32 +0200 (CEST)
X-Spam-Checker-Version: SpamAssassin 3.4.0 (2014-02-07) on alsa1.perex.cz
X-Spam-Level: 
X-Spam-Status: No, score=-0.1 required=5.0 tests=DKIM_SIGNED,DKIM_VALID,
 DKIM_VALID_AU,SPF_HELO_NONE,SPF_NONE,T_SCC_BODY_TEXT_LINE,URIBL_BLOCKED
 autolearn=disabled version=3.4.0
Received: from smtp-out1.suse.de (smtp-out1.suse.de [195.135.220.28])
 (using TLSv1.2 with cipher ECDHE-RSA-AES128-GCM-SHA256 (128/128 bits))
 (No client certificate requested)
 by alsa1.perex.cz (Postfix) with ESMTPS id 05EF2F80508
 for <alsa-devel@alsa-project.org>; Wed, 11 May 2022 15:57:24 +0200 (CEST)
DKIM-Filter: OpenDKIM Filter v2.11.0 alsa1.perex.cz 05EF2F80508
Authentication-Results: alsa1.perex.cz;
 dkim=pass (1024-bit key) header.d=suse.de header.i=@suse.de
 header.b="s7iigxFX"; 
 dkim=permerror (0-bit key) header.d=suse.de header.i=@suse.de
 header.b="9Hbknvhn"
Received: from relay2.suse.de (relay2.suse.de [149.44.160.134])
 by smtp-out1.suse.de (Postfix) with ESMTP id 816D221A08;
 Wed, 11 May 2022 13:57:24 +0000 (UTC)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=suse.de; s=susede2_rsa;
 t=1652277444; h=from:from:reply-to:date:date:message-id:message-id:to:to:cc:cc:
 mime-version:mime-version:content-type:content-type:
 in-reply-to:in-reply-to:references:references;
 bh=vy1RHNn6+NEqxgAxPBD+llyUwtMO3GKyAbDkm5VBlZA=;
 b=s7iigxFXJvLdJfmOb+Lhbw1MqV2qnXaDz4Kl/qCoGsdhr4xz6ccPHhY0rMzRPl0uCosN4i
 IBdlHKYIlNnCLa1aevbmCgFjwDN6U7P9vXsYGlc0nRF0xPPXh1jGnri2GXzdgeMvLJZV1p
 CxS4flpSHvcKyROQ+Gz5l880JL2E1Os=
DKIM-Signature: v=1; a=ed25519-sha256; c=relaxed/relaxed; d=suse.de;
 s=susede2_ed25519; t=1652277444;
 h=from:from:reply-to:date:date:message-id:message-id:to:to:cc:cc:
 mime-version:mime-version:content-type:content-type:
 in-reply-to:in-reply-to:references:references;
 bh=vy1RHNn6+NEqxgAxPBD+llyUwtMO3GKyAbDkm5VBlZA=;
 b=9HbknvhnXH10CDQ6pJ3RdMpD+I/u+AdrGTLADI5dHoHjB6BWl/TUi9acyTyQeAm5pXtkhg
 XKXIBcNTdELVeyAg==
Received: from alsa1.suse.de (alsa1.suse.de [10.160.4.42])
 by relay2.suse.de (Postfix) with ESMTP id 7185F2C141;
 Wed, 11 May 2022 13:57:24 +0000 (UTC)
Date: Wed, 11 May 2022 15:57:24 +0200
Message-ID: <s5hy1z8f9yz.wl-tiwai@suse.de>
From: Takashi Iwai <tiwai@suse.de>
To: Vitaly Rodionov <vitalyr@opensource.cirrus.com>
Subject: Re: [PATCH v2 22/26] ALSA: hda: cs35l41: Read Speaker Calibration
 data from UEFI variables
In-Reply-To: <20220509214703.4482-23-vitalyr@opensource.cirrus.com>
References: <20220509214703.4482-1-vitalyr@opensource.cirrus.com>
 <20220509214703.4482-23-vitalyr@opensource.cirrus.com>
User-Agent: Wanderlust/2.15.9 (Almost Unreal) SEMI/1.14.6 (Maruoka)
 FLIM/1.14.9 (=?UTF-8?B?R29qxY0=?=) APEL/10.8 Emacs/25.3
 (x86_64-suse-linux-gnu) MULE/6.0 (HANACHIRUSATO)
MIME-Version: 1.0 (generated by SEMI 1.14.6 - "Maruoka")
Content-Type: text/plain; charset=US-ASCII
Cc: alsa-devel@alsa-project.org, patches@opensource.cirrus.com,
 Takashi Iwai <tiwai@suse.com>, linux-kernel@vger.kernel.org,
 Stefan Binding <sbinding@opensource.cirrus.com>,
 Mark Brown <broonie@kernel.org>
X-BeenThere: alsa-devel@alsa-project.org
X-Mailman-Version: 2.1.15
Precedence: list
List-Id: "Alsa-devel mailing list for ALSA developers -
 http://www.alsa-project.org" <alsa-devel.alsa-project.org>
List-Unsubscribe: <https://mailman.alsa-project.org/mailman/options/alsa-devel>, 
 <mailto:alsa-devel-request@alsa-project.org?subject=unsubscribe>
List-Archive: <http://mailman.alsa-project.org/pipermail/alsa-devel/>
List-Post: <mailto:alsa-devel@alsa-project.org>
List-Help: <mailto:alsa-devel-request@alsa-project.org?subject=help>
List-Subscribe: <https://mailman.alsa-project.org/mailman/listinfo/alsa-devel>, 
 <mailto:alsa-devel-request@alsa-project.org?subject=subscribe>
Errors-To: alsa-devel-bounces@alsa-project.org
Sender: "Alsa-devel" <alsa-devel-bounces@alsa-project.org>

On Mon, 09 May 2022 23:46:59 +0200,
Vitaly Rodionov wrote:
> 
> From: Stefan Binding <sbinding@opensource.cirrus.com>
> 
> Speaker Calibration data, specific to an individual speaker is
> stored inside UEFI variables during calibration, and can be
> used by the DSP.

Does this build without CONFIG_EFI?


thanks,

Takashi

> Signed-off-by: Stefan Binding <sbinding@opensource.cirrus.com>
> Signed-off-by: Vitaly Rodionov <vitalyr@opensource.cirrus.com>
> ---
>  sound/pci/hda/cs35l41_hda.c | 57 +++++++++++++++++++++++++++++++++++++
>  sound/pci/hda/cs35l41_hda.h | 15 ++++++++++
>  2 files changed, 72 insertions(+)
> 
> diff --git a/sound/pci/hda/cs35l41_hda.c b/sound/pci/hda/cs35l41_hda.c
> index 9c622104bf01..7e87b355b369 100644
> --- a/sound/pci/hda/cs35l41_hda.c
> +++ b/sound/pci/hda/cs35l41_hda.c
> @@ -22,10 +22,18 @@
>  #define CS35L41_FIRMWARE_ROOT "cirrus/"
>  #define CS35L41_PART "cs35l41"
>  #define FW_NAME "CSPL"
> +#define CIRRUS_EFI_GUID \
> +	EFI_GUID(0x02f9af02, 0x7734, 0x4233, 0xb4, 0x3d, 0x93, 0xfe, 0x5a, 0xa3, 0x5d, 0xb3)
>  
>  #define HALO_STATE_DSP_CTL_NAME		"HALO_STATE"
>  #define HALO_STATE_DSP_CTL_TYPE		5
>  #define HALO_STATE_DSP_CTL_ALG		262308
> +#define CAL_R_DSP_CTL_NAME		"CAL_R"
> +#define CAL_R_DSP_CTL_TYPE		5
> +#define CAL_R_DSP_CTL_ALG		205
> +
> +static efi_char16_t efi_name[] = L"CirrusSmartAmpCalibrationData";
> +static efi_guid_t efi_guid = CIRRUS_EFI_GUID;
>  
>  static const struct reg_sequence cs35l41_hda_config[] = {
>  	{ CS35L41_PLL_CLK_CTRL,		0x00000430 }, // 3072000Hz, BCLK Input, PLL_REFCLK_EN = 1
> @@ -282,6 +290,50 @@ static int cs35l41_request_firmware_files(struct cs35l41_hda *cs35l41,
>  	return ret;
>  }
>  
> +static int cs35l41_apply_calibration(struct cs35l41_hda *cs35l41)
> +{
> +	const struct cs35l41_amp_efi_data *efi_data;
> +	const struct cs35l41_amp_cal_data *cl;
> +	unsigned long data_size = 0;
> +	efi_status_t status;
> +	int ret = 0;
> +	u8 *data = NULL;
> +	u32 attr;
> +	u32 r0;
> +
> +	/* Get real size of UEFI variable */
> +	status = efi.get_variable(efi_name, &efi_guid, &attr, &data_size, data);
> +	if (status == EFI_BUFFER_TOO_SMALL) {
> +		ret = -ENODEV;
> +		/* Allocate data buffer of data_size bytes */
> +		data = vmalloc(data_size);
> +		if (!data)
> +			return -ENOMEM;
> +		/* Get variable contents into buffer */
> +		status = efi.get_variable(efi_name, &efi_guid, &attr, &data_size, data);
> +		if (status == EFI_SUCCESS) {
> +			efi_data = (struct cs35l41_amp_efi_data *)data;
> +			dev_dbg(cs35l41->dev, "Calibration: Size=%d, Amp Count=%d\n",
> +				efi_data->size, efi_data->count);
> +			if (efi_data->count > cs35l41->index) {
> +				cl = &efi_data->data[cs35l41->index];
> +				dev_dbg(cs35l41->dev,
> +					"Calibration: Ambient=%02x, Status=%02x, R0=%d\n",
> +					cl->calAmbient, cl->calStatus, cl->calR);
> +				r0 = cpu_to_be32(cl->calR);
> +				ret = hda_cs_dsp_write_ctl(&cs35l41->cs_dsp, CAL_R_DSP_CTL_NAME,
> +							   CAL_R_DSP_CTL_TYPE, CAL_R_DSP_CTL_ALG,
> +							   &r0, 4);
> +				if (ret)
> +					dev_err(cs35l41->dev, "Cannot Write Control: %s - %d\n",
> +						CAL_R_DSP_CTL_NAME, ret);
> +			}
> +		}
> +		vfree(data);
> +	}
> +	return ret;
> +}
> +
>  static int cs35l41_init_dsp(struct cs35l41_hda *cs35l41)
>  {
>  	const struct firmware *coeff_firmware = NULL;
> @@ -314,7 +366,12 @@ static int cs35l41_init_dsp(struct cs35l41_hda *cs35l41)
>  
>  	ret = cs_dsp_power_up(dsp, wmfw_firmware, wmfw_filename, coeff_firmware, coeff_filename,
>  			      FW_NAME);
> +	if (ret)
> +		goto err_release;
> +
> +	ret = cs35l41_apply_calibration(cs35l41);
>  
> +err_release:
>  	if (wmfw_firmware)
>  		release_firmware(wmfw_firmware);
>  	if (coeff_firmware)
> diff --git a/sound/pci/hda/cs35l41_hda.h b/sound/pci/hda/cs35l41_hda.h
> index 54521a013e78..3cf9871fbed2 100644
> --- a/sound/pci/hda/cs35l41_hda.h
> +++ b/sound/pci/hda/cs35l41_hda.h
> @@ -10,6 +10,7 @@
>  #ifndef __CS35L41_HDA_H__
>  #define __CS35L41_HDA_H__
>  
> +#include <linux/efi.h>
>  #include <linux/regulator/consumer.h>
>  #include <linux/gpio/consumer.h>
>  #include <linux/device.h>
> @@ -18,6 +19,20 @@
>  #include <linux/firmware/cirrus/cs_dsp.h>
>  #include <linux/firmware/cirrus/wmfw.h>
>  
> +struct cs35l41_amp_cal_data {
> +	u32 calTarget[2];
> +	u32 calTime[2];
> +	s8 calAmbient;
> +	u8 calStatus;
> +	u16 calR;
> +} __packed;
> +
> +struct cs35l41_amp_efi_data {
> +	u32 size;
> +	u32 count;
> +	struct cs35l41_amp_cal_data data[];
> +} __packed;
> +
>  enum cs35l41_hda_spk_pos {
>  	CS35l41_LEFT,
>  	CS35l41_RIGHT,
> -- 
> 2.34.1
> 
