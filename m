Return-Path: <alsa-devel-bounces@alsa-project.org>
X-Original-To: lists+alsa-devel@lfdr.de
Delivered-To: lists+alsa-devel@lfdr.de
Received: from alsa0.perex.cz (alsa0.perex.cz [77.48.224.243])
	by mail.lfdr.de (Postfix) with ESMTPS id 63D874A2D0D
	for <lists+alsa-devel@lfdr.de>; Sat, 29 Jan 2022 09:21:39 +0100 (CET)
Received: from alsa1.perex.cz (alsa1.perex.cz [207.180.221.201])
	(using TLSv1.2 with cipher AECDH-AES256-SHA (256/256 bits))
	(No client certificate requested)
	by alsa0.perex.cz (Postfix) with ESMTPS id 0202B16F2;
	Sat, 29 Jan 2022 09:20:49 +0100 (CET)
DKIM-Filter: OpenDKIM Filter v2.11.0 alsa0.perex.cz 0202B16F2
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/simple; d=alsa-project.org;
	s=default; t=1643444499;
	bh=yQzd6K9+TTfTOGv47/8O6//jnNhYZdpuiio2ZBLtpxs=;
	h=Date:From:To:Subject:In-Reply-To:References:Cc:List-Id:
	 List-Unsubscribe:List-Archive:List-Post:List-Help:List-Subscribe:
	 From;
	b=uyA171VTHbwLbXRAmG0nh8hiVpNhMq9DlKMihSLkq5uT4JpHgCe31ig8NtUKrWBbD
	 v5NVd7XdBbXlwDGtmFU2nSkxt5JC3hJlsVYbS9/6RP/KLCzCOgGZYVMDAy35pRtudy
	 uP9yzL/fWgPbzaWwCngyA/vgNq/xJJAO4JVqzUKQ=
Received: from alsa1.perex.cz (localhost.localdomain [127.0.0.1])
	by alsa1.perex.cz (Postfix) with ESMTP id 678AAF800E3;
	Sat, 29 Jan 2022 09:20:34 +0100 (CET)
X-Original-To: alsa-devel@alsa-project.org
Delivered-To: alsa-devel@alsa-project.org
Received: by alsa1.perex.cz (Postfix, from userid 50401)
 id 7FC5DF801F7; Sat, 29 Jan 2022 09:20:33 +0100 (CET)
X-Spam-Checker-Version: SpamAssassin 3.4.0 (2014-02-07) on alsa1.perex.cz
X-Spam-Level: 
X-Spam-Status: No, score=-0.1 required=5.0 tests=DKIM_SIGNED,DKIM_VALID,
 DKIM_VALID_AU,SPF_HELO_NONE,SPF_NONE autolearn=disabled version=3.4.0
Received: from smtp-out2.suse.de (smtp-out2.suse.de [195.135.220.29])
 (using TLSv1.2 with cipher ECDHE-RSA-AES128-GCM-SHA256 (128/128 bits))
 (No client certificate requested)
 by alsa1.perex.cz (Postfix) with ESMTPS id 0BA9DF8014B
 for <alsa-devel@alsa-project.org>; Sat, 29 Jan 2022 09:20:25 +0100 (CET)
DKIM-Filter: OpenDKIM Filter v2.11.0 alsa1.perex.cz 0BA9DF8014B
Authentication-Results: alsa1.perex.cz;
 dkim=pass (1024-bit key) header.d=suse.de header.i=@suse.de
 header.b="fPDltyJA"; 
 dkim=permerror (0-bit key) header.d=suse.de header.i=@suse.de
 header.b="1fAjckwk"
Received: from relay2.suse.de (relay2.suse.de [149.44.160.134])
 by smtp-out2.suse.de (Postfix) with ESMTP id 33D1E1F37B;
 Sat, 29 Jan 2022 08:20:23 +0000 (UTC)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=suse.de; s=susede2_rsa;
 t=1643444423; h=from:from:reply-to:date:date:message-id:message-id:to:to:cc:cc:
 mime-version:mime-version:content-type:content-type:
 content-transfer-encoding:content-transfer-encoding:
 in-reply-to:in-reply-to:references:references;
 bh=YQGe8ku0xgyOr5vWVm7ZKhVbHPS12hwqWMo7r42m+vg=;
 b=fPDltyJAcjS9Xa6/tv0Mu9nklS7kHMr+HGru4P5KtNHNWzWVnO+lu5VlKgbxN117jux9MO
 zUbjqZ5j7iP3ZxD0pqjrXRYGoyZjYEGrN3opxreAus3nyRhx1bdU0jwZqHWS72ekmVvtWP
 1sjj5dIEYzi0FJvXraixyWF4t+8zCA0=
DKIM-Signature: v=1; a=ed25519-sha256; c=relaxed/relaxed; d=suse.de;
 s=susede2_ed25519; t=1643444423;
 h=from:from:reply-to:date:date:message-id:message-id:to:to:cc:cc:
 mime-version:mime-version:content-type:content-type:
 content-transfer-encoding:content-transfer-encoding:
 in-reply-to:in-reply-to:references:references;
 bh=YQGe8ku0xgyOr5vWVm7ZKhVbHPS12hwqWMo7r42m+vg=;
 b=1fAjckwkqjuW6ClPPv5NZqCZsDGYOSyG1duC3rHJUbNZ6Yd1jFDfCQh3nLrR6vqdk0imam
 Stgt+XWEvTthPPBA==
Received: from alsa1.suse.de (alsa1.suse.de [10.160.4.42])
 by relay2.suse.de (Postfix) with ESMTP id DF6ECA3B83;
 Sat, 29 Jan 2022 08:20:22 +0000 (UTC)
Date: Sat, 29 Jan 2022 09:20:22 +0100
Message-ID: <s5hilu3eywp.wl-tiwai@suse.de>
From: Takashi Iwai <tiwai@suse.de>
To: Jia-Ju Bai <baijiaju1990@gmail.com>
Subject: Re: [BUG] ALSA: core: possible deadlock involving waiting and locking
 operations
In-Reply-To: <37c84cd1-80c6-cbcf-6673-d90d99501d4f@gmail.com>
References: <56766037-972e-9e5b-74c1-88633a72a77f@gmail.com>
 <YfTCKrjpaeKWFglO@workstation>
 <37c84cd1-80c6-cbcf-6673-d90d99501d4f@gmail.com>
User-Agent: Wanderlust/2.15.9 (Almost Unreal) SEMI/1.14.6 (Maruoka)
 FLIM/1.14.9 (=?UTF-8?B?R29qxY0=?=) APEL/10.8 Emacs/25.3
 (x86_64-suse-linux-gnu) MULE/6.0 (HANACHIRUSATO)
MIME-Version: 1.0 (generated by SEMI 1.14.6 - "Maruoka")
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit
Cc: alsa-devel@alsa-project.org, tiwai@suse.com,
 linux-kernel <linux-kernel@vger.kernel.org>, broonie@kernel.org
X-BeenThere: alsa-devel@alsa-project.org
X-Mailman-Version: 2.1.15
Precedence: list
List-Id: "Alsa-devel mailing list for ALSA developers -
 http://www.alsa-project.org" <alsa-devel.alsa-project.org>
List-Unsubscribe: <https://mailman.alsa-project.org/mailman/options/alsa-devel>, 
 <mailto:alsa-devel-request@alsa-project.org?subject=unsubscribe>
List-Archive: <http://mailman.alsa-project.org/pipermail/alsa-devel/>
List-Post: <mailto:alsa-devel@alsa-project.org>
List-Help: <mailto:alsa-devel-request@alsa-project.org?subject=help>
List-Subscribe: <https://mailman.alsa-project.org/mailman/listinfo/alsa-devel>, 
 <mailto:alsa-devel-request@alsa-project.org?subject=subscribe>
Errors-To: alsa-devel-bounces@alsa-project.org
Sender: "Alsa-devel" <alsa-devel-bounces@alsa-project.org>

On Sat, 29 Jan 2022 09:07:05 +0100,
Jia-Ju Bai wrote:
> 
> 
> 
> On 2022/1/29 12:27, Takashi Sakamoto wrote:
> > Hi,
> >
> > On Sat, Jan 29, 2022 at 11:33:26AM +0800, Jia-Ju Bai wrote:
> >> Hello,
> >>
> >> My static analysis tool reports a possible deadlock in the sound driver
> >> in Linux 5.10:
> >>
> >> snd_card_disconnect_sync()
> >>    spin_lock_irq(&card->files_lock); --> Line 461 (Lock A)
> >>    wait_event_lock_irq(card->remove_sleep, ...); --> Line 462 (Wait X)
> >>    spin_unlock_irq(&card->files_lock); --> Line 465 (Unlock A)
> >>
> >> snd_hwdep_release()
> >>    mutex_lock(&hw->open_mutex); --> Line 152 (Lock B)
> >>    mutex_unlock(&hw->open_mutex); --> Line 157 (Unlock B)
> >>    snd_card_file_remove()
> >>      wake_up_all(&card->remove_sleep); --> Line 976 (Wake X)
> >>
> >> snd_hwdep_open()
> >>    mutex_lock(&hw->open_mutex); --> Line 95 (Lock B)
> >>    snd_card_file_add()
> >>      spin_lock(&card->files_lock); --> Line 932 (Lock A)
> >>      spin_unlock(&card->files_lock); --> Line 940 (Unlock A)
> >>    mutex_unlock(&hw->open_mutex); --> Line 139 (Unlock B)
> >>
> >> When snd_card_disconnect_sync() is executed, "Wait X" is performed by
> >> holding "Lock A". If snd_hwdep_open() is executed at this time, it holds
> >> "Lock B" and then waits for acquiring "Lock A". If snd_hwdep_release()
> >> is executed at this time, it waits for acquiring "Lock B", and thus
> >> "Wake X" cannot be performed to wake up "Wait X" in
> >> snd_card_disconnect_sync(), causing a possible deadlock.
> >>
> >> I am not quite sure whether this possible problem is real and how to fix
> >> it if it is real.
> >> Any feedback would be appreciated, thanks :)
> > I'm interested in your report about the deadlock, and seek the cause
> > of issue. Then I realized that we should take care of the replacement of
> > file_operation before acquiring spinlock in snd_card_disconnect_sync().
> >
> > ```
> > snd_card_disconnect_sync()
> > ->snd_card_disconnect()
> >    ->spin_lock()
> >    ->list_for_each_entry()
> >      mfile->file->f_op = snd_shutdown_f_ops
> >    ->spin_unlock()
> > ->spin_lock_irq()
> > ->wait_event_lock_irq()
> > ->spin_unlock_irq()
> > ```
> >
> > The implementation of snd_shutdown_f_ops has no value for .open, therefore
> > snd_hwdep_open() is not called anymore when waiting the event. The mutex
> > (Lock B) is not acquired in process context of ALSA hwdep application.
> >
> > The original .release function can be called by snd_disconnect_release()
> > via replaced snd_shutdown_f_ops. In the case, as you can see, the spinlock
> > (Lock A) is not acquired.
> >
> > I think there are no race conditions against Lock A and B in process
> > context of ALSA hwdep application after card disconnection. But it would
> > be probable to overlook the other case. I would be glad to receive your
> > check for the above procedure.
> 
> Thanks a lot for the quick reply :)
> Your explanation is reasonable, because snd_shutdown_f_ops indeed has
> no value for .open.
> 
> However, my static analysis tool finds another possible deadlock in
> the mentioned code:
> 
> snd_card_disconnect_sync()
>   spin_lock_irq(&card->files_lock); --> Line 461 (Lock A)
>   wait_event_lock_irq(card->remove_sleep, ...); --> Line 462 (Wait X)
>   spin_unlock_irq(&card->files_lock); --> Line 465 (Unlock A)
> 
> snd_hwdep_release()
>   snd_card_file_remove()
>     spin_lock(&card->files_lock); --> Line 962 (Lock A)
>     wake_up_all(&card->remove_sleep); --> Line 976 (Wake X)
>     spin_unlock(&card->files_lock); --> Line 977 (Unlock A)
> 
> When snd_card_disconnect_sync() is executed, "Wait X" is performed by
> holding "Lock A".

No, it's wait_event_lock_irq(), and this helper unlocks the given lock
during waiting and re-locks it after schedule().  See the macro
expansion in include/linux/wait.h.


Takashi
