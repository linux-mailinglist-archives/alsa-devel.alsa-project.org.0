Return-Path: <alsa-devel-bounces@alsa-project.org>
X-Original-To: lists+alsa-devel@lfdr.de
Delivered-To: lists+alsa-devel@lfdr.de
Received: from alsa0.perex.cz (alsa0.perex.cz [77.48.224.243])
	by mail.lfdr.de (Postfix) with ESMTPS id 760944830E8
	for <lists+alsa-devel@lfdr.de>; Mon,  3 Jan 2022 13:16:48 +0100 (CET)
Received: from alsa1.perex.cz (alsa1.perex.cz [207.180.221.201])
	(using TLSv1.2 with cipher AECDH-AES256-SHA (256/256 bits))
	(No client certificate requested)
	by alsa0.perex.cz (Postfix) with ESMTPS id D24DE1731;
	Mon,  3 Jan 2022 13:15:57 +0100 (CET)
DKIM-Filter: OpenDKIM Filter v2.11.0 alsa0.perex.cz D24DE1731
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/simple; d=alsa-project.org;
	s=default; t=1641212207;
	bh=gtnxGoeSQ9UVI8HEeihGTkupaFxSxrYS2Q4G7hoLZuw=;
	h=Date:From:To:Subject:In-Reply-To:References:Cc:List-Id:
	 List-Unsubscribe:List-Archive:List-Post:List-Help:List-Subscribe:
	 From;
	b=r6LiD4YSIQKPvfJe02rA9SsoCvAef2dL8pwolHqvVzBo4D0FeNRntTqgd4vrIQMU5
	 sqVTVgiv3IizkyNZ0jX3tqGWxyEvOhzE7m4bCV0vHCQFaSxaDHVlS1gNio4xT28ADu
	 DYgdcfLJY+SFc4IKIkOXdMSdsZLxEj7ZVaRjaR9U=
Received: from alsa1.perex.cz (localhost.localdomain [127.0.0.1])
	by alsa1.perex.cz (Postfix) with ESMTP id 5418EF8013F;
	Mon,  3 Jan 2022 13:15:42 +0100 (CET)
X-Original-To: alsa-devel@alsa-project.org
Delivered-To: alsa-devel@alsa-project.org
Received: by alsa1.perex.cz (Postfix, from userid 50401)
 id 043DBF8007E; Mon,  3 Jan 2022 13:15:41 +0100 (CET)
X-Spam-Checker-Version: SpamAssassin 3.4.0 (2014-02-07) on alsa1.perex.cz
X-Spam-Level: **
X-Spam-Status: No, score=2.1 required=5.0 tests=DKIM_SIGNED,DKIM_VALID,
 DKIM_VALID_AU,PRX_BODYSUB_1,SPF_HELO_NONE,SPF_NONE,URIBL_BLOCKED
 autolearn=disabled version=3.4.0
Received: from smtp-out2.suse.de (smtp-out2.suse.de [195.135.220.29])
 (using TLSv1.2 with cipher ECDHE-RSA-AES128-GCM-SHA256 (128/128 bits))
 (No client certificate requested)
 by alsa1.perex.cz (Postfix) with ESMTPS id ED0CFF800E3
 for <alsa-devel@alsa-project.org>; Mon,  3 Jan 2022 13:15:32 +0100 (CET)
DKIM-Filter: OpenDKIM Filter v2.11.0 alsa1.perex.cz ED0CFF800E3
Authentication-Results: alsa1.perex.cz;
 dkim=pass (1024-bit key) header.d=suse.de header.i=@suse.de
 header.b="qyX+7r8v"; 
 dkim=permerror (0-bit key) header.d=suse.de header.i=@suse.de
 header.b="bQgjE6OW"
Received: from relay2.suse.de (relay2.suse.de [149.44.160.134])
 by smtp-out2.suse.de (Postfix) with ESMTP id 910FD1F38B;
 Mon,  3 Jan 2022 12:15:32 +0000 (UTC)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=suse.de; s=susede2_rsa;
 t=1641212132; h=from:from:reply-to:date:date:message-id:message-id:to:to:cc:cc:
 mime-version:mime-version:content-type:content-type:
 content-transfer-encoding:content-transfer-encoding:
 in-reply-to:in-reply-to:references:references;
 bh=CXBCapzwFbjrnwWk3YM/vZEo6By/JUrYhFhg6Q4iAGo=;
 b=qyX+7r8vJ4NKtnnk/mdEE0zrr1tcAYld5VZthBHtLDvPCpxPX9eZhfC4Mc80WDEtZYev06
 E0YTtSWpQHbZxRmDMGmgSv2WP1Gazv+vz5i8915leToRwqiPapNgqbDFiIXAuUVJLqx2Z9
 3JZxkJDK91AISTxSDYKu/kG+nfK7Am4=
DKIM-Signature: v=1; a=ed25519-sha256; c=relaxed/relaxed; d=suse.de;
 s=susede2_ed25519; t=1641212132;
 h=from:from:reply-to:date:date:message-id:message-id:to:to:cc:cc:
 mime-version:mime-version:content-type:content-type:
 content-transfer-encoding:content-transfer-encoding:
 in-reply-to:in-reply-to:references:references;
 bh=CXBCapzwFbjrnwWk3YM/vZEo6By/JUrYhFhg6Q4iAGo=;
 b=bQgjE6OWmcPFCekok4IrnonkdUKaDDRhyeEQRuj6LA7oKq/y1jtTsfMz5q1GWGQwAAjZKD
 QRnLwMZd7mEEhuDg==
Received: from alsa1.suse.de (alsa1.suse.de [10.160.4.42])
 by relay2.suse.de (Postfix) with ESMTP id 605A4A3B81;
 Mon,  3 Jan 2022 12:15:32 +0000 (UTC)
Date: Mon, 03 Jan 2022 13:15:32 +0100
Message-ID: <s5ho84tm2vv.wl-tiwai@suse.de>
From: Takashi Iwai <tiwai@suse.de>
To: Pavel Hofman <pavel.hofman@ivitera.com>
Subject: Re: Correct stopping capture and playback substreams?
In-Reply-To: <fbd19fee-343c-c5c6-d426-02ccaa497f7f@ivitera.com>
References: <448e059f-fbac-66ed-204b-f6f9c2c19212@ivitera.com>
 <9635d70f-dc12-f9ed-29f5-ce34a1d4b112@ivitera.com>
 <baefb4a7-0373-49b0-0247-f70c3c585eaf@perex.cz>
 <fbd19fee-343c-c5c6-d426-02ccaa497f7f@ivitera.com>
User-Agent: Wanderlust/2.15.9 (Almost Unreal) SEMI/1.14.6 (Maruoka)
 FLIM/1.14.9 (=?UTF-8?B?R29qxY0=?=) APEL/10.8 Emacs/25.3
 (x86_64-suse-linux-gnu) MULE/6.0 (HANACHIRUSATO)
MIME-Version: 1.0 (generated by SEMI 1.14.6 - "Maruoka")
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit
Cc: Julian Scheel <julian@jusst.de>,
 "alsa-devel@alsa-project.org" <alsa-devel@alsa-project.org>,
 "linux-usb@vger.kernel.org" <linux-usb@vger.kernel.org>,
 Jack Pham <jackp@codeaurora.org>, John Keeping <john@metanate.com>,
 Ruslan Bilovol <ruslan.bilovol@gmail.com>, Yunhao Tian <t123yh.xyz@gmail.com>,
 Jerome Brunet <jbrunet@baylibre.com>
X-BeenThere: alsa-devel@alsa-project.org
X-Mailman-Version: 2.1.15
Precedence: list
List-Id: "Alsa-devel mailing list for ALSA developers -
 http://www.alsa-project.org" <alsa-devel.alsa-project.org>
List-Unsubscribe: <https://mailman.alsa-project.org/mailman/options/alsa-devel>, 
 <mailto:alsa-devel-request@alsa-project.org?subject=unsubscribe>
List-Archive: <http://mailman.alsa-project.org/pipermail/alsa-devel/>
List-Post: <mailto:alsa-devel@alsa-project.org>
List-Help: <mailto:alsa-devel-request@alsa-project.org?subject=help>
List-Subscribe: <https://mailman.alsa-project.org/mailman/listinfo/alsa-devel>, 
 <mailto:alsa-devel-request@alsa-project.org?subject=subscribe>
Errors-To: alsa-devel-bounces@alsa-project.org
Sender: "Alsa-devel" <alsa-devel-bounces@alsa-project.org>

On Mon, 03 Jan 2022 12:32:53 +0100,
Pavel Hofman wrote:
> 
> 
> 
> Dne 03. 01. 22 v 10:10 Jaroslav Kysela napsal(a):
> > On 03. 01. 22 9:22, Pavel Hofman wrote:
> >>
> >> Dne 23. 12. 21 v 9:18 Pavel Hofman napsal(a):
> >>> Hi Takashi,
> >>>
> >>> I am working on stopping alsa streams of audio USB gadget when USB host
> >>> stops capture/playback/USB cable unplugged.
> >>>
> >>> For capture I used code from AK4114 SPDIF receiver
> >>> https://elixir.bootlin.com/linux/latest/source/sound/i2c/other/ak4114.c#L590: 
> >>>
> >>>
> >>>
> >>> static void stop_substream(struct uac_rtd_params *prm)
> >>> {
> >>>       unsigned long _flags;
> >>>       struct snd_pcm_substream *substream;
> >>>
> >>>       substream = prm->ss;
> >>>       if (substream) {
> >>>           snd_pcm_stream_lock_irqsave(substream, _flags);
> >>>           if (snd_pcm_running(substream))
> >>>               // TODO - correct handling for playback substream?
> >>>               snd_pcm_stop(substream, SNDRV_PCM_STATE_DRAINING);
> >>>           snd_pcm_stream_unlock_irqrestore(substream, _flags);
> >>>       }
> >>> }
> >>>
> >>> For setup I found calling snd_pcm_stop(substream, SNDRV_PCM_STATE_SETUP)
> >>> (https://elixir.bootlin.com/linux/latest/source/drivers/staging/vc04_services/bcm2835-audio/bcm2835-pcm.c#L63) 
> >>>
> >>>    Or for both capture and playback using SNDRV_PCM_STATE_DISCONNECTED
> >>> (https://elixir.bootlin.com/linux/latest/source/sound/core/pcm.c#L1103).
> >>>
> >>> Or perhaps using snd_pcm_dev_disconnect(dev) or snd_pcm_drop(substream)?
> >>>
> >>> Please what is the recommended way?
> >>>
> >>
> >> Please can I ask for expert view on this issue? E.g. in SoX stopping the
> >> stream with SNDRV_PCM_STATE_SETUP/SNDRV_PCM_STATE_DRAINING does not stop
> >> the application, while with SNDRV_PCM_STATE_DISCONNECTED SoX exits with
> >> non-recoverable status. I am considering implementing both methods and
> >> letting users choose their suitable snd_pcm_stop operation (none
> >> (default)/SETUP-DRAINING/DISCONNECTED) for the two events (host
> >> playback/capture stop, cable disconnection) with a configfs param. Would
> >> this make sense?
> >
> > The disconnection state is unrecoverable. It's expected that the
> > device will be freed and cannot be reused.
> >
> > If you expect to keep the PCM device, we should probably introduce a
> > new function which puts the device to the SNDRV_PCM_STATE_OPEN
> > state. In this state, all I/O routines will return -EBADFD for the
> > applications, so they should close or re-initialize the PCM device
> > completely.
> >
> > https://elixir.bootlin.com/linux/latest/source/sound/core/pcm_native.c#L794
> >
> 
> The fact is that after closing the USB host can re-open the device
> with different samplerate (and perhaps later on with different
> channels count/sample size). That would hint at the need to
> re-initialize the gadget side before opening  anyway.
> 
> As of keeping the device - it's likely some use cases would prefer
> keeping the device, to minimize the operations needed to react to the
> host-side playback/capture start.
> 
> A function you describe would make sense for this. IMO from the gadget
> POW there is no difference  between the host stopping playback/capture
> and cable disconnection, in both cases the data stream is stopped and
> next stream can have entirely different parameters. Maybe the gadget
> configfs parameter could only toggle between no action (i.e. current
> situation) and the new alsa function stopping the stream.
> 
> Jaroslav, please can you draft such a function? Perhaps both changes
> could make it to 5.17.

(Sorry for the delayed response, as I've been on vacation and now
catching up the huge pile of backlogs...)

About the change to keep PCM OPEN state: I'm afraid that the
disconnection in the host side may happen at any time, and keeping the
state OPEN would confuse the things if the host is indeed
unrecoverable.  That said, from the safety POV, the complete
card-level disconnection would make sense, which has, of course, a
clear downside for the smooth transition in the application as you
described above.  But most applications should handle such a
disconnection in anyway for the normal USB-audio devices that face
more or less the same problem.


thanks,

Takashi
