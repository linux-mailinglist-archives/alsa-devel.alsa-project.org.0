Return-Path: <alsa-devel-bounces@alsa-project.org>
X-Original-To: lists+alsa-devel@lfdr.de
Delivered-To: lists+alsa-devel@lfdr.de
Received: from alsa0.perex.cz (alsa0.perex.cz [77.48.224.243])
	by mail.lfdr.de (Postfix) with ESMTPS id A544942F962
	for <lists+alsa-devel@lfdr.de>; Fri, 15 Oct 2021 18:58:16 +0200 (CEST)
Received: from alsa1.perex.cz (alsa1.perex.cz [207.180.221.201])
	(using TLSv1.2 with cipher AECDH-AES256-SHA (256/256 bits))
	(No client certificate requested)
	by alsa0.perex.cz (Postfix) with ESMTPS id 31B051866;
	Fri, 15 Oct 2021 18:57:26 +0200 (CEST)
DKIM-Filter: OpenDKIM Filter v2.11.0 alsa0.perex.cz 31B051866
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/simple; d=alsa-project.org;
	s=default; t=1634317096;
	bh=9udQe4tOPD6tL6+rlN/CeS5Ak+PPbc6uY21TgRJLs3Q=;
	h=Date:From:To:Subject:In-Reply-To:References:Cc:List-Id:
	 List-Unsubscribe:List-Archive:List-Post:List-Help:List-Subscribe:
	 From;
	b=P6qxkmJqXsS3VA6raECEPQbpnNavDMGxpbSxE+xbuEjJdpom/LaDTA8KEOjJrrEgc
	 v74dwmDmItDB8qOP4Vbl72UFn/LwFS92xDa5sw1Hqh4P3xDmx95BVkLABIDEIiUH3b
	 IVSX0t/Tr9rfX4LcekPvAS0P2RzUSd9PCrsswoP8=
Received: from alsa1.perex.cz (localhost.localdomain [127.0.0.1])
	by alsa1.perex.cz (Postfix) with ESMTP id A27BEF8025B;
	Fri, 15 Oct 2021 18:56:59 +0200 (CEST)
X-Original-To: alsa-devel@alsa-project.org
Delivered-To: alsa-devel@alsa-project.org
Received: by alsa1.perex.cz (Postfix, from userid 50401)
 id 04780F80269; Fri, 15 Oct 2021 18:56:58 +0200 (CEST)
X-Spam-Checker-Version: SpamAssassin 3.4.0 (2014-02-07) on alsa1.perex.cz
X-Spam-Level: 
X-Spam-Status: No, score=-0.1 required=5.0 tests=DKIM_SIGNED,DKIM_VALID,
 DKIM_VALID_AU,SPF_HELO_NONE,SPF_NONE autolearn=disabled version=3.4.0
Received: from smtp-out1.suse.de (smtp-out1.suse.de [195.135.220.28])
 (using TLSv1.2 with cipher ECDHE-RSA-AES128-GCM-SHA256 (128/128 bits))
 (No client certificate requested)
 by alsa1.perex.cz (Postfix) with ESMTPS id 8DA79F8016C
 for <alsa-devel@alsa-project.org>; Fri, 15 Oct 2021 18:56:53 +0200 (CEST)
DKIM-Filter: OpenDKIM Filter v2.11.0 alsa1.perex.cz 8DA79F8016C
Authentication-Results: alsa1.perex.cz;
 dkim=pass (1024-bit key) header.d=suse.de header.i=@suse.de
 header.b="NSSOPO5d"; 
 dkim=permerror (0-bit key) header.d=suse.de header.i=@suse.de
 header.b="WerHXpzN"
Received: from relay2.suse.de (relay2.suse.de [149.44.160.134])
 by smtp-out1.suse.de (Postfix) with ESMTP id 356E821A6D;
 Fri, 15 Oct 2021 16:56:48 +0000 (UTC)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=suse.de; s=susede2_rsa;
 t=1634317008; h=from:from:reply-to:date:date:message-id:message-id:to:to:cc:cc:
 mime-version:mime-version:content-type:content-type:
 in-reply-to:in-reply-to:references:references;
 bh=dhDQfRzdWjoQAA9wLkDzmZrDRzBCVOaY+5kBnn+OZ+g=;
 b=NSSOPO5dO3DmBJs2cFghl1oPUO8fa6oH3Cpq0EZQg+Gc8L09smGJgx7ubuCrnvChFWJ9HH
 m8msQ1ifgDIAsHgr12GDWTmRFe8NFwR1TfeQO66yRY4qp9QBZVQ2GzYnhIKHYoE+VAQSmz
 R8ZdT5nPEDt11oj3hUSzD9SNgkCtp7c=
DKIM-Signature: v=1; a=ed25519-sha256; c=relaxed/relaxed; d=suse.de;
 s=susede2_ed25519; t=1634317008;
 h=from:from:reply-to:date:date:message-id:message-id:to:to:cc:cc:
 mime-version:mime-version:content-type:content-type:
 in-reply-to:in-reply-to:references:references;
 bh=dhDQfRzdWjoQAA9wLkDzmZrDRzBCVOaY+5kBnn+OZ+g=;
 b=WerHXpzNkZtBKCeOCuB72DTfG8Sa4VnztHlHvr6o6NJ2f1SUvngyoqyaHaajqMg1Nc/xY8
 GJpVf05XfRxqbDAw==
Received: from alsa1.suse.de (alsa1.suse.de [10.160.4.42])
 by relay2.suse.de (Postfix) with ESMTP id 967BBA3B89;
 Fri, 15 Oct 2021 16:56:47 +0000 (UTC)
Date: Fri, 15 Oct 2021 18:56:47 +0200
Message-ID: <s5hmtnateeo.wl-tiwai@suse.de>
From: Takashi Iwai <tiwai@suse.de>
To: Pierre-Louis Bossart <pierre-louis.bossart@linux.intel.com>
Subject: Re: [RFC PATCH v3 05/13] ASoC: soc-pcm: align BE 'atomicity' with
 that of the FE
In-Reply-To: <8aa4fa07-2b55-3927-f482-c2fd2b01a22e@linux.intel.com>
References: <20211013143050.244444-1-pierre-louis.bossart@linux.intel.com>
 <20211013143050.244444-6-pierre-louis.bossart@linux.intel.com>
 <2847a6d1-d97f-4161-c8b6-03672cf6645c@nvidia.com>
 <s5hmtnavisi.wl-tiwai@suse.de>
 <e2a79095-b8ce-9dd4-3e6d-00f8dda99f30@linux.intel.com>
 <s5h1r4muwlj.wl-tiwai@suse.de>
 <8aa4fa07-2b55-3927-f482-c2fd2b01a22e@linux.intel.com>
User-Agent: Wanderlust/2.15.9 (Almost Unreal) SEMI/1.14.6 (Maruoka)
 FLIM/1.14.9 (=?UTF-8?B?R29qxY0=?=) APEL/10.8 Emacs/25.3
 (x86_64-suse-linux-gnu) MULE/6.0 (HANACHIRUSATO)
MIME-Version: 1.0 (generated by SEMI 1.14.6 - "Maruoka")
Content-Type: text/plain; charset=US-ASCII
Cc: alsa-devel@alsa-project.org,
 Kuninori Morimoto <kuninori.morimoto.gx@renesas.com>,
 Liam Girdwood <lgirdwood@gmail.com>, Sameer Pujar <spujar@nvidia.com>,
 Takashi Iwai <tiwai@suse.com>, open list <linux-kernel@vger.kernel.org>,
 vkoul@kernel.org, broonie@kernel.org, Gyeongtaek Lee <gt82.lee@samsung.com>,
 Peter Ujfalusi <peter.ujfalusi@linux.intel.com>
X-BeenThere: alsa-devel@alsa-project.org
X-Mailman-Version: 2.1.15
Precedence: list
List-Id: "Alsa-devel mailing list for ALSA developers -
 http://www.alsa-project.org" <alsa-devel.alsa-project.org>
List-Unsubscribe: <https://mailman.alsa-project.org/mailman/options/alsa-devel>, 
 <mailto:alsa-devel-request@alsa-project.org?subject=unsubscribe>
List-Archive: <http://mailman.alsa-project.org/pipermail/alsa-devel/>
List-Post: <mailto:alsa-devel@alsa-project.org>
List-Help: <mailto:alsa-devel-request@alsa-project.org?subject=help>
List-Subscribe: <https://mailman.alsa-project.org/mailman/listinfo/alsa-devel>, 
 <mailto:alsa-devel-request@alsa-project.org?subject=subscribe>
Errors-To: alsa-devel-bounces@alsa-project.org
Sender: "Alsa-devel" <alsa-devel-bounces@alsa-project.org>

On Fri, 15 Oct 2021 18:22:58 +0200,
Pierre-Louis Bossart wrote:
> 
> 
> > The FE stream locks are necessary only two points: at adding and
> > deleting the BE in the link.  We used dpcm_lock in other places, but
> > those are superfluous or would make problem if converted to a FE
> > stream lock.
> 
> I must be missing a fundamental concept here - possibly a set of concepts...
> 
> It is my understanding that the FE-BE connection can be updated
> dynamically without any relationship to the usual ALSA steps, e.g. as a
> result of a control being changed by a user.
> 
> So if you only protect the addition/removal, isn't there a case where
> the for_each_dpcm_be() loop would either miss a BE or point to an
> invalid one?

No, for sleepable context, pcm_mutex is *always* taken when
adding/deleting a BE, and that's the main protection for the link.
The BE stream lock is taken additionally over it at adding/deleting a
BE, just for the code path via FE and BE trigger.

> In other words, don't we need the *same* lock to be used
> a) before changing and
> b) walking through the list?

> I also don't get what would happen if the dpcm_lock was converted to an
> FE stream lock. It works fine in my tests, so if there's limitation I
> didn't see it.

dpcm_lock was put in the places that could be recursively taken.
So this caused some deadlock, I suppose.

> >>> In addition, a lock around dpcm_show_state() might be needed to be
> >>> replaced with card->pcm_mutex, and we may need to revisit whether all
> >>> other paths take card->pcm_mutex.
> >>
> >> What happens if we show the state while a trigger happens? That's my
> >> main concern with using two separate locks (pcm_mutex and FE stream
> >> lock) to protect the same list, there are still windows of time where
> >> the list is not protected.
> > 
> > With the proper use of mutex, the list itself is protected.
> > If we need to protect the concurrent access to each BE in the show
> > method, an additional BE lock is needed in that part.  But that's a
> > subtle issue, as the link traversal itself is protected by the mutex.
> 
> If I look at your patch2, dpcm_be_disconnect() protects the list removal
> with the fe stream lock, but the show state is protected by both the
> pcm_mutex and the fe stream lock.

No, show_state() itself doesn't take any lock, but its caller
dpcm_state_read_file() takes the pcm_mutex.  That protects the list
addition / deletion.

> I have not been able to figure out when you need
> a) the pcm_mutex only
> b) the fe stream lock only
> c) both pcm_mutex and fe stream lock

The pcm_mutex is needed for every sleepable function that treat DPCM
FE link, but the mutex is taken only at the upper level, i.e. the
top-most caller like PCM ops FE itself or the DAPM calls.

That said, pcm_mutex is the top-most protection of BE links in FE.
But, there is a code path where a mutex can't be used, and that's the
FE and BE trigger.  For protecting against this, the FE stream lock is
taken only at the placing both adding and deleting a BE *in addition*.
At those places, both pcm_mutex and FE stream lock are taken.

BE stream lock is taken in addition below the above mutex and FE
locks.


Takashi
