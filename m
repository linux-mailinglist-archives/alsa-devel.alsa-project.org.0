Return-Path: <alsa-devel-bounces@alsa-project.org>
X-Original-To: lists+alsa-devel@lfdr.de
Delivered-To: lists+alsa-devel@lfdr.de
Received: from alsa0.perex.cz (alsa0.perex.cz [77.48.224.243])
	by mail.lfdr.de (Postfix) with ESMTPS id AA9EB34A2CA
	for <lists+alsa-devel@lfdr.de>; Fri, 26 Mar 2021 08:57:23 +0100 (CET)
Received: from alsa1.perex.cz (alsa1.perex.cz [207.180.221.201])
	(using TLSv1.2 with cipher AECDH-AES256-SHA (256/256 bits))
	(No client certificate requested)
	by alsa0.perex.cz (Postfix) with ESMTPS id 36AF51663;
	Fri, 26 Mar 2021 08:56:33 +0100 (CET)
DKIM-Filter: OpenDKIM Filter v2.11.0 alsa0.perex.cz 36AF51663
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/simple; d=alsa-project.org;
	s=default; t=1616745443;
	bh=QISsBOMZNyQYcAGwlw2PIpOTCbYlgBBtH8GXdRv918U=;
	h=Date:From:To:Subject:In-Reply-To:References:Cc:List-Id:
	 List-Unsubscribe:List-Archive:List-Post:List-Help:List-Subscribe:
	 From;
	b=BTvZUnQ8XE74OjcJ6jrxqaSJWwhRnvM3/EtrqgvZUYOpJRP1zQmhkiAkT2bjp09ft
	 3yYY4BmAdZstjT7IWrkO+VysTeM4ombhhZfbIZjIqbMTUHGbqUWlr1ucTgWdD6L3GR
	 WizRl/YF+o1SNxiXizentNFzxVT5b9MuszRxvgps=
Received: from alsa1.perex.cz (localhost.localdomain [127.0.0.1])
	by alsa1.perex.cz (Postfix) with ESMTP id C445AF801D5;
	Fri, 26 Mar 2021 08:55:58 +0100 (CET)
X-Original-To: alsa-devel@alsa-project.org
Delivered-To: alsa-devel@alsa-project.org
Received: by alsa1.perex.cz (Postfix, from userid 50401)
 id 22D0CF8016B; Fri, 26 Mar 2021 08:55:54 +0100 (CET)
X-Spam-Checker-Version: SpamAssassin 3.4.0 (2014-02-07) on alsa1.perex.cz
X-Spam-Level: 
X-Spam-Status: No, score=0.0 required=5.0 tests=SPF_HELO_NONE,SPF_NONE,
 URIBL_BLOCKED autolearn=disabled version=3.4.0
Received: from mx2.suse.de (mx2.suse.de [195.135.220.15])
 (using TLSv1.2 with cipher AECDH-AES256-SHA (256/256 bits))
 (No client certificate requested)
 by alsa1.perex.cz (Postfix) with ESMTPS id 9BFB1F800D0
 for <alsa-devel@alsa-project.org>; Fri, 26 Mar 2021 08:55:44 +0100 (CET)
DKIM-Filter: OpenDKIM Filter v2.11.0 alsa1.perex.cz 9BFB1F800D0
X-Virus-Scanned: by amavisd-new at test-mx.suse.de
Received: from relay2.suse.de (unknown [195.135.221.27])
 by mx2.suse.de (Postfix) with ESMTP id 2D1D0ADEF;
 Fri, 26 Mar 2021 07:55:39 +0000 (UTC)
Date: Fri, 26 Mar 2021 08:55:38 +0100
Message-ID: <s5hr1k2l56t.wl-tiwai@suse.de>
From: Takashi Iwai <tiwai@suse.de>
To: Takashi Sakamoto <o-takashi@sakamocchi.jp>
Subject: Re: [PATCH v2] sound: rawmidi: Add framing mode
In-Reply-To: <20210326044615.GA51246@workstation>
References: <20210324054253.34642-1-coding@diwic.se>
 <20210324124430.GA3711@workstation>
 <057ef387-9ee1-2678-29ce-d644f2a3a90a@diwic.se>
 <20210326044615.GA51246@workstation>
User-Agent: Wanderlust/2.15.9 (Almost Unreal) SEMI/1.14.6 (Maruoka)
 FLIM/1.14.9 (=?UTF-8?B?R29qxY0=?=) APEL/10.8 Emacs/25.3
 (x86_64-suse-linux-gnu) MULE/6.0 (HANACHIRUSATO)
MIME-Version: 1.0 (generated by SEMI 1.14.6 - "Maruoka")
Content-Type: text/plain; charset=US-ASCII
Cc: alsa-devel@alsa-project.org, David Henningsson <coding@diwic.se>
X-BeenThere: alsa-devel@alsa-project.org
X-Mailman-Version: 2.1.15
Precedence: list
List-Id: "Alsa-devel mailing list for ALSA developers -
 http://www.alsa-project.org" <alsa-devel.alsa-project.org>
List-Unsubscribe: <https://mailman.alsa-project.org/mailman/options/alsa-devel>, 
 <mailto:alsa-devel-request@alsa-project.org?subject=unsubscribe>
List-Archive: <http://mailman.alsa-project.org/pipermail/alsa-devel/>
List-Post: <mailto:alsa-devel@alsa-project.org>
List-Help: <mailto:alsa-devel-request@alsa-project.org?subject=help>
List-Subscribe: <https://mailman.alsa-project.org/mailman/listinfo/alsa-devel>, 
 <mailto:alsa-devel-request@alsa-project.org?subject=subscribe>
Errors-To: alsa-devel-bounces@alsa-project.org
Sender: "Alsa-devel" <alsa-devel-bounces@alsa-project.org>

On Fri, 26 Mar 2021 05:46:15 +0100,
Takashi Sakamoto wrote:
> 
> Hi David,
> 
> On Wed, Mar 24, 2021 at 04:57:31PM +0100, David Henningsson wrote:
> > > However, the timing jitter of IRQ handler invocation is issued in this
> > > case, as well as PCM interface, even if the data rate of MIDI physical
> > > layer is quite low nowadays (31.25 Kbit / sec ~= 3906.25 byte / sec).
> > > As long as I experienced, in actual running Linux system, the invocation
> > > of IRQ handler has no guarantee for timing jitter, mainly due to CPU level
> > > IRQ mask (like spin_lock). Therefore the interval of each invocation is not
> > > so precise to decide event timestamp, at least for time slot comes from
> > > MIDI physical layer.
> > > 
> > > Nevertheless, I think your idea is enough interesting, with conditions to
> > > deliver information from driver (or driver developer) to applications
> > > (ALSA Sequencer or userspace applications). Even if we have some
> > > limitation and restriction to precise timestamp, it's worth to work for
> > > it. It seems to be required that improvements at interface level and
> > > documentation about how to use the frame timestamp you implemented.
> > 
> > Right, so first, I believe the most common way to transport midi these days
> > is through USB, where the 31.25 Kbit/sec limit does not apply: instead we
> > have a granularity of 1/8 ms but many messages can fit in each one. So that
> > limit is - for many if not most cases - gone.
> > 
> > Second; you're probably right in that there is still some jitter w r t when
> > the IRQ fires. That is regrettable, but the earlier we get that timestamp
> > the better, so a timestamp in IRQ context would at least be better than in a
> > workqueue that fires after the IRQ, or in userspace that possibly has
> > scheduling delays.
> > 
> > Btw, I checked the "struct urb" and there was no timestamp in there, so I
> > don't know how to get a better timestamp than in snd_rawmidi_receive. But
> > maybe other interfaces (PCI, Firewire etc) offers something better.
> 
> Hm. Regardless of type of hardware; e.g. OHCI/EHCI/xHCI, 1394 OHCI, or
> PCI-e extension card, for software to process sampled data, it's always
> issue that the jitter between triggering IRQ (hardware side) and invoking
> IRQ handler (processor side). As an actual example, let me share my
> experience in 1394 OHCI.
> 
> 
> 1394 OHCI controller is governed by 24.576 Mhz clock (or double depending
> on vendors). In IEEE 1394, ishcornous service is 8,000 times per second.
> 1394 OHCI specification allows software to schedule hardware IRQ per
> isochronous cycle.
> 
> Once ALSA firewire stack is programmed to schedule the hardwar IRQ evenry
> 16 isochronous cycle. The corresponding IRQ handler is expected to invoke
> every 2 milli second. As long as I tested in usual desktop environment[2],
> the jitter is between 150 micro second and 4.7 milli second. In the worst
> case, it's 6.0 milli seconds. The above is also the same wnen using
> 'threadirqs'.
> 
> When using 'isolcpus' and arranging 'smp_affinity' to reduce load from one
> of processor core to invoke the IRQ handler, the interval is 2 milli
> second with +- several nano seconds, therefore the 1394 OHCI controller
> can trigger hardware IRQ so precise. The jitter comes from processor side.
> I think many running contexts on the same processor core masks IRQ so
> often and the jitter is not deterministic.
> 
> Here, what I'd like to tell you is that we can not handle the system time
> as is as timestamp of received MIDI messages, as long as relying on IRQ
> context. We need some arrangements to construct better timestamp with some
> compensations. In this point, the 3rd version of patch is not enough[3],
> in my opinion.
> 
> My intension is not to discourage you, but it's better to have more care.
> As one of the care, I think we can use extension of
> 'struct snd_rawmidi_status' to deliver some useful information to ALSA
> rawmidi applications, or including other parameters to the frame structure.
> But I don't have ideas about what information should be delivered,
> sorry...

Well, the question is how much accuracy is wanted, and it's relatively
low for MIDI -- at least v1, which was defined many decades ago for a
slow serial line.

That said, the patch set was designed for providing the best-effort
timestamping in software, and that's supposed to be enough for normal
use cases.  If there is any device that is with the hardware
timestamping, in theory, we could provide the similar data stream in
the same format but maybe with a different timestamp type.

But actually I'd like to see some measurement how much we can improve
the timestamp accuracy by shifting the post office.  This may show
interesting numbers.

Also, one thing to be more considered is the support for MIDI v2 in
future.  I haven't seen any development so far (and no device
available around), so I cannot comment on this much more, but it'd be
worth to take a quick look before defining the solid API/ABI.


thanks,

Takashi

> 
> [1] https://github.com/systemd/systemd/pull/19124
> [2] I used stock image of Ubuntu 19.10 desktop for the trial.
> [3] https://mailman.alsa-project.org/pipermail/alsa-devel/2021-March/182842.html
> 
> Thanks
> 
> Takashi Sakamoto
> 
