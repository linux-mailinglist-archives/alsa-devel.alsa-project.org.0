Return-Path: <alsa-devel-bounces@alsa-project.org>
X-Original-To: lists+alsa-devel@lfdr.de
Delivered-To: lists+alsa-devel@lfdr.de
Received: from alsa0.perex.cz (alsa0.perex.cz [77.48.224.243])
	by mail.lfdr.de (Postfix) with ESMTPS id D857625F97
	for <lists+alsa-devel@lfdr.de>; Wed, 22 May 2019 10:32:49 +0200 (CEST)
Received: from alsa1.perex.cz (alsa1.perex.cz [207.180.221.201])
	(using TLSv1.2 with cipher AECDH-AES256-SHA (256/256 bits))
	(No client certificate requested)
	by alsa0.perex.cz (Postfix) with ESMTPS id 30AD5165E;
	Wed, 22 May 2019 10:31:59 +0200 (CEST)
DKIM-Filter: OpenDKIM Filter v2.11.0 alsa0.perex.cz 30AD5165E
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/simple; d=alsa-project.org;
	s=default; t=1558513969;
	bh=woUHnmL9fvRl2FezWi0rCKAeDEwX0yDifMGY/TC1nh0=;
	h=Date:From:To:Subject:List-Id:List-Unsubscribe:List-Archive:
	 List-Post:List-Help:List-Subscribe:From;
	b=s7AlrVwmBnGKyWlEUtdlrbHrMzNqHA4NxE7LkJBWQhq/MqTCR9BT0aeheacewXETQ
	 x3iWQzrUWykDnJO7DCHRHSbkEBp7kAumxajnUzQJUJ3184c3o74epvox0XPCb+FBqT
	 QdWbxej70PQNGVBZCVUE9TD/62xs67O17dyUgcTE=
Received: from alsa1.perex.cz (localhost.localdomain [127.0.0.1])
	by alsa1.perex.cz (Postfix) with ESMTP id A27BCF80C20;
	Wed, 22 May 2019 10:31:04 +0200 (CEST)
X-Original-To: alsa-devel@alsa-project.org
Delivered-To: alsa-devel@alsa-project.org
Received: by alsa1.perex.cz (Postfix, from userid 50401)
 id 18999F8962F; Wed, 22 May 2019 10:31:01 +0200 (CEST)
X-Spam-Checker-Version: SpamAssassin 3.4.0 (2014-02-07) on alsa1.perex.cz
X-Spam-Level: 
X-Spam-Status: No, score=0.3 required=5.0 tests=AC_FROM_MANY_DOTS,
 SPF_HELO_NONE,SPF_PASS autolearn=disabled version=3.4.0
Received: from relmlie5.idc.renesas.com (relmlor1.renesas.com
 [210.160.252.171])
 by alsa1.perex.cz (Postfix) with ESMTP id 1CE14F80C20
 for <alsa-devel@alsa-project.org>; Wed, 22 May 2019 10:30:54 +0200 (CEST)
DKIM-Filter: OpenDKIM Filter v2.11.0 alsa1.perex.cz 1CE14F80C20
Date: 22 May 2019 17:30:51 +0900
X-IronPort-AV: E=Sophos;i="5.60,498,1549897200"; d="scan'208";a="16655908"
Received: from unknown (HELO relmlir5.idc.renesas.com) ([10.200.68.151])
 by relmlie5.idc.renesas.com with ESMTP; 22 May 2019 17:30:51 +0900
Received: from morimoto-PC.renesas.com (unknown [10.166.18.140])
 by relmlir5.idc.renesas.com (Postfix) with ESMTP id 8C46540083CF
 for <alsa-devel@alsa-project.org>; Wed, 22 May 2019 17:30:51 +0900 (JST)
Message-ID: <87r28qhpki.wl-kuninori.morimoto.gx@renesas.com>
From: Kuninori Morimoto <kuninori.morimoto.gx@renesas.com>
To: Linux-ALSA <alsa-devel@alsa-project.org>
User-Agent: Wanderlust/2.15.9 Emacs/24.5 Mule/6.0
MIME-Version: 1.0 (generated by SEMI-EPG 1.14.7 - "Harue")
Subject: [alsa-devel] Question about soc_bind_aux_dev()
X-BeenThere: alsa-devel@alsa-project.org
X-Mailman-Version: 2.1.15
Precedence: list
List-Id: "Alsa-devel mailing list for ALSA developers -
 http://www.alsa-project.org" <alsa-devel.alsa-project.org>
List-Unsubscribe: <https://mailman.alsa-project.org/mailman/options/alsa-devel>, 
 <mailto:alsa-devel-request@alsa-project.org?subject=unsubscribe>
List-Archive: <http://mailman.alsa-project.org/pipermail/alsa-devel/>
List-Post: <mailto:alsa-devel@alsa-project.org>
List-Help: <mailto:alsa-devel-request@alsa-project.org?subject=help>
List-Subscribe: <https://mailman.alsa-project.org/mailman/listinfo/alsa-devel>, 
 <mailto:alsa-devel-request@alsa-project.org?subject=subscribe>
Content-Type: text/plain; charset="us-ascii"
Content-Transfer-Encoding: 7bit
Errors-To: alsa-devel-bounces@alsa-project.org
Sender: "Alsa-devel" <alsa-devel-bounces@alsa-project.org>


Hi ALSA ML

Do you know why snd_soc_aux_dev has both name and codec_name ??

	struct snd_soc_aux_dev {
=>		const char *name;		/* Codec name */
		...
=>		const char *codec_name;
		...
	};

For example, samsung's speyside.c has both name and codec_name

	static struct snd_soc_aux_dev speyside_aux_dev[] = {
		{
=>			.name = "wm9081",
=>			.codec_name = "wm9081.1-006c",
			...
		},
	};

In my research, there is no driver which is using .name only.
All drivers are having codec_of_node, or .codec_name

Now, in the soc_bind_aux_dev(), it checks .codec_name or codec_of_node first.
This means, there is zero chance to use .name ?

	static int soc_bind_aux_dev(struct snd_soc_card *card, int num)
	{
		...
=>		if (aux_dev->codec_of_node || aux_dev->codec_name) {
			...
			component = soc_find_component(...);
			...
=>		} else if (aux_dev->name) {
			...
			component = soc_find_component(...);
			...
		}
		...
	}

Why .name is needed ??

Thank you for your help !!
Best regards
---
Kuninori Morimoto
_______________________________________________
Alsa-devel mailing list
Alsa-devel@alsa-project.org
https://mailman.alsa-project.org/mailman/listinfo/alsa-devel
