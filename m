Return-Path: <alsa-devel-bounces@alsa-project.org>
X-Original-To: lists+alsa-devel@lfdr.de
Delivered-To: lists+alsa-devel@lfdr.de
Received: from alsa0.perex.cz (alsa0.perex.cz [77.48.224.243])
	by mail.lfdr.de (Postfix) with ESMTPS id 589522DC400
	for <lists+alsa-devel@lfdr.de>; Wed, 16 Dec 2020 17:24:09 +0100 (CET)
Received: from alsa1.perex.cz (alsa1.perex.cz [207.180.221.201])
	(using TLSv1.2 with cipher AECDH-AES256-SHA (256/256 bits))
	(No client certificate requested)
	by alsa0.perex.cz (Postfix) with ESMTPS id E8F791780;
	Wed, 16 Dec 2020 17:23:13 +0100 (CET)
DKIM-Filter: OpenDKIM Filter v2.11.0 alsa0.perex.cz E8F791780
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/simple; d=alsa-project.org;
	s=default; t=1608135844;
	bh=HmVkef4qCipIserziCWX2bXVQQZcQNyMzt1DUpME74U=;
	h=Date:From:To:Subject:In-Reply-To:References:Cc:List-Id:
	 List-Unsubscribe:List-Archive:List-Post:List-Help:List-Subscribe:
	 From;
	b=EO00g/oItdTORNCubR+N0MSwC1gaAgQrppUcJh1SkmnWZSzCrZSp9l2hScJj8q/Zn
	 6qlRwqOD6WRQrWiK8vjOT+VUMbPTSUVuGyUE6D5ZXbFMz5wsj4HIWHoUzbs2y07OYd
	 Fxdp97QVkxFZG85uKw+UKMstoIazBbBACHjG4Ddo=
Received: from alsa1.perex.cz (localhost.localdomain [127.0.0.1])
	by alsa1.perex.cz (Postfix) with ESMTP id EF73EF801F7;
	Wed, 16 Dec 2020 17:22:27 +0100 (CET)
X-Original-To: alsa-devel@alsa-project.org
Delivered-To: alsa-devel@alsa-project.org
Received: by alsa1.perex.cz (Postfix, from userid 50401)
 id 0D5D5F80171; Wed, 16 Dec 2020 17:22:25 +0100 (CET)
X-Spam-Checker-Version: SpamAssassin 3.4.0 (2014-02-07) on alsa1.perex.cz
X-Spam-Level: *
X-Spam-Status: No, score=1.0 required=5.0 tests=PRX_BODY_30,SPF_HELO_NONE,
 SPF_NONE,URIBL_BLOCKED autolearn=disabled version=3.4.0
Received: from mx2.suse.de (mx2.suse.de [195.135.220.15])
 (using TLSv1.2 with cipher AECDH-AES256-SHA (256/256 bits))
 (No client certificate requested)
 by alsa1.perex.cz (Postfix) with ESMTPS id 7D6D6F8011B
 for <alsa-devel@alsa-project.org>; Wed, 16 Dec 2020 17:22:17 +0100 (CET)
DKIM-Filter: OpenDKIM Filter v2.11.0 alsa1.perex.cz 7D6D6F8011B
X-Virus-Scanned: by amavisd-new at test-mx.suse.de
Received: from relay2.suse.de (unknown [195.135.221.27])
 by mx2.suse.de (Postfix) with ESMTP id 7F475AFAC;
 Wed, 16 Dec 2020 16:22:17 +0000 (UTC)
Date: Wed, 16 Dec 2020 17:22:17 +0100
Message-ID: <s5hsg85n2km.wl-tiwai@suse.de>
From: Takashi Iwai <tiwai@suse.de>
To: Kai-Heng Feng <kai.heng.feng@canonical.com>
Subject: Re: [PATCH v2] ALSA: hda: Continue to probe when codec probe fails
In-Reply-To: <CAAd53p6Ef2zFX_t3y1c6O7BmHnxYGtGSfgzXAMQSom1ainWXzg@mail.gmail.com>
References: <20201214060621.1102931-1-kai.heng.feng@canonical.com>
 <20201216124726.2842197-1-kai.heng.feng@canonical.com>
 <s5h5z51oj12.wl-tiwai@suse.de>
 <CAAd53p6kORC1GsW5zt+=0=J5ki43iriO-OqtFvf5W67LWhyyhA@mail.gmail.com>
 <s5hzh2dn3oa.wl-tiwai@suse.de>
 <CAAd53p6Ef2zFX_t3y1c6O7BmHnxYGtGSfgzXAMQSom1ainWXzg@mail.gmail.com>
User-Agent: Wanderlust/2.15.9 (Almost Unreal) SEMI/1.14.6 (Maruoka)
 FLIM/1.14.9 (=?UTF-8?B?R29qxY0=?=) APEL/10.8 Emacs/25.3
 (x86_64-suse-linux-gnu) MULE/6.0 (HANACHIRUSATO)
MIME-Version: 1.0 (generated by SEMI 1.14.6 - "Maruoka")
Content-Type: text/plain; charset=US-ASCII
Cc: "moderated list:SOUND" <alsa-devel@alsa-project.org>,
 Kai Vehmanen <kai.vehmanen@linux.intel.com>,
 open list <linux-kernel@vger.kernel.org>,
 Pierre-Louis Bossart <pierre-louis.bossart@linux.intel.com>, tiwai@suse.com,
 Alex Deucher <alexander.deucher@amd.com>, Mike Rapoport <rppt@kernel.org>
X-BeenThere: alsa-devel@alsa-project.org
X-Mailman-Version: 2.1.15
Precedence: list
List-Id: "Alsa-devel mailing list for ALSA developers -
 http://www.alsa-project.org" <alsa-devel.alsa-project.org>
List-Unsubscribe: <https://mailman.alsa-project.org/mailman/options/alsa-devel>, 
 <mailto:alsa-devel-request@alsa-project.org?subject=unsubscribe>
List-Archive: <http://mailman.alsa-project.org/pipermail/alsa-devel/>
List-Post: <mailto:alsa-devel@alsa-project.org>
List-Help: <mailto:alsa-devel-request@alsa-project.org?subject=help>
List-Subscribe: <https://mailman.alsa-project.org/mailman/listinfo/alsa-devel>, 
 <mailto:alsa-devel-request@alsa-project.org?subject=subscribe>
Errors-To: alsa-devel-bounces@alsa-project.org
Sender: "Alsa-devel" <alsa-devel-bounces@alsa-project.org>

On Wed, 16 Dec 2020 17:07:45 +0100,
Kai-Heng Feng wrote:
> 
> On Wed, Dec 16, 2020 at 11:58 PM Takashi Iwai <tiwai@suse.de> wrote:
> >
> > On Wed, 16 Dec 2020 16:50:20 +0100,
> > Kai-Heng Feng wrote:
> > >
> > > On Wed, Dec 16, 2020 at 11:41 PM Takashi Iwai <tiwai@suse.de> wrote:
> > > >
> > > > On Wed, 16 Dec 2020 13:47:24 +0100,
> > > > Kai-Heng Feng wrote:
> > > > >
> > > > > Similar to commit 9479e75fca37 ("ALSA: hda: Keep the controller
> > > > > initialization even if no codecs found"), when codec probe fails, it
> > > > > doesn't enable runtime suspend, and can prevent graphics card from
> > > > > getting powered down:
> > > > > [    4.280991] snd_hda_intel 0000:01:00.1: no codecs initialized
> > > > >
> > > > > $ cat /sys/bus/pci/devices/0000:01:00.1/power/runtime_status
> > > > > active
> > > > >
> > > > > So mark there's no codec and continue probing to let runtime PM to work.
> > > > >
> > > > > BugLink: https://bugs.launchpad.net/bugs/1907212
> > > > > Signed-off-by: Kai-Heng Feng <kai.heng.feng@canonical.com>
> > > >
> > > > Hm, but if the probe fails, doesn't it mean something really wrong?
> > > > IOW, how does this situation happen?
> > >
> > > The HDA controller is forcely created by quirk_nvidia_hda(). So
> > > probably there's really not an HDA controller.
> >
> > I still don't understand how non-zero codec_mask is passed.
> > The non-zero codec_mask means that BIOS or whatever believes that
> > HD-audio codecs are present and let HD-audio controller reporting the
> > presence.  What error did you get at probing?
> 
> [    4.280991] snd_hda_intel 0000:01:00.1: no codecs initialized
> Full dmesg here:
> https://launchpadlibrarian.net/510351476/dmesg.log

The actual problems are shown before that line.

[    4.178848] pci 0000:01:00.1: can't change power state from D3cold to D0 (config space inaccessible)
[    4.179502] snd_hda_intel 0000:01:00.1: can't change power state from D3cold to D0 (config space inaccessible)
[    4.179511] snd_hda_intel 0000:01:00.1: can't change power state from D3hot to D0 (config space inaccessible)
....
[    4.280571] hdaudio hdaudioC1D0: no AFG or MFG node found
[    4.280633] hdaudio hdaudioC1D1: no AFG or MFG node found
[    4.280685] hdaudio hdaudioC1D2: no AFG or MFG node found
[    4.280736] hdaudio hdaudioC1D3: no AFG or MFG node found
[    4.280788] hdaudio hdaudioC1D4: no AFG or MFG node found
[    4.280839] hdaudio hdaudioC1D5: no AFG or MFG node found
[    4.280892] hdaudio hdaudioC1D6: no AFG or MFG node found
[    4.280943] hdaudio hdaudioC1D7: no AFG or MFG node found

Could you check the codec_mask value read in
sound/hda/hdac_controller.c?  I guess it reads 0xff.

If that's the case, it can be corrected by the patch below.
But, we should check the cause of the first error (inaccessible config
space) in anyway; this must be the primary reason of the whole chain
of errors.

> > > > The usual no-codec state is for the devices that have a bogus HD-audio
> > > > bus remaining while codecs aren't hooked or disabled by BIOS.  For
> > > > that, it makes to leave the controller driver and let it idle.  But if
> > > > you get really an error, it's something to fix there, not to just
> > > > ignore in general.
> > >
> > > The best approach I can think of is to make current two steps probe
> > > into one. So when probe fails, the driver won't bind to the device.
> > > What's the reason behind the two steps approach?
> >
> > It's a sort of must, as the module loading is involved with binding
> > with the codecs, as well as (optionally) request_firmware()
> > invocation.
> 
> Ok. I also tried to use device_release_driver(), but azx_remove()
> calls "cancel_work_sync(&hda->probe_work)" so there will be a
> deadlock.

You can't do that.


Takashi

---
--- a/sound/hda/hdac_controller.c
+++ b/sound/hda/hdac_controller.c
@@ -449,6 +449,10 @@ int snd_hdac_bus_reset_link(struct hdac_bus *bus, bool full_reset)
 	if (!bus->codec_mask) {
 		bus->codec_mask = snd_hdac_chip_readw(bus, STATESTS);
 		dev_dbg(bus->dev, "codec_mask = 0x%lx\n", bus->codec_mask);
+		if (bus->codec_mask == 0xff) {
+			dev_err(bus->dev, "failed to read STATESTS register\n");
+			bus->codec_mask = 0;
+		}
 	}
 
 	return 0;
