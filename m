Return-Path: <alsa-devel-bounces@alsa-project.org>
X-Original-To: lists+alsa-devel@lfdr.de
Delivered-To: lists+alsa-devel@lfdr.de
Received: from alsa0.perex.cz (alsa0.perex.cz [77.48.224.243])
	by mail.lfdr.de (Postfix) with ESMTPS id 144403C73C6
	for <lists+alsa-devel@lfdr.de>; Tue, 13 Jul 2021 18:07:10 +0200 (CEST)
Received: from alsa1.perex.cz (alsa1.perex.cz [207.180.221.201])
	(using TLSv1.2 with cipher AECDH-AES256-SHA (256/256 bits))
	(No client certificate requested)
	by alsa0.perex.cz (Postfix) with ESMTPS id 6065D167E;
	Tue, 13 Jul 2021 18:06:19 +0200 (CEST)
DKIM-Filter: OpenDKIM Filter v2.11.0 alsa0.perex.cz 6065D167E
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/simple; d=alsa-project.org;
	s=default; t=1626192429;
	bh=VIMDxRbyJUTomK1xlt+pje1rWJUGCqjHMi0SMN2UmOM=;
	h=Date:From:To:Subject:In-Reply-To:References:Cc:List-Id:
	 List-Unsubscribe:List-Archive:List-Post:List-Help:List-Subscribe:
	 From;
	b=VayqDL22xK4oKM1PLhsN7SDo+evMYAFnB0ewKtZVJbQiNUl9kYN7nf2RwVwOzDtop
	 ImHma4wBPRpLSG/07kN+ighFMfE69BwJpo5elHRe9WVbgOq1VRFjM5voThYfpXZoqm
	 3RLS0eSP2pBymoOIxQNgGDw6SpRvjjDVXK6PJnM0=
Received: from alsa1.perex.cz (localhost.localdomain [127.0.0.1])
	by alsa1.perex.cz (Postfix) with ESMTP id CAB76F80229;
	Tue, 13 Jul 2021 18:05:42 +0200 (CEST)
X-Original-To: alsa-devel@alsa-project.org
Delivered-To: alsa-devel@alsa-project.org
Received: by alsa1.perex.cz (Postfix, from userid 50401)
 id AE3BCF80217; Tue, 13 Jul 2021 18:05:37 +0200 (CEST)
X-Spam-Checker-Version: SpamAssassin 3.4.0 (2014-02-07) on alsa1.perex.cz
X-Spam-Level: 
X-Spam-Status: No, score=-0.1 required=5.0 tests=DKIM_SIGNED,DKIM_VALID,
 DKIM_VALID_AU,SPF_HELO_NONE,SPF_NONE autolearn=disabled version=3.4.0
Received: from smtp-out1.suse.de (smtp-out1.suse.de [195.135.220.28])
 (using TLSv1.2 with cipher ECDHE-RSA-AES128-GCM-SHA256 (128/128 bits))
 (No client certificate requested)
 by alsa1.perex.cz (Postfix) with ESMTPS id 41148F800D3
 for <alsa-devel@alsa-project.org>; Tue, 13 Jul 2021 18:05:34 +0200 (CEST)
DKIM-Filter: OpenDKIM Filter v2.11.0 alsa1.perex.cz 41148F800D3
Authentication-Results: alsa1.perex.cz;
 dkim=pass (1024-bit key) header.d=suse.de header.i=@suse.de
 header.b="hUDSz/RP"; 
 dkim=permerror (0-bit key) header.d=suse.de header.i=@suse.de
 header.b="J9Oo0FTC"
Received: from relay2.suse.de (relay2.suse.de [149.44.160.134])
 by smtp-out1.suse.de (Postfix) with ESMTP id 3B96D229EF;
 Tue, 13 Jul 2021 16:05:34 +0000 (UTC)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=suse.de; s=susede2_rsa;
 t=1626192334; h=from:from:reply-to:date:date:message-id:message-id:to:to:cc:cc:
 mime-version:mime-version:content-type:content-type:
 in-reply-to:in-reply-to:references:references;
 bh=2vZp3j5m9BKU/OxS77swAEhcQf+I83AguMA+NWojWoI=;
 b=hUDSz/RPaJfsMVfX4Oyr+1NGnsFHiEECNQXHuFZYepwgDwajIy3b1g1rA/A88uA8Gimlky
 Hr0wb4iluDxMvH2DtjgTRrqVfj/emMyd5F9FLoY9IzOmwcQ9yRsXkw5kaCh7ZOEj0ZzMXm
 02iJLZTMz/29qWXPbFHfSENUN0fg5H8=
DKIM-Signature: v=1; a=ed25519-sha256; c=relaxed/relaxed; d=suse.de;
 s=susede2_ed25519; t=1626192334;
 h=from:from:reply-to:date:date:message-id:message-id:to:to:cc:cc:
 mime-version:mime-version:content-type:content-type:
 in-reply-to:in-reply-to:references:references;
 bh=2vZp3j5m9BKU/OxS77swAEhcQf+I83AguMA+NWojWoI=;
 b=J9Oo0FTC7xU2SNqcAj36fTAKCUqtmS3bPrZpDrIEj/bAGMkGXBvQ/nMfrnW7+c5H4FLKDo
 qWDNXfwJVEkyGIBQ==
Received: from alsa1.suse.de (alsa1.suse.de [10.160.4.42])
 by relay2.suse.de (Postfix) with ESMTP id 2908BA3B81;
 Tue, 13 Jul 2021 16:05:34 +0000 (UTC)
Date: Tue, 13 Jul 2021 18:05:34 +0200
Message-ID: <s5hfswi19o1.wl-tiwai@suse.de>
From: Takashi Iwai <tiwai@suse.de>
To: Amadeusz SX2awiX4ski
 <amadeuszx.slawinski@linux.intel.com>
Subject: Re: [PATCH 02/51] ALSA: core: Add managed card creation
In-Reply-To: <9d6ce40b-101e-5b16-cd6c-8734aea4c4fd@linux.intel.com>
References: <20210713142857.19654-1-tiwai@suse.de>
 <20210713142857.19654-3-tiwai@suse.de>
 <9d6ce40b-101e-5b16-cd6c-8734aea4c4fd@linux.intel.com>
User-Agent: Wanderlust/2.15.9 (Almost Unreal) SEMI/1.14.6 (Maruoka)
 FLIM/1.14.9 (=?UTF-8?B?R29qxY0=?=) APEL/10.8 Emacs/25.3
 (x86_64-suse-linux-gnu) MULE/6.0 (HANACHIRUSATO)
MIME-Version: 1.0 (generated by SEMI 1.14.6 - "Maruoka")
Content-Type: text/plain; charset=US-ASCII
Cc: alsa-devel@alsa-project.org
X-BeenThere: alsa-devel@alsa-project.org
X-Mailman-Version: 2.1.15
Precedence: list
List-Id: "Alsa-devel mailing list for ALSA developers -
 http://www.alsa-project.org" <alsa-devel.alsa-project.org>
List-Unsubscribe: <https://mailman.alsa-project.org/mailman/options/alsa-devel>, 
 <mailto:alsa-devel-request@alsa-project.org?subject=unsubscribe>
List-Archive: <http://mailman.alsa-project.org/pipermail/alsa-devel/>
List-Post: <mailto:alsa-devel@alsa-project.org>
List-Help: <mailto:alsa-devel-request@alsa-project.org?subject=help>
List-Subscribe: <https://mailman.alsa-project.org/mailman/listinfo/alsa-devel>, 
 <mailto:alsa-devel-request@alsa-project.org?subject=subscribe>
Errors-To: alsa-devel-bounces@alsa-project.org
Sender: "Alsa-devel" <alsa-devel-bounces@alsa-project.org>

On Tue, 13 Jul 2021 17:23:02 +0200,
Amadeusz SX2awiX4ski wrote:
> 
> On 7/13/2021 4:28 PM, Takashi Iwai wrote:
> 
> ...
> 
> > +
> > +/**
> > + * snd_devm_card_new - managed snd_card object creation
> > + * @parent: the parent device object
> > + * @idx: card index (address) [0 ... (SNDRV_CARDS-1)]
> > + * @xid: card identification (ASCII string)
> > + * @module: top level module for locking
> > + * @extra_size: allocate this extra size after the main soundcard structure
> > + * @card_ret: the pointer to store the created card instance
> > + *
> > + * This function works like snd_card_new() but manages the allocated resource
> > + * via devres, i.e. you don't need to free explicitly.
> > + *
> > + * When a snd_card object is created with this function and registered via
> > + * snd_card_register(), the very first devres action to call snd_card_free()
> > + * is added automatically.  In that way, the resource disconnection is assured
> > + * at first, then released in the expected order.
> > + */
> > +int snd_devm_card_new(struct device *parent, int idx, const char *xid,
> > +		      struct module *module, int extra_size,
> > +		      struct snd_card **card_ret)
> > +{
> > +	struct snd_card *card;
> > +	int err;
> > +
> > +	*card_ret = NULL;
> > +	if (extra_size < 0)
> > +		extra_size = 0;
> Maybe just make extra_size unsigned or even better size_t?

OK, that would fit for a new function, indeed.
Will modify in v2.


> >     /**
> >    * snd_card_ref - Get the card object from the index
> > @@ -481,6 +547,7 @@ EXPORT_SYMBOL_GPL(snd_card_disconnect_sync);
> >     static int snd_card_do_free(struct snd_card *card)
> >   {
> > +	card->releasing = true;
> >   #if IS_ENABLED(CONFIG_SND_MIXER_OSS)
> >   	if (snd_mixer_oss_notify_callback)
> >   		snd_mixer_oss_notify_callback(card, SND_MIXER_OSS_NOTIFY_FREE);
> > @@ -498,7 +565,8 @@ static int snd_card_do_free(struct snd_card *card)
> >   #endif
> >   	if (card->release_completion)
> >   		complete(card->release_completion);
> > -	kfree(card);
> > +	if (!card->managed)
> > +		kfree(card);
> >   	return 0;
> >   }
> >   @@ -539,6 +607,9 @@ int snd_card_free(struct snd_card *card)
> >   	DECLARE_COMPLETION_ONSTACK(released);
> >   	int ret;
> >   +	if (card->releasing)
> > +		return 0;
> > +
> 
> "card->releasing" use feels bit racy to me... something like below
> would break it?
> 
> thread1                   thread2
> snd_card_free()
> if(card->releasing) == false
> thread1 goes sleep
>                           snd_card_do_free()
>                           card->releasing = true
>                           run until the end
> thread1 resume
> continues with trying to release

It's a destructor and can't be called in parallel.


> >   	card->release_completion = &released;
> >   	ret = snd_card_free_when_closed(card);
> >   	if (ret)
> > @@ -745,6 +816,11 @@ int snd_card_add_dev_attr(struct snd_card *card,
> >   }
> >   EXPORT_SYMBOL_GPL(snd_card_add_dev_attr);
> >   +static void trigger_card_free(void *data)
> > +{
> > +	snd_card_free(data);
> > +}
> > +
> >   /**
> >    *  snd_card_register - register the soundcard
> >    *  @card: soundcard structure
> > @@ -768,6 +844,15 @@ int snd_card_register(struct snd_card *card)
> >   		if (err < 0)
> >   			return err;
> >   		card->registered = true;
> > +	} else {
> > +		if (card->managed)
> > +			devm_remove_action(card->dev, trigger_card_free, card);
> 
> Not sure I understand, we are in _register function, so why do we
> remove action?

snd_card_register() can be called multiple times for re-registering
the newly added components (e.g. usb-audio driver does it).  In that
case, we have to move this trigger_card_free action at the head again.


thanks,

Takashi
