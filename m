Return-Path: <alsa-devel-bounces@alsa-project.org>
X-Original-To: lists+alsa-devel@lfdr.de
Delivered-To: lists+alsa-devel@lfdr.de
Received: from alsa0.perex.cz (alsa0.perex.cz [77.48.224.243])
	by mail.lfdr.de (Postfix) with ESMTPS id BEEDA143763
	for <lists+alsa-devel@lfdr.de>; Tue, 21 Jan 2020 08:00:17 +0100 (CET)
Received: from alsa1.perex.cz (alsa1.perex.cz [207.180.221.201])
	(using TLSv1.2 with cipher AECDH-AES256-SHA (256/256 bits))
	(No client certificate requested)
	by alsa0.perex.cz (Postfix) with ESMTPS id 286421687;
	Tue, 21 Jan 2020 07:59:27 +0100 (CET)
DKIM-Filter: OpenDKIM Filter v2.11.0 alsa0.perex.cz 286421687
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/simple; d=alsa-project.org;
	s=default; t=1579590017;
	bh=PbpCUse1zxFGEBIhdKygcTuIsuxJY37ZboTZ5LVB5s4=;
	h=Date:From:To:In-Reply-To:References:Cc:Subject:List-Id:
	 List-Unsubscribe:List-Archive:List-Post:List-Help:List-Subscribe:
	 From;
	b=i2ueru2AW6C7VP4BIDztMB3g2zYyTiVoOsgeq3UfryOcWVcaWMbpYAGoxvKIYba+B
	 cSPetfJMtC2RLyP+AT2r1oJG2Psgv6V/O8daukALRM2JE4AFdxy/uKDIupKW0OG/o7
	 MMBdtRz4pD9ddr4dK0CW2pSaeUCV62rK2igpS9F4=
Received: from alsa1.perex.cz (localhost.localdomain [127.0.0.1])
	by alsa1.perex.cz (Postfix) with ESMTP id C41BDF8015B;
	Tue, 21 Jan 2020 07:58:33 +0100 (CET)
X-Original-To: alsa-devel@alsa-project.org
Delivered-To: alsa-devel@alsa-project.org
Received: by alsa1.perex.cz (Postfix, from userid 50401)
 id 1D3BEF801D9; Tue, 21 Jan 2020 07:58:31 +0100 (CET)
X-Spam-Checker-Version: SpamAssassin 3.4.0 (2014-02-07) on alsa1.perex.cz
X-Spam-Level: 
X-Spam-Status: No, score=0.0 required=5.0 tests=RCVD_IN_MSPIKE_H3,
 RCVD_IN_MSPIKE_WL,SPF_HELO_NONE,SPF_PASS,SURBL_BLOCKED,URIBL_BLOCKED
 autolearn=disabled version=3.4.0
Received: from mx2.suse.de (mx2.suse.de [195.135.220.15])
 (using TLSv1.2 with cipher AECDH-AES256-SHA (256/256 bits))
 (No client certificate requested)
 by alsa1.perex.cz (Postfix) with ESMTPS id 80753F800E7
 for <alsa-devel@alsa-project.org>; Tue, 21 Jan 2020 07:58:26 +0100 (CET)
DKIM-Filter: OpenDKIM Filter v2.11.0 alsa1.perex.cz 80753F800E7
X-Virus-Scanned: by amavisd-new at test-mx.suse.de
Received: from relay2.suse.de (unknown [195.135.220.254])
 by mx2.suse.de (Postfix) with ESMTP id 0A6D7B17A;
 Tue, 21 Jan 2020 06:58:26 +0000 (UTC)
Date: Tue, 21 Jan 2020 07:58:24 +0100
Message-ID: <s5ha76h2t4f.wl-tiwai@suse.de>
From: Takashi Iwai <tiwai@suse.de>
To: Kuninori Morimoto <kuninori.morimoto.gx@renesas.com>
In-Reply-To: <87k15l7ewd.wl-kuninori.morimoto.gx@renesas.com>
References: <87k15l7ewd.wl-kuninori.morimoto.gx@renesas.com>
User-Agent: Wanderlust/2.15.9 (Almost Unreal) SEMI/1.14.6 (Maruoka)
 FLIM/1.14.9 (=?UTF-8?B?R29qxY0=?=) APEL/10.8 Emacs/25.3
 (x86_64-suse-linux-gnu) MULE/6.0 (HANACHIRUSATO)
MIME-Version: 1.0 (generated by SEMI 1.14.6 - "Maruoka")
Cc: Linux-ALSA <alsa-devel@alsa-project.org>
Subject: Re: [alsa-devel] Question about snd_pcm_limit_hw_rates() call timing
X-BeenThere: alsa-devel@alsa-project.org
X-Mailman-Version: 2.1.15
Precedence: list
List-Id: "Alsa-devel mailing list for ALSA developers -
 http://www.alsa-project.org" <alsa-devel.alsa-project.org>
List-Unsubscribe: <https://mailman.alsa-project.org/mailman/options/alsa-devel>, 
 <mailto:alsa-devel-request@alsa-project.org?subject=unsubscribe>
List-Archive: <http://mailman.alsa-project.org/pipermail/alsa-devel/>
List-Post: <mailto:alsa-devel@alsa-project.org>
List-Help: <mailto:alsa-devel-request@alsa-project.org?subject=help>
List-Subscribe: <https://mailman.alsa-project.org/mailman/listinfo/alsa-devel>, 
 <mailto:alsa-devel-request@alsa-project.org?subject=subscribe>
Content-Type: text/plain; charset="us-ascii"
Content-Transfer-Encoding: 7bit
Errors-To: alsa-devel-bounces@alsa-project.org
Sender: "Alsa-devel" <alsa-devel-bounces@alsa-project.org>

On Tue, 21 Jan 2020 02:54:26 +0100,
Kuninori Morimoto wrote:
> 
> 
> Hi ALSA ML
> 
> soc-pcm has snd_pcm_limit_hw_rates() which determine rate_min/rate_max fields.
> It updates runtime->hw.rate_min/max (A) based on hw->rates (B).
> 
> 	int snd_pcm_limit_hw_rates(struct snd_pcm_runtime *runtime)
> 	{
> 		int i;
> 		for (i = 0; i < (int)snd_pcm_known_rates.count; i++) {
> (B)			if (runtime->hw.rates & (1 << i)) {
> (A)				runtime->hw.rate_min = snd_pcm_known_rates.list[i];
> 				break;
> 			}
> 		}
> 		for (i = (int)snd_pcm_known_rates.count - 1; i >= 0; i--) {
> (B)			if (runtime->hw.rates & (1 << i)) {
> (A)				runtime->hw.rate_max = snd_pcm_known_rates.list[i];
> 				break;
> 			}
> 		}
> 		return 0;
> 	}
> 
> I guess the calling timing is
> 
> 	1) set hw->rates
> 	2) call snd_pcm_limit_hw_rates()
> 	3) update hw->rate_min/max
> 
> soc_pcm_init_runtime_hw() is calling it as this order
> 
> 	static void soc_pcm_init_runtime_hw(xxx)
> 	{
> 		...
> 1)		hw->rates = snd_pcm_rate_mask_intersect(rates, cpu_stream->rates);
> 
> 2)		snd_pcm_limit_hw_rates(runtime);
> 
> 3)		hw->rate_min = max(hw->rate_min, cpu_stream->rate_min);
> 		hw->rate_min = max(hw->rate_min, rate_min);
> 		hw->rate_max = min_not_zero(hw->rate_max, cpu_stream->rate_max);
> 		hw->rate_max = min_not_zero(hw->rate_max, rate_max);
> 	}
> 
> But, dpcm_fe_dai_startup() are different.
> 
> 	static int dpcm_fe_dai_startup(xxx)
> 	{
> 		...
> 		/*
> 		 * dpcm_set_fe_runtime() updates runtime->hw.xxx
> 		 */
> 1) 3)		dpcm_set_fe_runtime(fe_substream);
> 2)		snd_pcm_limit_hw_rates(runtime);
> 		...
> 	}
> 
> I guess we need fixup dpcm_fe_dai_startup() ?

A good catch.

Actually the question is whether we need snd_pcm_limit_hw_rates() call
or not.  The current code in soc_pcm_init_runtime_hw() assumes that
each cpu and codec dais already set the proper rate_min and rate_max,
and narrow the range accordingly.  So basically the call there is
superfluous.  OTOH, in dpcm_fe_dai_startup(), the call overrides the
existing rate_min/max setup as you mentioned, so it may be wrong.

Or, better to ask -- is there any case that snd_pcm_limit_hw_rates()
is mandatory in ASoC?  The snd_pcm_limit_hw_rates() is for setting up
rates_min and rates_max from rates bits.  It's a function to be called
only when we know that rates bits contain the full information and
rates_min and rates_max are bogus.  That is, its overriding behavior
is designed.

OTOH, if the driver sets up already valid rates_min and rates_max
values, there is no need to call this function at all.


thanks,

Takashi
_______________________________________________
Alsa-devel mailing list
Alsa-devel@alsa-project.org
https://mailman.alsa-project.org/mailman/listinfo/alsa-devel
