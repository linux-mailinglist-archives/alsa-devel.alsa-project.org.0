Return-Path: <alsa-devel-bounces@alsa-project.org>
X-Original-To: lists+alsa-devel@lfdr.de
Delivered-To: lists+alsa-devel@lfdr.de
Received: from alsa0.perex.cz (alsa0.perex.cz [77.48.224.243])
	by mail.lfdr.de (Postfix) with ESMTPS id 7E81C27E511
	for <lists+alsa-devel@lfdr.de>; Wed, 30 Sep 2020 11:23:18 +0200 (CEST)
Received: from alsa1.perex.cz (alsa1.perex.cz [207.180.221.201])
	(using TLSv1.2 with cipher AECDH-AES256-SHA (256/256 bits))
	(No client certificate requested)
	by alsa0.perex.cz (Postfix) with ESMTPS id B588A180C;
	Wed, 30 Sep 2020 11:22:27 +0200 (CEST)
DKIM-Filter: OpenDKIM Filter v2.11.0 alsa0.perex.cz B588A180C
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/simple; d=alsa-project.org;
	s=default; t=1601457797;
	bh=v973pmYbEw7t/FDVYNlvn7DbcdhU4qRJjtOMa6Ip+MI=;
	h=Date:From:To:Subject:In-Reply-To:References:Cc:List-Id:
	 List-Unsubscribe:List-Archive:List-Post:List-Help:List-Subscribe:
	 From;
	b=qMNp75csPg3uK40vcRvI2JTqdlNFER+zUThYKr7jTxqbEJxzKe5oYUTagfLHI9Bri
	 AzmMm3+MFqfZJd/1dYPnM5b7eUQM2KLulxWKuFZE5pPXPLG0K0aJ/vJJ9zt7W5AT0Y
	 gmr+FHOF/+J/aJ720UuaArGDKK8fgmzt9SYqjcPU=
Received: from alsa1.perex.cz (localhost.localdomain [127.0.0.1])
	by alsa1.perex.cz (Postfix) with ESMTP id DBEB7F801F9;
	Wed, 30 Sep 2020 11:21:36 +0200 (CEST)
X-Original-To: alsa-devel@alsa-project.org
Delivered-To: alsa-devel@alsa-project.org
Received: by alsa1.perex.cz (Postfix, from userid 50401)
 id 1A4CDF801ED; Wed, 30 Sep 2020 11:21:34 +0200 (CEST)
X-Spam-Checker-Version: SpamAssassin 3.4.0 (2014-02-07) on alsa1.perex.cz
X-Spam-Level: *
X-Spam-Status: No, score=1.0 required=5.0 tests=PRX_BODY_30, RCVD_IN_MSPIKE_H3,
 RCVD_IN_MSPIKE_WL,SPF_HELO_NONE,SPF_PASS autolearn=disabled version=3.4.0
Received: from mx2.suse.de (mx2.suse.de [195.135.220.15])
 (using TLSv1.2 with cipher AECDH-AES256-SHA (256/256 bits))
 (No client certificate requested)
 by alsa1.perex.cz (Postfix) with ESMTPS id 19459F800AB
 for <alsa-devel@alsa-project.org>; Wed, 30 Sep 2020 11:21:27 +0200 (CEST)
DKIM-Filter: OpenDKIM Filter v2.11.0 alsa1.perex.cz 19459F800AB
X-Virus-Scanned: by amavisd-new at test-mx.suse.de
Received: from relay2.suse.de (unknown [195.135.221.27])
 by mx2.suse.de (Postfix) with ESMTP id 1CBF8B018;
 Wed, 30 Sep 2020 09:21:25 +0000 (UTC)
Date: Wed, 30 Sep 2020 11:21:24 +0200
Message-ID: <s5h8scriprf.wl-tiwai@suse.de>
From: Takashi Iwai <tiwai@suse.de>
To: Jaroslav Kysela <perex@perex.cz>
Subject: Re: [PATCH] ALSA: hda - Don't register a cb func if it is registered
 already
In-Reply-To: <bd05e1be-96e8-14bf-011c-b43d165abf17@perex.cz>
References: <20200930055146.5665-1-hui.wang@canonical.com>
 <bd05e1be-96e8-14bf-011c-b43d165abf17@perex.cz>
User-Agent: Wanderlust/2.15.9 (Almost Unreal) SEMI/1.14.6 (Maruoka)
 FLIM/1.14.9 (=?UTF-8?B?R29qxY0=?=) APEL/10.8 Emacs/25.3
 (x86_64-suse-linux-gnu) MULE/6.0 (HANACHIRUSATO)
MIME-Version: 1.0 (generated by SEMI 1.14.6 - "Maruoka")
Content-Type: text/plain; charset=US-ASCII
Cc: Hui Wang <hui.wang@canonical.com>, alsa-devel@alsa-project.org
X-BeenThere: alsa-devel@alsa-project.org
X-Mailman-Version: 2.1.15
Precedence: list
List-Id: "Alsa-devel mailing list for ALSA developers -
 http://www.alsa-project.org" <alsa-devel.alsa-project.org>
List-Unsubscribe: <https://mailman.alsa-project.org/mailman/options/alsa-devel>, 
 <mailto:alsa-devel-request@alsa-project.org?subject=unsubscribe>
List-Archive: <http://mailman.alsa-project.org/pipermail/alsa-devel/>
List-Post: <mailto:alsa-devel@alsa-project.org>
List-Help: <mailto:alsa-devel-request@alsa-project.org?subject=help>
List-Subscribe: <https://mailman.alsa-project.org/mailman/listinfo/alsa-devel>, 
 <mailto:alsa-devel-request@alsa-project.org?subject=subscribe>
Errors-To: alsa-devel-bounces@alsa-project.org
Sender: "Alsa-devel" <alsa-devel-bounces@alsa-project.org>

On Wed, 30 Sep 2020 09:19:50 +0200,
Jaroslav Kysela wrote:
> 
> Dne 30. 09. 20 v 7:51 Hui Wang napsal(a):
> > If the caller of enable_callback_mst() passes a cb func, the callee
> > function will malloc memory and link this cb func to the list
> > unconditionally. This will introduce problem if caller is in the
> > hda_codec_ops.init() since the init() will be repeatedly called in the
> > codec rt_resume().
> > 
> > So far, the patch_hdmi.c and patch_ca0132.c call enable_callback_mst()
> > in the hda_codec_ops.init().
> 
> Won't be better to handle this double invocation at the callback call time? I
> believe that some refcounting and pointing to one allocated callback structure
> for all instances is better.

IMO, Hui's fix is correct in this case; otherwise it'll result in
endless number of allocations at each time the runtime resume is
performed.  So I'm going to take it as is.

For ca0132, though, the simplest fix would be to just move
ca0132_init_unsol() call into patch_ca0132().  But the additional fix
in hda_jack side would be good in anyway.


thanks,

Takashi
