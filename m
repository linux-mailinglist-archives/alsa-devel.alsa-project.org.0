Return-Path: <alsa-devel-bounces@alsa-project.org>
X-Original-To: lists+alsa-devel@lfdr.de
Delivered-To: lists+alsa-devel@lfdr.de
Received: from alsa0.perex.cz (alsa0.perex.cz [77.48.224.243])
	by mail.lfdr.de (Postfix) with ESMTPS id 3576D32721B
	for <lists+alsa-devel@lfdr.de>; Sun, 28 Feb 2021 12:34:25 +0100 (CET)
Received: from alsa1.perex.cz (alsa1.perex.cz [207.180.221.201])
	(using TLSv1.2 with cipher AECDH-AES256-SHA (256/256 bits))
	(No client certificate requested)
	by alsa0.perex.cz (Postfix) with ESMTPS id BBE6D166D;
	Sun, 28 Feb 2021 12:33:34 +0100 (CET)
DKIM-Filter: OpenDKIM Filter v2.11.0 alsa0.perex.cz BBE6D166D
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/simple; d=alsa-project.org;
	s=default; t=1614512064;
	bh=3t6WU0EA3psxqDERybw3/V8OOH7TLR6Qn7OawkWP8EM=;
	h=Date:From:To:Subject:In-Reply-To:References:Cc:List-Id:
	 List-Unsubscribe:List-Archive:List-Post:List-Help:List-Subscribe:
	 From;
	b=dVxXiu451gmK61+8wusvzwroOXm5calkZuvN3UQy+UcD+OLzuXZwKtZV0BO5pnti6
	 louKFF9ZEJFppdjS5taYIRnW4CZ7s75eYtEL+Dx1vtlIYWmbVkctfdWdm5j+paiYcm
	 K/v9w8J2F8K2QFV6o9E531kxdLR77CR4h86gcQvM=
Received: from alsa1.perex.cz (localhost.localdomain [127.0.0.1])
	by alsa1.perex.cz (Postfix) with ESMTP id 2A999F80269;
	Sun, 28 Feb 2021 12:32:54 +0100 (CET)
X-Original-To: alsa-devel@alsa-project.org
Delivered-To: alsa-devel@alsa-project.org
Received: by alsa1.perex.cz (Postfix, from userid 50401)
 id E0752F8010A; Sun, 28 Feb 2021 12:32:51 +0100 (CET)
X-Spam-Checker-Version: SpamAssassin 3.4.0 (2014-02-07) on alsa1.perex.cz
X-Spam-Level: 
X-Spam-Status: No, score=0.0 required=5.0 tests=SPF_HELO_NONE,SPF_NONE
 autolearn=disabled version=3.4.0
Received: from mx2.suse.de (mx2.suse.de [195.135.220.15])
 (using TLSv1.2 with cipher AECDH-AES256-SHA (256/256 bits))
 (No client certificate requested)
 by alsa1.perex.cz (Postfix) with ESMTPS id 8616AF8010A
 for <alsa-devel@alsa-project.org>; Sun, 28 Feb 2021 12:32:47 +0100 (CET)
DKIM-Filter: OpenDKIM Filter v2.11.0 alsa1.perex.cz 8616AF8010A
X-Virus-Scanned: by amavisd-new at test-mx.suse.de
Received: from relay2.suse.de (unknown [195.135.221.27])
 by mx2.suse.de (Postfix) with ESMTP id BAC12AAC5;
 Sun, 28 Feb 2021 11:32:46 +0000 (UTC)
Date: Sun, 28 Feb 2021 12:32:46 +0100
Message-ID: <s5hr1l0juld.wl-tiwai@suse.de>
From: Takashi Iwai <tiwai@suse.de>
To: Anton Yakovlev <anton.yakovlev@opensynergy.com>
Subject: Re: [PATCH v6 6/9] ALSA: virtio: PCM substream operators
In-Reply-To: <20210227085956.1700687-7-anton.yakovlev@opensynergy.com>
References: <20210227085956.1700687-1-anton.yakovlev@opensynergy.com>
 <20210227085956.1700687-7-anton.yakovlev@opensynergy.com>
User-Agent: Wanderlust/2.15.9 (Almost Unreal) SEMI/1.14.6 (Maruoka)
 FLIM/1.14.9 (=?UTF-8?B?R29qxY0=?=) APEL/10.8 Emacs/25.3
 (x86_64-suse-linux-gnu) MULE/6.0 (HANACHIRUSATO)
MIME-Version: 1.0 (generated by SEMI 1.14.6 - "Maruoka")
Content-Type: text/plain; charset=US-ASCII
Cc: virtio-dev@lists.oasis-open.org, alsa-devel@alsa-project.org,
 "Michael S. Tsirkin" <mst@redhat.com>, linux-kernel@vger.kernel.org,
 Takashi Iwai <tiwai@suse.com>, virtualization@lists.linux-foundation.org
X-BeenThere: alsa-devel@alsa-project.org
X-Mailman-Version: 2.1.15
Precedence: list
List-Id: "Alsa-devel mailing list for ALSA developers -
 http://www.alsa-project.org" <alsa-devel.alsa-project.org>
List-Unsubscribe: <https://mailman.alsa-project.org/mailman/options/alsa-devel>, 
 <mailto:alsa-devel-request@alsa-project.org?subject=unsubscribe>
List-Archive: <http://mailman.alsa-project.org/pipermail/alsa-devel/>
List-Post: <mailto:alsa-devel@alsa-project.org>
List-Help: <mailto:alsa-devel-request@alsa-project.org?subject=help>
List-Subscribe: <https://mailman.alsa-project.org/mailman/listinfo/alsa-devel>, 
 <mailto:alsa-devel-request@alsa-project.org?subject=subscribe>
Errors-To: alsa-devel-bounces@alsa-project.org
Sender: "Alsa-devel" <alsa-devel-bounces@alsa-project.org>

On Sat, 27 Feb 2021 09:59:53 +0100,
Anton Yakovlev wrote:
> 
> +static int virtsnd_pcm_trigger(struct snd_pcm_substream *substream, int command)
> +{
> +	struct virtio_pcm_substream *vss = snd_pcm_substream_chip(substream);
> +	struct virtio_snd *snd = vss->snd;
> +	struct virtio_snd_msg *msg;
> +	unsigned long flags;
> +	int rc;
> +
> +	switch (command) {
> +	case SNDRV_PCM_TRIGGER_START:
> +	case SNDRV_PCM_TRIGGER_PAUSE_RELEASE: {
> +		struct virtio_snd_queue *queue = virtsnd_pcm_queue(vss);
> +
> +		spin_lock_irqsave(&queue->lock, flags);
> +		spin_lock(&vss->lock);
> +		rc = virtsnd_pcm_msg_send(vss);
> +		if (!rc)
> +			vss->xfer_enabled = true;
> +		spin_unlock(&vss->lock);
> +		spin_unlock_irqrestore(&queue->lock, flags);
> +		if (rc)
> +			return rc;
> +
> +		msg = virtsnd_pcm_ctl_msg_alloc(vss, VIRTIO_SND_R_PCM_START,
> +						GFP_KERNEL);

If we drop nonatomic PCM, this has to be changed: GFP_KERNEL is no
longer valid in the trigger and the pointer callbacks.
I wonder, though, the code below uses GFP_ATOMIC inconsistently...

> +	case SNDRV_PCM_TRIGGER_STOP:
> +	case SNDRV_PCM_TRIGGER_PAUSE_PUSH: {
> +		spin_lock_irqsave(&vss->lock, flags);
> +		vss->xfer_enabled = false;
> +		spin_unlock_irqrestore(&vss->lock, flags);
> +
> +		/*
> +		 * The substream needs to be released on the device side only
> +		 * when it is completely stopped.
> +		 */
> +		vss->release = (command == SNDRV_PCM_TRIGGER_STOP);
> +
> +		/*
> +		 * The STOP command can be issued in an atomic context after
> +		 * the drain is complete. Therefore, in general, we cannot sleep
> +		 * here.
> +		 */
> +		msg = virtsnd_pcm_ctl_msg_alloc(vss, VIRTIO_SND_R_PCM_STOP,
> +						GFP_ATOMIC);

BTW...
> +	default: {
> +		return -EINVAL;
> +	}

Let's avoid braces inside the switch() unless it's inevitably needed.
It makes the code harder to read.


> +static snd_pcm_uframes_t
> +virtsnd_pcm_pointer(struct snd_pcm_substream *substream)
> +{
> +	struct virtio_pcm_substream *vss = snd_pcm_substream_chip(substream);
> +	snd_pcm_uframes_t hw_ptr = SNDRV_PCM_POS_XRUN;
> +	unsigned long flags;
> +
> +	spin_lock_irqsave(&vss->lock, flags);
> +	if (!vss->xfer_xrun)
> +		hw_ptr = bytes_to_frames(substream->runtime, vss->hw_ptr);
> +	spin_unlock_irqrestore(&vss->lock, flags);

Oh, and if we drop nonatomc PCM, both trigger and pointer callbacks
are guaranteed to be called inside the spinlock, hence you can remove
*_irqsave() but just us spin_lock() in those two callbacks.


thanks,

Takashi
