Return-Path: <alsa-devel-bounces@alsa-project.org>
X-Original-To: lists+alsa-devel@lfdr.de
Delivered-To: lists+alsa-devel@lfdr.de
Received: from alsa0.perex.cz (alsa0.perex.cz [77.48.224.243])
	by mail.lfdr.de (Postfix) with ESMTPS id 24C742D6D8
	for <lists+alsa-devel@lfdr.de>; Wed, 29 May 2019 09:46:03 +0200 (CEST)
Received: from alsa1.perex.cz (alsa1.perex.cz [207.180.221.201])
	(using TLSv1.2 with cipher AECDH-AES256-SHA (256/256 bits))
	(No client certificate requested)
	by alsa0.perex.cz (Postfix) with ESMTPS id 996EA1698;
	Wed, 29 May 2019 09:45:12 +0200 (CEST)
DKIM-Filter: OpenDKIM Filter v2.11.0 alsa0.perex.cz 996EA1698
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/simple; d=alsa-project.org;
	s=default; t=1559115962;
	bh=UWWT/6NmKJjJEx8GaZXU8g5F5GeT5D65qhnia8uTj00=;
	h=Date:From:To:In-Reply-To:References:Subject:List-Id:
	 List-Unsubscribe:List-Archive:List-Post:List-Help:List-Subscribe:
	 From;
	b=bcpZHp8Rr8jjk7J33xE0NEsTg2/S9kyEOdDLTaw30aq2bzS8voAgLI0DvT/h9xnBQ
	 WTmdNh9xGbPNDnVv3woAL5BV5RzinVo0EiN8H+u5LqXNL3yZCa3xucEEbUaYB98vnD
	 NiK+wgFDTcF7QsrG4lYSAaAXLjRtGyh9j6961kE4=
Received: from alsa1.perex.cz (localhost.localdomain [127.0.0.1])
	by alsa1.perex.cz (Postfix) with ESMTP id DDDFCF896E4;
	Wed, 29 May 2019 09:44:17 +0200 (CEST)
X-Original-To: alsa-devel@alsa-project.org
Delivered-To: alsa-devel@alsa-project.org
Received: by alsa1.perex.cz (Postfix, from userid 50401)
 id 32B85F896E4; Wed, 29 May 2019 09:44:15 +0200 (CEST)
X-Spam-Checker-Version: SpamAssassin 3.4.0 (2014-02-07) on alsa1.perex.cz
X-Spam-Level: 
X-Spam-Status: No, score=0.0 required=5.0 tests=SPF_HELO_NONE,SPF_PASS
 autolearn=disabled version=3.4.0
Received: from relmlie5.idc.renesas.com (relmlor1.renesas.com
 [210.160.252.171])
 by alsa1.perex.cz (Postfix) with ESMTP id 97E2CF8065A
 for <alsa-devel@alsa-project.org>; Wed, 29 May 2019 09:44:08 +0200 (CEST)
DKIM-Filter: OpenDKIM Filter v2.11.0 alsa1.perex.cz 97E2CF8065A
Date: 29 May 2019 16:44:05 +0900
X-IronPort-AV: E=Sophos;i="5.60,526,1549897200"; d="scan'208";a="17263108"
Received: from unknown (HELO relmlir5.idc.renesas.com) ([10.200.68.151])
 by relmlie5.idc.renesas.com with ESMTP; 29 May 2019 16:44:05 +0900
Received: from morimoto-PC.renesas.com (unknown [10.166.18.140])
 by relmlir5.idc.renesas.com (Postfix) with ESMTP id DFD614001DCA
 for <alsa-devel@alsa-project.org>; Wed, 29 May 2019 16:44:05 +0900 (JST)
Message-ID: <87r28hwwfp.wl-kuninori.morimoto.gx@renesas.com>
From: Kuninori Morimoto <kuninori.morimoto.gx@renesas.com>
To: Linux-ALSA <alsa-devel@alsa-project.org>
In-Reply-To: <87tvddx2wg.wl-kuninori.morimoto.gx@renesas.com>
References: <87zhn5x5id.wl-kuninori.morimoto.gx@renesas.com>
 <87tvddx2wg.wl-kuninori.morimoto.gx@renesas.com>
User-Agent: Wanderlust/2.15.9 Emacs/24.5 Mule/6.0
MIME-Version: 1.0 (generated by SEMI-EPG 1.14.7 - "Harue")
Subject: Re: [alsa-devel] Question about topology component probing
X-BeenThere: alsa-devel@alsa-project.org
X-Mailman-Version: 2.1.15
Precedence: list
List-Id: "Alsa-devel mailing list for ALSA developers -
 http://www.alsa-project.org" <alsa-devel.alsa-project.org>
List-Unsubscribe: <https://mailman.alsa-project.org/mailman/options/alsa-devel>, 
 <mailto:alsa-devel-request@alsa-project.org?subject=unsubscribe>
List-Archive: <http://mailman.alsa-project.org/pipermail/alsa-devel/>
List-Post: <mailto:alsa-devel@alsa-project.org>
List-Help: <mailto:alsa-devel-request@alsa-project.org?subject=help>
List-Subscribe: <https://mailman.alsa-project.org/mailman/listinfo/alsa-devel>, 
 <mailto:alsa-devel-request@alsa-project.org?subject=subscribe>
Content-Type: text/plain; charset="us-ascii"
Content-Transfer-Encoding: 7bit
Errors-To: alsa-devel-bounces@alsa-project.org
Sender: "Alsa-devel" <alsa-devel-bounces@alsa-project.org>


Hi ALSA ML, again

> Hmm... it seems my brain is broken today... (not only today ?)
> Previous mail is mixing unrelated things...
> Please ignore it.

My spaghetti head becoming better, I believe.
Then, I could sorting the question, thus, I renamed the Subject.

I wonder about topology component doesn't need probing ?

(1) snd_soc_instantiate_card() binds all (normal) components
(2) And binded components will be probed.
(3) Some components with topology might be added
(4) Find new (= topology added) DAI and bind them

	static int snd_soc_instantiate_card(struct snd_soc_card *card)
	{
		...
		/* probe normal components here */
		for_each_card_prelinks(card, i, dai_link) {
(1)=>			ret = soc_bind_dai_link(card, dai_link);
			if (ret != 0)
				goto probe_end;
		}
		...
		/* add predefined DAI links to the list */
		for_each_card_prelinks(card, i, dai_link)
(A)=>			snd_soc_add_dai_link(card, dai_link);
		...
		/* probe all components used by DAI links on this card */
		for_each_comp_order(order) {
			for_each_card_rtds(card, rtd) {
(2)=>				ret = soc_probe_link_components(card, rtd, order);
				...
				}
			}
		}
		...
		/* initialise the sound card only once */
		if (card->probe) {
(3)=>			ret = card->probe(card);
			if (ret < 0)
				goto probe_end;
		}
		...

		for_each_card_links(card, dai_link) {
			...
(4)=>			ret = soc_bind_dai_link(card, dai_link);
			...
		}
		...
	}

But, In my understanding, normal components are probed,
but topology added components are not probed, because
no one calls soc_probe_link_components() after (4).
Does topology added components doesn't need probe ?

It is checking the added component is already connected to card, or not.
And it is calling try_module_get() for it.
Currently, topology added component is no check for these, I think.

This is very confusable for now
(= I have plan to post cleanup patch around here...)
so the pseudo code is like this

	(1) normal component bind
	(A) connect normal dai_link to card
	(2) normal component probe
	(3) topology might connect dai_link to card
	(4) bind all component via card connected dai_link.
	    But, the real target is topology added component.
	(x) topology component probe is not called

Here, (A) connects dai_link to card.
This it is used here and from topology (3).
This means, (1) and (4) can be merged, and all
(= both normal and topology added) component can be probed
if we can re-order like

	(A) connect normal dai_link to card
	(3) topology might connect dai_link to card
	(4) bind all component via card connected dai_link.
	(2) all component probe

It works for me, but my board doesn't use topology.
So I'm not sure topology side things.

So my questions are

	Q1 topology added component shouldn't be probed ?
	Q2 normal component should be added before card probe / topology (= (3)) ?

Or in other works, does attached patch works well under topology ?

-----------------
diff --git a/sound/soc/soc-core.c b/sound/soc/soc-core.c
index 2403bec..e3fce07 100644
--- a/sound/soc/soc-core.c
+++ b/sound/soc/soc-core.c
@@ -2075,13 +2075,6 @@ static int snd_soc_instantiate_card(struct snd_soc_card *card)
 	/* check whether any platform is ignore machine FE and using topology */
 	soc_check_tplg_fes(card);
 
-	/* bind DAIs */
-	for_each_card_prelinks(card, i, dai_link) {
-		ret = soc_bind_dai_link(card, dai_link);
-		if (ret != 0)
-			goto probe_end;
-	}
-
 	/* bind aux_devs too */
 	for (i = 0; i < card->num_aux_devs; i++) {
 		ret = soc_bind_aux_dev(card, i);
@@ -2129,6 +2122,22 @@ static int snd_soc_instantiate_card(struct snd_soc_card *card)
 			goto probe_end;
 	}
 
+	/*
+	 * Find new DAI links added during probing components and bind them.
+	 * Components with topology may bring new DAIs and DAI links.
+	 */
+	for_each_card_links(card, dai_link) {
+		if (soc_is_dai_link_bound(card, dai_link))
+			continue;
+
+		ret = soc_init_dai_link(card, dai_link);
+		if (ret)
+			goto probe_end;
+		ret = soc_bind_dai_link(card, dai_link);
+		if (ret)
+			goto probe_end;
+	}
+
 	/* probe all components used by DAI links on this card */
 	for_each_comp_order(order) {
 		for_each_card_rtds(card, rtd) {
@@ -2147,22 +2156,6 @@ static int snd_soc_instantiate_card(struct snd_soc_card *card)
 	if (ret < 0)
 		goto probe_end;
 
-	/*
-	 * Find new DAI links added during probing components and bind them.
-	 * Components with topology may bring new DAIs and DAI links.
-	 */
-	for_each_card_links(card, dai_link) {
-		if (soc_is_dai_link_bound(card, dai_link))
-			continue;
-
-		ret = soc_init_dai_link(card, dai_link);
-		if (ret)
-			goto probe_end;
-		ret = soc_bind_dai_link(card, dai_link);
-		if (ret)
-			goto probe_end;
-	}
-
 	/* probe all DAI links on this card */
 	for_each_comp_order(order) {
 		for_each_card_rtds(card, rtd) {
-----------------

Thank you for your help !!
Best regards
---
Kuninori Morimoto
_______________________________________________
Alsa-devel mailing list
Alsa-devel@alsa-project.org
https://mailman.alsa-project.org/mailman/listinfo/alsa-devel
