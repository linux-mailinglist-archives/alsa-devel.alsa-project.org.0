Return-Path: <alsa-devel-bounces@alsa-project.org>
X-Original-To: lists+alsa-devel@lfdr.de
Delivered-To: lists+alsa-devel@lfdr.de
Received: from alsa0.perex.cz (alsa0.perex.cz [77.48.224.243])
	by mail.lfdr.de (Postfix) with ESMTPS id E73E8162188
	for <lists+alsa-devel@lfdr.de>; Tue, 18 Feb 2020 08:29:57 +0100 (CET)
Received: from alsa1.perex.cz (alsa1.perex.cz [207.180.221.201])
	(using TLSv1.2 with cipher AECDH-AES256-SHA (256/256 bits))
	(No client certificate requested)
	by alsa0.perex.cz (Postfix) with ESMTPS id 8099C1673;
	Tue, 18 Feb 2020 08:29:07 +0100 (CET)
DKIM-Filter: OpenDKIM Filter v2.11.0 alsa0.perex.cz 8099C1673
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/simple; d=alsa-project.org;
	s=default; t=1582010997;
	bh=vQ/DAHdM3umyPLc3WvET3H2vZaGfrvtwwYo/hzFp5aE=;
	h=Date:From:To:Subject:In-Reply-To:References:Cc:List-Id:
	 List-Unsubscribe:List-Archive:List-Post:List-Help:List-Subscribe:
	 From;
	b=JSJwKrVI7jRfSU83zJKRgY5WhJcBEuH6ycbB7ZhxU9VFQY0GCpSzgQ9Flhc/2esUy
	 VOi4dlTeyxmV7vzWaA+ULdpBRLb187b/6QbM88B3jx7n7Tzn7kOn7iKxNFvJnYH5bl
	 MGgDYwoRSvoztQx3jC1kkgODhb5kImRCrzgLIGi8=
Received: from alsa1.perex.cz (localhost.localdomain [127.0.0.1])
	by alsa1.perex.cz (Postfix) with ESMTP id A080AF8014A;
	Tue, 18 Feb 2020 08:28:16 +0100 (CET)
X-Original-To: alsa-devel@alsa-project.org
Delivered-To: alsa-devel@alsa-project.org
Received: by alsa1.perex.cz (Postfix, from userid 50401)
 id 86EE5F80148; Tue, 18 Feb 2020 08:28:11 +0100 (CET)
X-Spam-Checker-Version: SpamAssassin 3.4.0 (2014-02-07) on alsa1.perex.cz
X-Spam-Level: 
X-Spam-Status: No, score=0.0 required=5.0 tests=RCVD_IN_MSPIKE_H3,
 RCVD_IN_MSPIKE_WL,SPF_HELO_NONE,SPF_PASS autolearn=disabled version=3.4.0
Received: from mx2.suse.de (mx2.suse.de [195.135.220.15])
 (using TLSv1.2 with cipher AECDH-AES256-SHA (256/256 bits))
 (No client certificate requested)
 by alsa1.perex.cz (Postfix) with ESMTPS id B3277F80135
 for <alsa-devel@alsa-project.org>; Tue, 18 Feb 2020 08:28:07 +0100 (CET)
DKIM-Filter: OpenDKIM Filter v2.11.0 alsa1.perex.cz B3277F80135
X-Virus-Scanned: by amavisd-new at test-mx.suse.de
Received: from relay2.suse.de (unknown [195.135.220.254])
 by mx2.suse.de (Postfix) with ESMTP id 13069AAC3;
 Tue, 18 Feb 2020 07:28:05 +0000 (UTC)
Date: Tue, 18 Feb 2020 08:28:04 +0100
Message-ID: <s5hy2t09wxn.wl-tiwai@suse.de>
From: Takashi Iwai <tiwai@suse.de>
To: Takashi Sakamoto <o-takashi@sakamocchi.jp>
Subject: Re: Questions about event implementation in ALSA Sequencer
In-Reply-To: <20200218031101.GA12168@workstation>
References: <20200218031101.GA12168@workstation>
User-Agent: Wanderlust/2.15.9 (Almost Unreal) SEMI/1.14.6 (Maruoka)
 FLIM/1.14.9 (=?UTF-8?B?R29qxY0=?=) APEL/10.8 Emacs/25.3
 (x86_64-suse-linux-gnu) MULE/6.0 (HANACHIRUSATO)
MIME-Version: 1.0 (generated by SEMI 1.14.6 - "Maruoka")
Content-Type: text/plain; charset=US-ASCII
Cc: alsa-devel@alsa-project.org
X-BeenThere: alsa-devel@alsa-project.org
X-Mailman-Version: 2.1.15
Precedence: list
List-Id: "Alsa-devel mailing list for ALSA developers -
 http://www.alsa-project.org" <alsa-devel.alsa-project.org>
List-Unsubscribe: <https://mailman.alsa-project.org/mailman/options/alsa-devel>, 
 <mailto:alsa-devel-request@alsa-project.org?subject=unsubscribe>
List-Archive: <http://mailman.alsa-project.org/pipermail/alsa-devel/>
List-Post: <mailto:alsa-devel@alsa-project.org>
List-Help: <mailto:alsa-devel-request@alsa-project.org?subject=help>
List-Subscribe: <https://mailman.alsa-project.org/mailman/listinfo/alsa-devel>, 
 <mailto:alsa-devel-request@alsa-project.org?subject=subscribe>
Errors-To: alsa-devel-bounces@alsa-project.org
Sender: "Alsa-devel" <alsa-devel-bounces@alsa-project.org>

On Tue, 18 Feb 2020 04:11:02 +0100,
Takashi Sakamoto wrote:
> 
> Hi,
> 
> I'm working for alsa-gobject[1] so that it supports API for ALSA Sequencer.
> At present I've mostly done it just with direct dispatch support[2] (thus
> transmission via queue is for my later work). Then I have some questions
> about the design of event in ALSA Sequencer. I'd like to ask for some advices
> (mainly Iwai-san, perhaps).
> 
> 1. use case of SNDRV_SEQ_EVENT_LENGTH_VARUSR in 'struct snd_seq_event'
> 
> In my understanding, the flag is used for a case that sender transmits the
> value of pointer itself and its length to the receiver in the shape of
> 'struct snd_seq_ev_ext'. I assume that two use cases. If the sender and
> receiver are in the same process, the event is a request for the receiver to
> operate data in the same VMA. If the sender and receiver are in different
> processes, the event is a request for pointer-based calculation between the
> peer.
> 
> If the above understanding is correct, it's hard to represent this type of
> event for g-i interface because g-i is the object-based framework. Any raw
> pointer without explicit type is hard to be exposed to g-i applications as
> long as I know, and it's going to be unsupported, perhaps.

To be more exact, the usage isn't restricted whether belonging to the
same process or not.  The event with VARUSR is processed only for the
direct transfer, not for the scheduled transfer.  That is, the written
packet is immediately processed and the user-space data is copied to
the destinations at this point.  In this sense, it's no zero-copy but
rather just for saving the space in the input pool.


> 2. event data type corresponding to event type
> 
> Some event types are expected to specific data type; e.g. SNDRV_SEQ_EVENT_NOTE
> is for 'struct snd_seq_ev_note' and SNDRV_SEQ_EVENT_CONTROLLER is for
> 'struct snd_seq_ev_ctrl'. However there're some types for any data type; e.g.
> SNDRV_SEQ_EVENT_ECHO or SNDRV_SEQ_EVENT_USR0. For the kind of types, the
> event structure has no information about which data type should be used and
> user applications voluntarily decide the data type. Therefore the sender
> and receiver should share a kind of protocol in advance.
> 
> This means that userspace applications require API to select data type
> independent of event type itself.

Right, those 'any-type' events have no specification of the event
data, hence both sender and receiver need to agree with the handling.
IOW, if not known, the receiver should discard the event.


> 3. quote event and specific event types.
> 
> Two event types are reserved for 'struct snd_seq_ev_quote'; i.e.
> SNDRV_SEQ_EVENT_KERNEL_ERROR and SNDRV_SEQ_EVENT_KERNEL_QUOTE(obsoleted?).
> However, the quote structure is exposed to userspace itself. Furthermore,
> as of v5.5 kernel, there's no in-kernel code to check the quote data
> from/to user client.
> 
> Is it better to produce API so that userspace application can transfer
> the quote event?

You can, but it makes little sense other than as a fuzzer.
The quote events are only for the error bounce that is used
internally.


thanks,

Takashi

> 
> [1] https://github.com/alsa-project/alsa-gobject
> [2] https://github.com/takaswie/alsa-gobject/tree/topic/seq
> 
> Regards
> 
> 
> Takashi Sakamoto
> 
