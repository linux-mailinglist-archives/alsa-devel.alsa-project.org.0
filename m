Return-Path: <alsa-devel-bounces@alsa-project.org>
X-Original-To: lists+alsa-devel@lfdr.de
Delivered-To: lists+alsa-devel@lfdr.de
Received: from alsa0.perex.cz (alsa0.perex.cz [77.48.224.243])
	by mail.lfdr.de (Postfix) with ESMTPS id 557281B4E7D
	for <lists+alsa-devel@lfdr.de>; Wed, 22 Apr 2020 22:48:47 +0200 (CEST)
Received: from alsa1.perex.cz (alsa1.perex.cz [207.180.221.201])
	(using TLSv1.2 with cipher AECDH-AES256-SHA (256/256 bits))
	(No client certificate requested)
	by alsa0.perex.cz (Postfix) with ESMTPS id D5576169E;
	Wed, 22 Apr 2020 22:47:56 +0200 (CEST)
DKIM-Filter: OpenDKIM Filter v2.11.0 alsa0.perex.cz D5576169E
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/simple; d=alsa-project.org;
	s=default; t=1587588526;
	bh=pFZV3zygbWqxJT55DoLguTzIFOCBRPtEt5Vjr2ubYvs=;
	h=Date:From:To:Subject:In-Reply-To:References:Cc:List-Id:
	 List-Unsubscribe:List-Archive:List-Post:List-Help:List-Subscribe:
	 From;
	b=IZsbXpFmjaZ2U6iF0w3Dvj51QF9GWguuYcyZf/K9IMoDIjD1NCc2eOwVtQgQtAeAS
	 rvxoAPhUQ7soIIbbEzVBpXfDB/GI61KDRPbVd/PggPa/kJ2ejEhLy2xw1+Y3eeimS3
	 1LPh5MHcLv+imfJ/5ndHhvXnEMOQEKdHr2rurXq8=
Received: from alsa1.perex.cz (localhost.localdomain [127.0.0.1])
	by alsa1.perex.cz (Postfix) with ESMTP id E3870F8020C;
	Wed, 22 Apr 2020 22:47:05 +0200 (CEST)
X-Original-To: alsa-devel@alsa-project.org
Delivered-To: alsa-devel@alsa-project.org
Received: by alsa1.perex.cz (Postfix, from userid 50401)
 id 80736F801D9; Wed, 22 Apr 2020 22:47:01 +0200 (CEST)
X-Spam-Checker-Version: SpamAssassin 3.4.0 (2014-02-07) on alsa1.perex.cz
X-Spam-Level: 
X-Spam-Status: No, score=0.0 required=5.0 tests=RCVD_IN_MSPIKE_H3,
 RCVD_IN_MSPIKE_WL,SPF_HELO_NONE,SPF_PASS autolearn=disabled version=3.4.0
Received: from mx2.suse.de (mx2.suse.de [195.135.220.15])
 (using TLSv1.2 with cipher AECDH-AES256-SHA (256/256 bits))
 (No client certificate requested)
 by alsa1.perex.cz (Postfix) with ESMTPS id A7A4FF800FF
 for <alsa-devel@alsa-project.org>; Wed, 22 Apr 2020 22:46:58 +0200 (CEST)
DKIM-Filter: OpenDKIM Filter v2.11.0 alsa1.perex.cz A7A4FF800FF
X-Virus-Scanned: by amavisd-new at test-mx.suse.de
Received: from relay2.suse.de (unknown [195.135.220.254])
 by mx2.suse.de (Postfix) with ESMTP id 670EEACF1;
 Wed, 22 Apr 2020 20:46:57 +0000 (UTC)
Date: Wed, 22 Apr 2020 22:46:57 +0200
Message-ID: <s5hblnjxn7i.wl-tiwai@suse.de>
From: Takashi Iwai <tiwai@suse.de>
To: alsa-devel@alsa-project.org
Subject: Re: [PATCH] ALSA: hda: Always use jackpoll helper for jack update
 after resume
In-Reply-To: <20200422203744.26299-1-tiwai@suse.de>
References: <20200422203744.26299-1-tiwai@suse.de>
User-Agent: Wanderlust/2.15.9 (Almost Unreal) SEMI/1.14.6 (Maruoka)
 FLIM/1.14.9 (=?UTF-8?B?R29qxY0=?=) APEL/10.8 Emacs/25.3
 (x86_64-suse-linux-gnu) MULE/6.0 (HANACHIRUSATO)
MIME-Version: 1.0 (generated by SEMI 1.14.6 - "Maruoka")
Content-Type: text/plain; charset=US-ASCII
Cc: Hui Wang <hui.wang@canonical.com>,
 Kai Vehmanen <kai.vehmanen@linux.intel.com>
X-BeenThere: alsa-devel@alsa-project.org
X-Mailman-Version: 2.1.15
Precedence: list
List-Id: "Alsa-devel mailing list for ALSA developers -
 http://www.alsa-project.org" <alsa-devel.alsa-project.org>
List-Unsubscribe: <https://mailman.alsa-project.org/mailman/options/alsa-devel>, 
 <mailto:alsa-devel-request@alsa-project.org?subject=unsubscribe>
List-Archive: <http://mailman.alsa-project.org/pipermail/alsa-devel/>
List-Post: <mailto:alsa-devel@alsa-project.org>
List-Help: <mailto:alsa-devel-request@alsa-project.org?subject=help>
List-Subscribe: <https://mailman.alsa-project.org/mailman/listinfo/alsa-devel>, 
 <mailto:alsa-devel-request@alsa-project.org?subject=subscribe>
Errors-To: alsa-devel-bounces@alsa-project.org
Sender: "Alsa-devel" <alsa-devel-bounces@alsa-project.org>

On Wed, 22 Apr 2020 22:37:44 +0200,
Takashi Iwai wrote:
> 
> HD-audio codec driver applies a tricky procedure to forcibly perform
> the runtime resume by mimicking the usage count even if the device has
> been runtime-suspended beforehand.  This was needed to assure to
> trigger the jack detection update after the system resume.
> 
> And recently we also applied the similar logic to the HD-audio
> controller side.  However this seems leading to some inconsistency,
> and eventually PCI controller gets screwed up.
> 
> This patch is an attempt to fix and clean up those behavior: instead
> of the tricky runtime resume procedure, the existing jackpoll work is
> scheduled when such a forced codec resume is required.  The jackpoll
> work will power up the codec, and this alone should suffice for the
> jack status update in usual cases.  If the extra polling is requested
> (by checking codec->jackpoll_interval), the manual update is invoked
> after that, and the codec is powered down again.
> 
> Also, we filter the spurious wake up of the codec from the controller
> runtime resume by checking codec->relaxed_resume flag.  If this flag
> is set, basically we don't need to wake up explicitly, but it's
> supposed to be done via the audio component notifier.
> 
> Fixes: c4c8dd6ef807 ("ALSA: hda: Skip controller resume if not needed")
> Signed-off-by: Takashi Iwai <tiwai@suse.de>

Note that this patch discards the previous forced resume logic
introduced in commit b5a236c175b0
    ALSA: hda - Enforces runtime_resume after S3 and S4 for each codec

So, Hui, could you check whether it still works for such a device?
Or at least tests with a few known working devices are helpful.

Also, Kai, it'd be appreciated if you can test whether it causes
regression on Intel HDMI audio.  Currently I have no enough test
machines due to lockdown, unfortunately.


Thanks!

Takashi


> ---
>  sound/pci/hda/hda_codec.c | 28 +++++++++++++++++-----------
>  sound/pci/hda/hda_intel.c | 17 ++---------------
>  2 files changed, 19 insertions(+), 26 deletions(-)
> 
> diff --git a/sound/pci/hda/hda_codec.c b/sound/pci/hda/hda_codec.c
> index 86a632bf4d50..7e3ae4534df9 100644
> --- a/sound/pci/hda/hda_codec.c
> +++ b/sound/pci/hda/hda_codec.c
> @@ -641,8 +641,18 @@ static void hda_jackpoll_work(struct work_struct *work)
>  	struct hda_codec *codec =
>  		container_of(work, struct hda_codec, jackpoll_work.work);
>  
> -	snd_hda_jack_set_dirty_all(codec);
> -	snd_hda_jack_poll_all(codec);
> +	/* for non-polling trigger: we need nothing if already powered on */
> +	if (!codec->jackpoll_interval && snd_hdac_is_power_on(&codec->core))
> +		return;
> +
> +	/* the power-up/down sequence triggers the runtime resume */
> +	snd_hda_power_up_pm(codec);
> +	/* update jacks manually if polling is required, too */
> +	if (codec->jackpoll_interval) {
> +		snd_hda_jack_set_dirty_all(codec);
> +		snd_hda_jack_poll_all(codec);
> +	}
> +	snd_hda_power_down_pm(codec);
>  
>  	if (!codec->jackpoll_interval)
>  		return;
> @@ -2951,18 +2961,14 @@ static int hda_codec_runtime_resume(struct device *dev)
>  static int hda_codec_force_resume(struct device *dev)
>  {
>  	struct hda_codec *codec = dev_to_hda_codec(dev);
> -	bool forced_resume = hda_codec_need_resume(codec);
>  	int ret;
>  
> -	/* The get/put pair below enforces the runtime resume even if the
> -	 * device hasn't been used at suspend time.  This trick is needed to
> -	 * update the jack state change during the sleep.
> -	 */
> -	if (forced_resume)
> -		pm_runtime_get_noresume(dev);
>  	ret = pm_runtime_force_resume(dev);
> -	if (forced_resume)
> -		pm_runtime_put(dev);
> +	/* schedule jackpoll work for jack detection update */
> +	if (codec->jackpoll_interval ||
> +	    (pm_runtime_suspended(dev) && hda_codec_need_resume(codec)))
> +		schedule_delayed_work(&codec->jackpoll_work,
> +				      codec->jackpoll_interval);
>  	return ret;
>  }
>  
> diff --git a/sound/pci/hda/hda_intel.c b/sound/pci/hda/hda_intel.c
> index 9f995576cff1..0310193ea1bd 100644
> --- a/sound/pci/hda/hda_intel.c
> +++ b/sound/pci/hda/hda_intel.c
> @@ -1004,7 +1004,8 @@ static void __azx_runtime_resume(struct azx *chip, bool from_rt)
>  
>  	if (status && from_rt) {
>  		list_for_each_codec(codec, &chip->bus)
> -			if (status & (1 << codec->addr))
> +			if (!codec->relaxed_resume &&
> +			    (status & (1 << codec->addr)))
>  				schedule_delayed_work(&codec->jackpoll_work,
>  						      codec->jackpoll_interval);
>  	}
> @@ -1044,9 +1045,7 @@ static int azx_suspend(struct device *dev)
>  static int azx_resume(struct device *dev)
>  {
>  	struct snd_card *card = dev_get_drvdata(dev);
> -	struct hda_codec *codec;
>  	struct azx *chip;
> -	bool forced_resume = false;
>  
>  	if (!azx_is_pm_ready(card))
>  		return 0;
> @@ -1058,19 +1057,7 @@ static int azx_resume(struct device *dev)
>  	if (azx_acquire_irq(chip, 1) < 0)
>  		return -EIO;
>  
> -	/* check for the forced resume */
> -	list_for_each_codec(codec, &chip->bus) {
> -		if (hda_codec_need_resume(codec)) {
> -			forced_resume = true;
> -			break;
> -		}
> -	}
> -
> -	if (forced_resume)
> -		pm_runtime_get_noresume(dev);
>  	pm_runtime_force_resume(dev);
> -	if (forced_resume)
> -		pm_runtime_put(dev);
>  	snd_power_change_state(card, SNDRV_CTL_POWER_D0);
>  
>  	trace_azx_resume(chip);
> -- 
> 2.16.4
> 
