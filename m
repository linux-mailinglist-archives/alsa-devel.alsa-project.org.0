Return-Path: <alsa-devel-bounces@alsa-project.org>
X-Original-To: lists+alsa-devel@lfdr.de
Delivered-To: lists+alsa-devel@lfdr.de
Received: from alsa0.perex.cz (alsa0.perex.cz [77.48.224.243])
	by mail.lfdr.de (Postfix) with ESMTPS id 3ECA335A2BA
	for <lists+alsa-devel@lfdr.de>; Fri,  9 Apr 2021 18:10:37 +0200 (CEST)
Received: from alsa1.perex.cz (alsa1.perex.cz [207.180.221.201])
	(using TLSv1.2 with cipher AECDH-AES256-SHA (256/256 bits))
	(No client certificate requested)
	by alsa0.perex.cz (Postfix) with ESMTPS id C40B015E2;
	Fri,  9 Apr 2021 18:09:46 +0200 (CEST)
DKIM-Filter: OpenDKIM Filter v2.11.0 alsa0.perex.cz C40B015E2
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/simple; d=alsa-project.org;
	s=default; t=1617984636;
	bh=8dHB3cvduNdxcSScgVxsWAwEQo/waRNWkJT9Hd1FZXg=;
	h=Date:From:To:Subject:In-Reply-To:References:Cc:List-Id:
	 List-Unsubscribe:List-Archive:List-Post:List-Help:List-Subscribe:
	 From;
	b=EYUdqd5Ku3eTf0lDzXdNAvXFdRGXV6dvmMNcNB3NJJ7/BM3aPZfVD5N9V9yoUTSA+
	 kCanjHxcjiaMJeOH6OL/t1OwWEG3kisF5Q10YIiwv5qi22pZxq/BosgQ96jlvAXw+v
	 wjrea75QtZP6l+8mTg+pExZbOIQa4kxw7camyxSM=
Received: from alsa1.perex.cz (localhost.localdomain [127.0.0.1])
	by alsa1.perex.cz (Postfix) with ESMTP id 1FCE8F8016D;
	Fri,  9 Apr 2021 18:09:09 +0200 (CEST)
X-Original-To: alsa-devel@alsa-project.org
Delivered-To: alsa-devel@alsa-project.org
Received: by alsa1.perex.cz (Postfix, from userid 50401)
 id 7C854F8016A; Fri,  9 Apr 2021 18:09:06 +0200 (CEST)
X-Spam-Checker-Version: SpamAssassin 3.4.0 (2014-02-07) on alsa1.perex.cz
X-Spam-Level: ***
X-Spam-Status: No, score=3.0 required=5.0 tests=PRX_APP_ATTACH, SPF_HELO_NONE, 
 SPF_NONE autolearn=disabled version=3.4.0
Received: from mx2.suse.de (mx2.suse.de [195.135.220.15])
 (using TLSv1.2 with cipher AECDH-AES256-SHA (256/256 bits))
 (No client certificate requested)
 by alsa1.perex.cz (Postfix) with ESMTPS id C71D3F80113
 for <alsa-devel@alsa-project.org>; Fri,  9 Apr 2021 18:09:03 +0200 (CEST)
DKIM-Filter: OpenDKIM Filter v2.11.0 alsa1.perex.cz C71D3F80113
X-Virus-Scanned: by amavisd-new at test-mx.suse.de
Received: from relay2.suse.de (unknown [195.135.221.27])
 by mx2.suse.de (Postfix) with ESMTP id F2B8BB0D1;
 Fri,  9 Apr 2021 16:09:02 +0000 (UTC)
Date: Fri, 09 Apr 2021 18:09:02 +0200
Message-ID: <s5hsg3z4ezl.wl-tiwai@suse.de>
From: Takashi Iwai <tiwai@suse.de>
To: Takashi Sakamoto <o-takashi@sakamocchi.jp>
Subject: Re: [PATCH v3] ALSA: control: Add memory consumption limit to user
 controls
In-Reply-To: <s5h5z0v67wh.wl-tiwai@suse.de>
References: <20210408103149.40357-1-o-takashi@sakamocchi.jp>
 <20210408105025.GB40407@workstation> <s5h1rbl80yy.wl-tiwai@suse.de>
 <20210409022735.GA3776@workstation> <s5h5z0v67wh.wl-tiwai@suse.de>
User-Agent: Wanderlust/2.15.9 (Almost Unreal) SEMI/1.14.6 (Maruoka)
 FLIM/1.14.9 (=?UTF-8?B?R29qxY0=?=) APEL/10.8 Emacs/25.3
 (x86_64-suse-linux-gnu) MULE/6.0 (HANACHIRUSATO)
MIME-Version: 1.0 (generated by SEMI 1.14.6 - "Maruoka")
Content-Type: multipart/mixed; boundary="Multipart_Fri_Apr__9_18:09:02_2021-1"
Cc: alsa-devel@alsa-project.org
X-BeenThere: alsa-devel@alsa-project.org
X-Mailman-Version: 2.1.15
Precedence: list
List-Id: "Alsa-devel mailing list for ALSA developers -
 http://www.alsa-project.org" <alsa-devel.alsa-project.org>
List-Unsubscribe: <https://mailman.alsa-project.org/mailman/options/alsa-devel>, 
 <mailto:alsa-devel-request@alsa-project.org?subject=unsubscribe>
List-Archive: <http://mailman.alsa-project.org/pipermail/alsa-devel/>
List-Post: <mailto:alsa-devel@alsa-project.org>
List-Help: <mailto:alsa-devel-request@alsa-project.org?subject=help>
List-Subscribe: <https://mailman.alsa-project.org/mailman/listinfo/alsa-devel>, 
 <mailto:alsa-devel-request@alsa-project.org?subject=subscribe>
Errors-To: alsa-devel-bounces@alsa-project.org
Sender: "Alsa-devel" <alsa-devel-bounces@alsa-project.org>

--Multipart_Fri_Apr__9_18:09:02_2021-1
Content-Type: text/plain; charset=US-ASCII

On Fri, 09 Apr 2021 12:59:10 +0200,
Takashi Iwai wrote:
> 
> On Fri, 09 Apr 2021 04:27:35 +0200,
> Takashi Sakamoto wrote:
> > 
> > 4. Add `max_user_ctl_alloc_size` kobject attribute to the control device
> > 
> > In the patch, a new module parameter 'max_user_ctl_alloc_size' is added.
> > In the item, I use the value of this parameter as initial value per
> > control device. The value per control device can be changed via sysfs
> > node.
> > 
> > The `max_user_ctl_alloc_size` is really the attribute of control device,
> > so I think it acceptable. Additionally, 'curr_user_ctl_alloc_size' is
> > also added so that userspace applications get current status.
> 
> So that's the primary purpose?  Then it makes sense, yeah.

You meant something like below, right?


Takashi


--Multipart_Fri_Apr__9_18:09:02_2021-1
Content-Type: application/octet-stream; type=patch
Content-Disposition: attachment; filename="user-ctl-sysfs.diff"
Content-Transfer-Encoding: 7bit

diff --git a/include/sound/core.h b/include/sound/core.h
index 1f9aef0adbc9..e7c947c934b0 100644
--- a/include/sound/core.h
+++ b/include/sound/core.h
@@ -100,6 +100,7 @@ struct snd_card {
 	struct rw_semaphore controls_rwsem;	/* controls list lock */
 	rwlock_t ctl_files_rwlock;	/* ctl_files list lock */
 	int controls_count;		/* count of all controls */
+	size_t user_ctl_max_size;	/* max memory allocation for user controls */
 	size_t user_ctl_alloc_size;	// current memory allocation by user controls.
 	struct list_head controls;	/* all controls for this card */
 	struct list_head ctl_files;	/* active control files */
diff --git a/sound/core/control.c b/sound/core/control.c
index a076c08c21b6..38706261c11b 100644
--- a/sound/core/control.c
+++ b/sound/core/control.c
@@ -1269,7 +1269,7 @@ struct user_element {
 // check whether the addition (in bytes) of user ctl element may overflow the limit.
 static bool check_user_elem_overflow(struct snd_card *card, ssize_t add)
 {
-	return (ssize_t)card->user_ctl_alloc_size + add > max_user_ctl_alloc_size;
+	return (ssize_t)card->user_ctl_alloc_size + add > card->user_ctl_max_size;
 }
 
 static int snd_ctl_elem_user_info(struct snd_kcontrol *kcontrol,
@@ -2199,6 +2199,55 @@ static int snd_ctl_dev_free(struct snd_device *device)
 	return 0;
 }
 
+/*
+ * sysfs entries
+ */
+static ssize_t
+user_ctl_max_size_show(struct device *dev, struct device_attribute *attr,
+		       char *buf)
+{
+	struct snd_card *card = container_of(dev, struct snd_card, ctl_dev);
+
+	return scnprintf(buf, PAGE_SIZE, "%ld\n", card->user_ctl_max_size);
+}
+
+static ssize_t
+user_ctl_max_size_store(struct device *dev, struct device_attribute *attr,
+			const char *buf, size_t count)
+{
+	struct snd_card *card = container_of(dev, struct snd_card, ctl_dev);
+	unsigned long size;
+	int err;
+
+	err = kstrtoul(buf, 0, &size);
+	if (err)
+		return err;
+	if (size >= 32 * 1024 * 1024 || size < card->user_ctl_alloc_size)
+		return -EINVAL;
+	card->user_ctl_max_size = size;
+	return count;
+}
+
+static DEVICE_ATTR_RW(user_ctl_max_size);
+
+static ssize_t
+user_ctl_alloc_size_show(struct device *dev, struct device_attribute *attr,
+			 char *buf)
+{
+	struct snd_card *card = container_of(dev, struct snd_card, ctl_dev);
+
+	return scnprintf(buf, PAGE_SIZE, "%ld\n", card->user_ctl_alloc_size);
+}
+
+static DEVICE_ATTR_RO(user_ctl_alloc_size);
+
+static struct attribute *ctl_dev_attrs[] = {
+	&dev_attr_user_ctl_max_size.attr,
+	&dev_attr_user_ctl_alloc_size.attr,
+	NULL
+};
+ATTRIBUTE_GROUPS(ctl_dev);
+
 /*
  * create control core:
  * called from init.c
@@ -2218,7 +2267,9 @@ int snd_ctl_create(struct snd_card *card)
 		return -ENXIO;
 
 	snd_device_initialize(&card->ctl_dev, card);
+	card->ctl_dev.groups = ctl_dev_groups;
 	dev_set_name(&card->ctl_dev, "controlC%d", card->number);
+	card->user_ctl_max_size = max_user_ctl_alloc_size;
 
 	err = snd_device_new(card, SNDRV_DEV_CONTROL, card, &ops);
 	if (err < 0)

--Multipart_Fri_Apr__9_18:09:02_2021-1--
