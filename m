Return-Path: <alsa-devel-bounces@alsa-project.org>
X-Original-To: lists+alsa-devel@lfdr.de
Delivered-To: lists+alsa-devel@lfdr.de
Received: from alsa0.perex.cz (alsa0.perex.cz [77.48.224.243])
	by mail.lfdr.de (Postfix) with ESMTPS id 7BF76BABA7
	for <lists+alsa-devel@lfdr.de>; Sun, 22 Sep 2019 22:27:40 +0200 (CEST)
Received: from alsa1.perex.cz (alsa1.perex.cz [207.180.221.201])
	(using TLSv1.2 with cipher AECDH-AES256-SHA (256/256 bits))
	(No client certificate requested)
	by alsa0.perex.cz (Postfix) with ESMTPS id EA8461674;
	Sun, 22 Sep 2019 22:26:49 +0200 (CEST)
DKIM-Filter: OpenDKIM Filter v2.11.0 alsa0.perex.cz EA8461674
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/simple; d=alsa-project.org;
	s=default; t=1569184060;
	bh=YKphgWz4z3JkS6HQg0K0og7Q9daKCmVUX0pKuzmv6xE=;
	h=Date:From:To:In-Reply-To:References:Cc:Subject:List-Id:
	 List-Unsubscribe:List-Archive:List-Post:List-Help:List-Subscribe:
	 From;
	b=ivWUs2lxdg6J1nq+Fkq7st7IQPAvLncddYDwUkkOffagWq06ZlxXxW0xtZG9l1osh
	 9rtos/RDWiM1XHTTy0gi51CayArCUWepWZuZk+gK4FE34KtYTDpT7157DnkH/xQAhI
	 Un78AFfpmcJx+1YO/X6anLFqBT/PNsujvkcUNPOg=
Received: from alsa1.perex.cz (localhost.localdomain [127.0.0.1])
	by alsa1.perex.cz (Postfix) with ESMTP id 4DB65F803F4;
	Sun, 22 Sep 2019 22:25:55 +0200 (CEST)
X-Original-To: alsa-devel@alsa-project.org
Delivered-To: alsa-devel@alsa-project.org
Received: by alsa1.perex.cz (Postfix, from userid 50401)
 id 6A532F8045F; Sun, 22 Sep 2019 22:25:52 +0200 (CEST)
X-Spam-Checker-Version: SpamAssassin 3.4.0 (2014-02-07) on alsa1.perex.cz
X-Spam-Level: 
X-Spam-Status: No, score=0.9 required=5.0 tests=PRX_BODYSUB_19,PRX_BODY_14,
 SPF_HELO_NONE,SPF_PASS autolearn=disabled version=3.4.0
Received: from mx1.suse.de (mx2.suse.de [195.135.220.15])
 (using TLSv1.2 with cipher AECDH-AES256-SHA (256/256 bits))
 (No client certificate requested)
 by alsa1.perex.cz (Postfix) with ESMTPS id B0E62F802BD
 for <alsa-devel@alsa-project.org>; Sun, 22 Sep 2019 22:25:49 +0200 (CEST)
DKIM-Filter: OpenDKIM Filter v2.11.0 alsa1.perex.cz B0E62F802BD
X-Virus-Scanned: by amavisd-new at test-mx.suse.de
Received: from relay2.suse.de (unknown [195.135.220.254])
 by mx1.suse.de (Postfix) with ESMTP id 7322EAD63;
 Sun, 22 Sep 2019 20:25:48 +0000 (UTC)
Date: Sun, 22 Sep 2019 22:25:48 +0200
Message-ID: <s5h5zlkm62b.wl-tiwai@suse.de>
From: Takashi Iwai <tiwai@suse.de>
To: Ben Russell <thematrixeatsyou@gmail.com>
In-Reply-To: <20190922032853.6123-1-thematrixeatsyou@gmail.com>
References: <20190922032853.6123-1-thematrixeatsyou@gmail.com>
User-Agent: Wanderlust/2.15.9 (Almost Unreal) SEMI/1.14.6 (Maruoka)
 FLIM/1.14.9 (=?UTF-8?B?R29qxY0=?=) APEL/10.8 Emacs/25.3
 (x86_64-suse-linux-gnu) MULE/6.0 (HANACHIRUSATO)
MIME-Version: 1.0 (generated by SEMI 1.14.6 - "Maruoka")
Cc: alsa-devel@alsa-project.org
Subject: Re: [alsa-devel] [PATCH 0/3] Make pcm_ioplug check lock status
	before	locking (fixes pcm_jack lockups)
X-BeenThere: alsa-devel@alsa-project.org
X-Mailman-Version: 2.1.15
Precedence: list
List-Id: "Alsa-devel mailing list for ALSA developers -
 http://www.alsa-project.org" <alsa-devel.alsa-project.org>
List-Unsubscribe: <https://mailman.alsa-project.org/mailman/options/alsa-devel>, 
 <mailto:alsa-devel-request@alsa-project.org?subject=unsubscribe>
List-Archive: <http://mailman.alsa-project.org/pipermail/alsa-devel/>
List-Post: <mailto:alsa-devel@alsa-project.org>
List-Help: <mailto:alsa-devel-request@alsa-project.org?subject=help>
List-Subscribe: <https://mailman.alsa-project.org/mailman/listinfo/alsa-devel>, 
 <mailto:alsa-devel-request@alsa-project.org?subject=subscribe>
Content-Type: text/plain; charset="us-ascii"
Content-Transfer-Encoding: 7bit
Errors-To: alsa-devel-bounces@alsa-project.org
Sender: "Alsa-devel" <alsa-devel-bounces@alsa-project.org>

On Sun, 22 Sep 2019 05:28:50 +0200,
Ben Russell wrote:
> 
> This is my first time contributing a patch to a mailing list. If I've made a mess, please let me know so I can learn how to avoid it in future.
> 
> The purpose of this patchset is to fix a specific common lockup in the pcm_jack plugin (from alsa-plugins). I'm not sure if this is the right approach to take, but at the very least it should make the pcm_ioplug code a bit more resilient.
> 
> The problem is this: When using the pcm_jack plugin, if a program attempts to play audio using the SND_PCM_FORMAT_FLOAT format, said program locks up.
> 
> This should be enough to reproduce the bug:
> 
>     pcm.rawjack {
>         type jack
>         playback_ports {
>             0 system:playback_1
>             1 system:playback_2
>         }
>         capture_ports {
>             0 system:capture_1
>             1 system:capture_2
>         }
>     }
>     
>     pcm.!default {
>         type plug
>         slave.pcm "rawjack"
>     }
> 
> What's happening is that several snd_pcm_ioplug_* functions assume that the pcm mutex is locked already. It then proceeds to unlock the mutex, call a function, and then relock the mutex. When the mutex isn't locked already, the initial unlock results in a silently ignored pthread error, and the lock results in the program eventually deadlocking as it doesn't expect the mutex to be held at that point.
> 
> Patch 2 modifies pcm_ioplug to check if the mutex is held before doing the unlock-act-lock sequence, and if the mutex is not held then it skips the unlock and lock stages. This depends on Patch 1, which adds a snd_pcm_is_locked function to give the state of the mutex.
> 
> Patch 3 is completely optional. It adds assertions which make sure that all uses of snd_pcm_lock/snd_pcm_unlock are correct. On one hand this will likely result in crashes in some of the less refined parts of the code. On the other hand, when that happens, you'll know which parts need a bit more love. I know it was useful for finding this issue in the first place.
> 
> These patches fix the problems I am having, but if you have a more suitable approach to fixing this problem then please let me know.

Thanks for the analysis and patches.  It's indeed a serious problem we
need to address.

The current semantics of locking in alsa-lib code assumes that the
lock/unlock never fails.  So the "right-and-quick" fix would be just
to take the patch 3 to assert() upon pthread_mutex_lock/unlock
errors.  Then we need to paper over the actual invalid locks.

I do wonder, though, exactly which code path triggers the pthread
mutex error?  You should be able to catch it via gdb after the patch.


thanks,

Takashi
_______________________________________________
Alsa-devel mailing list
Alsa-devel@alsa-project.org
https://mailman.alsa-project.org/mailman/listinfo/alsa-devel
