Return-Path: <alsa-devel-bounces@alsa-project.org>
X-Original-To: lists+alsa-devel@lfdr.de
Delivered-To: lists+alsa-devel@lfdr.de
Received: from alsa0.perex.cz (alsa0.perex.cz [77.48.224.243])
	by mail.lfdr.de (Postfix) with ESMTPS id 06EDA33D59A
	for <lists+alsa-devel@lfdr.de>; Tue, 16 Mar 2021 15:19:46 +0100 (CET)
Received: from alsa1.perex.cz (alsa1.perex.cz [207.180.221.201])
	(using TLSv1.2 with cipher AECDH-AES256-SHA (256/256 bits))
	(No client certificate requested)
	by alsa0.perex.cz (Postfix) with ESMTPS id 971CF180D;
	Tue, 16 Mar 2021 15:18:55 +0100 (CET)
DKIM-Filter: OpenDKIM Filter v2.11.0 alsa0.perex.cz 971CF180D
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/simple; d=alsa-project.org;
	s=default; t=1615904385;
	bh=Mctc11llbtI/Amm7uTR3ySmPfrm4opUYn85OeZa+yqg=;
	h=Date:From:To:Subject:In-Reply-To:References:Cc:List-Id:
	 List-Unsubscribe:List-Archive:List-Post:List-Help:List-Subscribe:
	 From;
	b=ujECE2AJ+cTsiR97wlz8LqJVvsAPOKXsqPrrGtbNELdIkeRL8IypoEURG+JMo9+UH
	 l/YNXYII0t59t9MPXZ4yxt3a7uY+pJWG3BvMu4JwUJRRWbDIG3UeR//DcqqTWPSuOg
	 /+6mcg94E197uGq1FcJy76FRRTHTIWtw1chSZdRs=
Received: from alsa1.perex.cz (localhost.localdomain [127.0.0.1])
	by alsa1.perex.cz (Postfix) with ESMTP id BF979F80137;
	Tue, 16 Mar 2021 15:18:15 +0100 (CET)
X-Original-To: alsa-devel@alsa-project.org
Delivered-To: alsa-devel@alsa-project.org
Received: by alsa1.perex.cz (Postfix, from userid 50401)
 id 45DF5F80137; Tue, 16 Mar 2021 15:18:12 +0100 (CET)
X-Spam-Checker-Version: SpamAssassin 3.4.0 (2014-02-07) on alsa1.perex.cz
X-Spam-Level: 
X-Spam-Status: No, score=0.0 required=5.0 tests=SPF_HELO_NONE,SPF_NONE,
 URIBL_BLOCKED autolearn=disabled version=3.4.0
Received: from mx2.suse.de (mx2.suse.de [195.135.220.15])
 (using TLSv1.2 with cipher AECDH-AES256-SHA (256/256 bits))
 (No client certificate requested)
 by alsa1.perex.cz (Postfix) with ESMTPS id 6A6B5F80137
 for <alsa-devel@alsa-project.org>; Tue, 16 Mar 2021 15:18:00 +0100 (CET)
DKIM-Filter: OpenDKIM Filter v2.11.0 alsa1.perex.cz 6A6B5F80137
X-Virus-Scanned: by amavisd-new at test-mx.suse.de
Received: from relay2.suse.de (unknown [195.135.221.27])
 by mx2.suse.de (Postfix) with ESMTP id F340CABD7;
 Tue, 16 Mar 2021 14:17:59 +0000 (UTC)
Date: Tue, 16 Mar 2021 15:17:59 +0100
Message-ID: <s5hmtv3mbc8.wl-tiwai@suse.de>
From: Takashi Iwai <tiwai@suse.de>
To: Hui Wang <hui.wang@canonical.com>
Subject: Re: [PATCH] ALSA: hda/realtek: add more delay time before
 determine_headset_type
In-Reply-To: <20210316115549.240014-1-hui.wang@canonical.com>
References: <20210316115549.240014-1-hui.wang@canonical.com>
User-Agent: Wanderlust/2.15.9 (Almost Unreal) SEMI/1.14.6 (Maruoka)
 FLIM/1.14.9 (=?UTF-8?B?R29qxY0=?=) APEL/10.8 Emacs/25.3
 (x86_64-suse-linux-gnu) MULE/6.0 (HANACHIRUSATO)
MIME-Version: 1.0 (generated by SEMI 1.14.6 - "Maruoka")
Content-Type: text/plain; charset=US-ASCII
Cc: alsa-devel@alsa-project.org, kailang@realtek.com
X-BeenThere: alsa-devel@alsa-project.org
X-Mailman-Version: 2.1.15
Precedence: list
List-Id: "Alsa-devel mailing list for ALSA developers -
 http://www.alsa-project.org" <alsa-devel.alsa-project.org>
List-Unsubscribe: <https://mailman.alsa-project.org/mailman/options/alsa-devel>, 
 <mailto:alsa-devel-request@alsa-project.org?subject=unsubscribe>
List-Archive: <http://mailman.alsa-project.org/pipermail/alsa-devel/>
List-Post: <mailto:alsa-devel@alsa-project.org>
List-Help: <mailto:alsa-devel-request@alsa-project.org?subject=help>
List-Subscribe: <https://mailman.alsa-project.org/mailman/listinfo/alsa-devel>, 
 <mailto:alsa-devel-request@alsa-project.org?subject=subscribe>
Errors-To: alsa-devel-bounces@alsa-project.org
Sender: "Alsa-devel" <alsa-devel-bounces@alsa-project.org>

On Tue, 16 Mar 2021 12:55:49 +0100,
Hui Wang wrote:
> 
> We found a recording issue on the headset-mic recently, sometimes
> users plug a headset and select headset-mic from UI, but can't record
> any sound from headset-mic. The root cause is the
> determine_headset_type() returns a wrong type, e.g. users plug a ctia
> type headset, but that function returns omtp type.
> 
> In the past, determine_headset_type() worked well because the internal
> mic is connected to the codec, so the "Input Source" or
> "Capture Source" is internal mic by default when users plug a headset,
> the determine_headset_type() will not be called unless users select
> headset-mic from UI, when users select headset-mic, the plugging
> action already finished and the headset is completely plugged into the
> jack, so determine_headset_type() could return a correct type.
> 
> But more and more machines connect the internal mic to the PCH now,
> and the "Input Source" is headset mic by default, when users plug a
> headset, the determine_headset_type() will be called immediately, if
> the headset is not completely plugged in, it will return a wrong type.
> 
> Here add 2s delay before calling determine_headset_type(), and since
> there is a pop-up dialogue when users do plugging action, to avoid
> freezing the UI, use the deleyed_work to call that function.

Hm, two seconds are quite long, IMHO.  How is this delay determined?


Takashi

> 
> Signed-off-by: Hui Wang <hui.wang@canonical.com>
> ---
>  sound/pci/hda/patch_realtek.c | 31 ++++++++++++++++++++++++-------
>  1 file changed, 24 insertions(+), 7 deletions(-)
> 
> diff --git a/sound/pci/hda/patch_realtek.c b/sound/pci/hda/patch_realtek.c
> index b47504fa8dfd..1f6fc8addf3e 100644
> --- a/sound/pci/hda/patch_realtek.c
> +++ b/sound/pci/hda/patch_realtek.c
> @@ -127,6 +127,8 @@ struct alc_spec {
>  	unsigned int coef0;
>  	struct input_dev *kb_dev;
>  	u8 alc_mute_keycode_map[1];
> +	struct hda_codec *codec;
> +	struct delayed_work headset_set_work;
>  };
>  
>  /*
> @@ -1160,6 +1162,7 @@ static int alc_alloc_spec(struct hda_codec *codec, hda_nid_t mixer_nid)
>  		kfree(spec);
>  		return err;
>  	}
> +	spec->codec = codec;
>  	return 0;
>  }
>  
> @@ -5363,6 +5366,21 @@ static void alc_determine_headset_type(struct hda_codec *codec)
>  	spec->current_headset_type = is_ctia ? ALC_HEADSET_TYPE_CTIA : ALC_HEADSET_TYPE_OMTP;
>  }
>  
> +static void alc_headset_check_and_set(struct work_struct *work)
> +{
> +	struct alc_spec *spec = container_of(work, struct alc_spec,
> +					     headset_set_work.work);
> +	struct hda_codec *codec = spec->codec;
> +
> +	if (spec->current_headset_type == ALC_HEADSET_TYPE_UNKNOWN)
> +		alc_determine_headset_type(codec);
> +	if (spec->current_headset_type == ALC_HEADSET_TYPE_CTIA)
> +		alc_headset_mode_ctia(codec);
> +	else if (spec->current_headset_type == ALC_HEADSET_TYPE_OMTP)
> +		alc_headset_mode_omtp(codec);
> +	spec->gen.hp_jack_present = true;
> +}
> +
>  static void alc_update_headset_mode(struct hda_codec *codec)
>  {
>  	struct alc_spec *spec = codec->spec;
> @@ -5386,6 +5404,7 @@ static void alc_update_headset_mode(struct hda_codec *codec)
>  		return;
>  	}
>  
> +	cancel_delayed_work_sync(&spec->headset_set_work);
>  	switch (new_headset_mode) {
>  	case ALC_HEADSET_MODE_UNPLUGGED:
>  		alc_headset_mode_unplugged(codec);
> @@ -5394,13 +5413,7 @@ static void alc_update_headset_mode(struct hda_codec *codec)
>  		spec->gen.hp_jack_present = false;
>  		break;
>  	case ALC_HEADSET_MODE_HEADSET:
> -		if (spec->current_headset_type == ALC_HEADSET_TYPE_UNKNOWN)
> -			alc_determine_headset_type(codec);
> -		if (spec->current_headset_type == ALC_HEADSET_TYPE_CTIA)
> -			alc_headset_mode_ctia(codec);
> -		else if (spec->current_headset_type == ALC_HEADSET_TYPE_OMTP)
> -			alc_headset_mode_omtp(codec);
> -		spec->gen.hp_jack_present = true;
> +		schedule_delayed_work(&spec->headset_set_work, msecs_to_jiffies(2000));
>  		break;
>  	case ALC_HEADSET_MODE_MIC:
>  		alc_headset_mode_mic_in(codec, hp_pin, spec->headphone_mic_pin);
> @@ -5466,6 +5479,7 @@ static void alc_fixup_headset_mode(struct hda_codec *codec,
>  		spec->parse_flags |= HDA_PINCFG_HEADSET_MIC | HDA_PINCFG_HEADPHONE_MIC;
>  		break;
>  	case HDA_FIXUP_ACT_PROBE:
> +		INIT_DELAYED_WORK(&spec->headset_set_work, alc_headset_check_and_set);
>  		alc_probe_headset_mode(codec);
>  		break;
>  	case HDA_FIXUP_ACT_INIT:
> @@ -5475,6 +5489,9 @@ static void alc_fixup_headset_mode(struct hda_codec *codec,
>  		}
>  		alc_update_headset_mode(codec);
>  		break;
> +	case HDA_FIXUP_ACT_FREE:
> +		cancel_delayed_work_sync(&spec->headset_set_work);
> +		break;
>  	}
>  }
>  
> -- 
> 2.25.1
> 
