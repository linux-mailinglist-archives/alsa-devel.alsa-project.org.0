Return-Path: <alsa-devel-bounces@alsa-project.org>
X-Original-To: lists+alsa-devel@lfdr.de
Delivered-To: lists+alsa-devel@lfdr.de
Received: from alsa0.perex.cz (alsa0.perex.cz [77.48.224.243])
	by mail.lfdr.de (Postfix) with ESMTPS id D4F5235C4E1
	for <lists+alsa-devel@lfdr.de>; Mon, 12 Apr 2021 13:19:20 +0200 (CEST)
Received: from alsa1.perex.cz (alsa1.perex.cz [207.180.221.201])
	(using TLSv1.2 with cipher AECDH-AES256-SHA (256/256 bits))
	(No client certificate requested)
	by alsa0.perex.cz (Postfix) with ESMTPS id 4DD1515F9;
	Mon, 12 Apr 2021 13:18:30 +0200 (CEST)
DKIM-Filter: OpenDKIM Filter v2.11.0 alsa0.perex.cz 4DD1515F9
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/simple; d=alsa-project.org;
	s=default; t=1618226360;
	bh=3i/Ewpnt1o5JcOl+2ZRFXnm/9vqOeS3ax6nDDWCAF04=;
	h=Date:From:To:Subject:In-Reply-To:References:Cc:List-Id:
	 List-Unsubscribe:List-Archive:List-Post:List-Help:List-Subscribe:
	 From;
	b=aNRg3AZv19Z8Lix39VR1nMkMH+u4UzIK5K8mP6W08NuCoj3fW2W0BPin51E7dXsJ5
	 8T1mgn0eemYKd4fPp2BHJAlwnhQezG01Znu+ukAiXhF2MySHdRolSuaIVfmMAOCnAT
	 9G2xugsFJ9L8G4UniI1t99plwIe5xymy8MRieXMA=
Received: from alsa1.perex.cz (localhost.localdomain [127.0.0.1])
	by alsa1.perex.cz (Postfix) with ESMTP id B4F0BF8025B;
	Mon, 12 Apr 2021 13:17:51 +0200 (CEST)
X-Original-To: alsa-devel@alsa-project.org
Delivered-To: alsa-devel@alsa-project.org
Received: by alsa1.perex.cz (Postfix, from userid 50401)
 id 6BFE5F80269; Mon, 12 Apr 2021 13:17:49 +0200 (CEST)
X-Spam-Checker-Version: SpamAssassin 3.4.0 (2014-02-07) on alsa1.perex.cz
X-Spam-Level: 
X-Spam-Status: No, score=0.0 required=5.0 tests=SPF_HELO_NONE,SPF_NONE
 autolearn=disabled version=3.4.0
Received: from mx2.suse.de (mx2.suse.de [195.135.220.15])
 (using TLSv1.2 with cipher AECDH-AES256-SHA (256/256 bits))
 (No client certificate requested)
 by alsa1.perex.cz (Postfix) with ESMTPS id AAB9DF800D3
 for <alsa-devel@alsa-project.org>; Mon, 12 Apr 2021 13:17:40 +0200 (CEST)
DKIM-Filter: OpenDKIM Filter v2.11.0 alsa1.perex.cz AAB9DF800D3
X-Virus-Scanned: by amavisd-new at test-mx.suse.de
Received: from relay2.suse.de (unknown [195.135.221.27])
 by mx2.suse.de (Postfix) with ESMTP id ABADBAFAB;
 Mon, 12 Apr 2021 11:17:39 +0000 (UTC)
Date: Mon, 12 Apr 2021 13:17:39 +0200
Message-ID: <s5h5z0r3g6k.wl-tiwai@suse.de>
From: Takashi Iwai <tiwai@suse.de>
To: Jaroslav Kysela <perex@perex.cz>
Subject: Re: [PATCH v4] sound: rawmidi: Add framing mode
In-Reply-To: <a2d31a49-ec28-8b54-6632-3d24c96b624a@perex.cz>
References: <20210410120229.1172054-1-coding@diwic.se>
 <df8cc177-f91d-28b1-c8df-1162dc136657@perex.cz>
 <bb91fc79-1b61-b051-1543-b5c8b1633fb3@diwic.se>
 <87f906a5-b77f-d3e8-29d7-7ce6e35c452a@perex.cz>
 <s5hk0p73l36.wl-tiwai@suse.de>
 <822b7ebf-71ac-2f84-731d-65e772eea1ff@perex.cz>
 <s5hfszv3jjq.wl-tiwai@suse.de>
 <a2d31a49-ec28-8b54-6632-3d24c96b624a@perex.cz>
User-Agent: Wanderlust/2.15.9 (Almost Unreal) SEMI/1.14.6 (Maruoka)
 FLIM/1.14.9 (=?UTF-8?B?R29qxY0=?=) APEL/10.8 Emacs/25.3
 (x86_64-suse-linux-gnu) MULE/6.0 (HANACHIRUSATO)
MIME-Version: 1.0 (generated by SEMI 1.14.6 - "Maruoka")
Content-Type: text/plain; charset=US-ASCII
Cc: alsa-devel@alsa-project.org, David Henningsson <coding@diwic.se>
X-BeenThere: alsa-devel@alsa-project.org
X-Mailman-Version: 2.1.15
Precedence: list
List-Id: "Alsa-devel mailing list for ALSA developers -
 http://www.alsa-project.org" <alsa-devel.alsa-project.org>
List-Unsubscribe: <https://mailman.alsa-project.org/mailman/options/alsa-devel>, 
 <mailto:alsa-devel-request@alsa-project.org?subject=unsubscribe>
List-Archive: <http://mailman.alsa-project.org/pipermail/alsa-devel/>
List-Post: <mailto:alsa-devel@alsa-project.org>
List-Help: <mailto:alsa-devel-request@alsa-project.org?subject=help>
List-Subscribe: <https://mailman.alsa-project.org/mailman/listinfo/alsa-devel>, 
 <mailto:alsa-devel-request@alsa-project.org?subject=subscribe>
Errors-To: alsa-devel-bounces@alsa-project.org
Sender: "Alsa-devel" <alsa-devel-bounces@alsa-project.org>

On Mon, 12 Apr 2021 12:26:49 +0200,
Jaroslav Kysela wrote:
> 
> Dne 12. 04. 21 v 12:04 Takashi Iwai napsal(a):
> > On Mon, 12 Apr 2021 11:43:02 +0200,
> > Jaroslav Kysela wrote:
> >>
> >> Dne 12. 04. 21 v 11:31 Takashi Iwai napsal(a):
> >>> On Sun, 11 Apr 2021 19:52:21 +0200,
> >>> Jaroslav Kysela wrote:
> >>>>>>>   struct snd_rawmidi_params {
> >>>>>>>   	int stream;
> >>>>>>>   	size_t buffer_size;		/* queue size in bytes */
> >>>>>>>   	size_t avail_min;		/* minimum avail bytes for wakeup */
> >>>>>>>   	unsigned int no_active_sensing: 1; /* do not send active sensing byte in close() */
> >>>>>>> -	unsigned char reserved[16];	/* reserved for future use */
> >>>>>>> +	unsigned char framing;		/* For input data only, frame incoming data */
> >>>>>> We can move this flag to above 32-bit word (no_active_sensing). I'm not sure,
> >>>>>> if we need 8 bits for this. It's first change after 20 years. Another flag may
> >>>>>> obsolete this one.
> >>>>>
> >>>>> Not sure what you mean by this, could you show the code? Framing is an 
> >>>>> enum rather than a flag, in case we find other framing formats with 
> >>>>> other sizes that would obsolete this one.
> >>>>
> >>>> unsigned int no_active_sensing: 1;
> >>>> unsigned int framing32: 1;
> >>>> unsigned int framing64: 1; /* future extension, framing32 == 0 in this case */
> >>>>
> >>>> or:
> >>>>
> >>>> unsigned int framing_mode: 3;	/* three bits for future types */
> >>>>
> >>>> perhaps also:
> >>>>
> >>>> unsigned int clock_type: 3;	/* three bits for the clock type selection */
> >>>
> >>> The usage of bit fields in an ioctl struct is a bad idea from the
> >>> compat layer POV.  Let's avoid it.
> >>
> >> What exactly do you mean?
> > 
> > The compat layer has the hard time to deal with the conversion of bit
> > fields to a different struct.  And, it's a nightmare for the emulator
> > like QEMU.  If it has to convert the ioctl struct, it has to consider
> > about the byte order as well (and there is no strict definition how to
> > put the bit fields in C language).
> 
> The endianness of the 32-bit word can be changed quite easily - and the
> situation is similar to bit flags stored in the 32-bit word. Nobody prevents
> QEMU to work with the whole 32-bit word instead bit fields in this case.

And how you assure that the bit field is set to which bit position?
There is no guarantee defined in C language about that.

> The linux compat layer may copy the whole 32-bit word, too.
> 
> I think that your argument is not so strong here.

Oh please, this is my experience years ago while discussing with the
QEMU developers in the past.  Using a bit field for an ioctl struct is
a horrible idea, after all.

> > That said, a bit field can be useful for the internal object
> > definition (if there is no racy access), but not for an object for the
> > communication that may be interpreted among different architectures.
> 
> In this case, we have 31 free bits and this information can be stored there. I
> would prefer to keep the reserved bytes for some large fields.

Again, C language doesn't define the position of the bit fields.
That's the primary problem.

If we really have to save the space, it's a nice workaround.  But for
other purposes, there is really little merit and more flip side by
that.


Takashi
