Return-Path: <alsa-devel-bounces@alsa-project.org>
X-Original-To: lists+alsa-devel@lfdr.de
Delivered-To: lists+alsa-devel@lfdr.de
Received: from alsa0.perex.cz (alsa0.perex.cz [77.48.224.243])
	by mail.lfdr.de (Postfix) with ESMTPS id DFC4015B987
	for <lists+alsa-devel@lfdr.de>; Thu, 13 Feb 2020 07:19:47 +0100 (CET)
Received: from alsa1.perex.cz (alsa1.perex.cz [207.180.221.201])
	(using TLSv1.2 with cipher AECDH-AES256-SHA (256/256 bits))
	(No client certificate requested)
	by alsa0.perex.cz (Postfix) with ESMTPS id 7D49A1677;
	Thu, 13 Feb 2020 07:18:57 +0100 (CET)
DKIM-Filter: OpenDKIM Filter v2.11.0 alsa0.perex.cz 7D49A1677
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/simple; d=alsa-project.org;
	s=default; t=1581574787;
	bh=YuCiONCs2D3xft/Mag55GDuj2sEll5UuRHIUuBmMkaA=;
	h=Date:From:To:In-Reply-To:References:Cc:Subject:List-Id:
	 List-Unsubscribe:List-Archive:List-Post:List-Help:List-Subscribe:
	 From;
	b=FI9UObRpx68EPhU8KQ7z/A2qkOmySBzD/B/JlP9m8HZhVbHydN1+tf1MNJKXpBqwU
	 6SBsvnGAB6qTAxzcVFFkcXSGuWYHmlbPpulLiStOlNJ1fawODhXR24Lcaxm5G9if5O
	 Ya0qaHbpPi+CbEgZGXk4+yGchFhdFD8KqPrQE8xM=
Received: from alsa1.perex.cz (localhost.localdomain [127.0.0.1])
	by alsa1.perex.cz (Postfix) with ESMTP id D9CEDF80146;
	Thu, 13 Feb 2020 07:18:03 +0100 (CET)
X-Original-To: alsa-devel@alsa-project.org
Delivered-To: alsa-devel@alsa-project.org
Received: by alsa1.perex.cz (Postfix, from userid 50401)
 id E05F3F80145; Thu, 13 Feb 2020 07:18:00 +0100 (CET)
X-Spam-Checker-Version: SpamAssassin 3.4.0 (2014-02-07) on alsa1.perex.cz
X-Spam-Level: 
X-Spam-Status: No, score=0.0 required=5.0 tests=RCVD_IN_MSPIKE_H3,
 RCVD_IN_MSPIKE_WL,SPF_HELO_NONE,SPF_PASS,URIBL_BLOCKED autolearn=disabled
 version=3.4.0
Received: from mx2.suse.de (mx2.suse.de [195.135.220.15])
 (using TLSv1.2 with cipher AECDH-AES256-SHA (256/256 bits))
 (No client certificate requested)
 by alsa1.perex.cz (Postfix) with ESMTPS id D2DBCF80138
 for <alsa-devel@alsa-project.org>; Thu, 13 Feb 2020 07:17:57 +0100 (CET)
DKIM-Filter: OpenDKIM Filter v2.11.0 alsa1.perex.cz D2DBCF80138
X-Virus-Scanned: by amavisd-new at test-mx.suse.de
Received: from relay2.suse.de (unknown [195.135.220.254])
 by mx2.suse.de (Postfix) with ESMTP id 9321CAE61;
 Thu, 13 Feb 2020 06:17:56 +0000 (UTC)
Date: Thu, 13 Feb 2020 07:17:55 +0100
Message-ID: <s5hd0ajyprg.wl-tiwai@suse.de>
From: Takashi Iwai <tiwai@suse.de>
To: Pierre-Louis Bossart <pierre-louis.bossart@linux.intel.com>
In-Reply-To: <1a8475a4-d7d6-7a09-0540-4aa1ceedbe2f@linux.intel.com>
References: <20200129195907.12197-1-tiwai@suse.de>
 <1a8475a4-d7d6-7a09-0540-4aa1ceedbe2f@linux.intel.com>
User-Agent: Wanderlust/2.15.9 (Almost Unreal) SEMI/1.14.6 (Maruoka)
 FLIM/1.14.9 (=?UTF-8?B?R29qxY0=?=) APEL/10.8 Emacs/25.3
 (x86_64-suse-linux-gnu) MULE/6.0 (HANACHIRUSATO)
MIME-Version: 1.0 (generated by SEMI 1.14.6 - "Maruoka")
Cc: alsa-devel@alsa-project.org, Mark Brown <broonie@kernel.org>,
 Bard liao <yung-chuan.liao@linux.intel.com>,
 Ranjani Sridharan <ranjani.sridharan@linux.intel.com>,
 Kai Vehmanen <kai.vehmanen@linux.intel.com>
Subject: Re: [alsa-devel] [PATCH] ALSA: pcm: Fix memory leak at closing a
	stream without hw_free
X-BeenThere: alsa-devel@alsa-project.org
X-Mailman-Version: 2.1.15
Precedence: list
List-Id: "Alsa-devel mailing list for ALSA developers -
 http://www.alsa-project.org" <alsa-devel.alsa-project.org>
List-Unsubscribe: <https://mailman.alsa-project.org/mailman/options/alsa-devel>, 
 <mailto:alsa-devel-request@alsa-project.org?subject=unsubscribe>
List-Archive: <http://mailman.alsa-project.org/pipermail/alsa-devel/>
List-Post: <mailto:alsa-devel@alsa-project.org>
List-Help: <mailto:alsa-devel-request@alsa-project.org?subject=help>
List-Subscribe: <https://mailman.alsa-project.org/mailman/listinfo/alsa-devel>, 
 <mailto:alsa-devel-request@alsa-project.org?subject=subscribe>
Content-Type: text/plain; charset="us-ascii"
Content-Transfer-Encoding: 7bit
Errors-To: alsa-devel-bounces@alsa-project.org
Sender: "Alsa-devel" <alsa-devel-bounces@alsa-project.org>

On Thu, 13 Feb 2020 00:26:44 +0100,
Pierre-Louis Bossart wrote:
> 
> 
> 
> On 1/29/20 1:59 PM, Takashi Iwai wrote:
> > ALSA PCM core recently introduced a new managed PCM buffer allocation
> > mode that does allocate / free automatically at hw_params and
> > hw_free.  However, it overlooked the code path directly calling
> > hw_free PCM ops at releasing the PCM substream, and it may result in a
> > memory leak as spotted by syzkaller when no buffer preallocation is
> > used (e.g. vmalloc buffer).
> >
> > This patch papers over it with a slight refactoring.  The hw_free ops
> > call and relevant tasks are unified in a new helper function, and call
> > it from both places.
> >
> > Fixes: 0dba808eae26 ("ALSA: pcm: Introduce managed buffer allocation mode")
> > Reported-by: syzbot+30edd0f34bfcdc548ac4@syzkaller.appspotmail.com
> > Cc: <stable@vger.kernel.org>
> > Signed-off-by: Takashi Iwai <tiwai@suse.de>
> 
> Takashi, this patch introduces a regression for our SoundWire work - 
> credits to Bard Liao for reporting this the first.
> 
> We see the hw_free() being called twice and as a result the SoundWire
> stream state becomes inconsistent, with some memory becoming
> corrupted:
> 
> [  107.864109] sof-audio-pci 0000:00:1f.3: pcm: free stream 0 dir 0
> [  107.864324] sof-audio-pci 0000:00:1f.3: ipc tx: 0x80010000:
> GLB_DAI_MSG: CONFIG
> [  107.864507] sof-audio-pci 0000:00:1f.3: ipc tx succeeded:
> 0x80010000: GLB_DAI_MSG: CONFIG
> [  107.864615] sof-audio-pci 0000:00:1f.3: pcm: free stream 0 dir 0
> [  107.864627] sdw_deprepare_stream: \xc0Pjf\xe0\xa3\xff\xff:
> inconsistent state state 6
> [  107.864640] int-sdw int-sdw.0: sdw_deprepare_stream: failed -22
> 
> we detected this while merging your latest code as part of our weekly
> rebase, then realized the error was already present in v5.6-rc1 and
> continued to narrow the scope to sound-fix-5.6-rc1 and this specific
> patch.
> 
> I can't claim to fully understand the code in this patch, but I am not
> sure why hw_free() ends up being unconditionally called at [1] below
> 
> > ---
> >   sound/core/pcm_native.c | 24 +++++++++++++++---------
> >   1 file changed, 15 insertions(+), 9 deletions(-)
> >
> > diff --git a/sound/core/pcm_native.c b/sound/core/pcm_native.c
> > index bb23f5066654..4ac42ee1238c 100644
> > --- a/sound/core/pcm_native.c
> > +++ b/sound/core/pcm_native.c
> > @@ -786,10 +786,22 @@ static int snd_pcm_hw_params_user(struct snd_pcm_substream *substream,
> >   	return err;
> >   }
> >   +static int do_hw_free(struct snd_pcm_substream *substream)
> > +{
> > +	int result = 0;
> > +
> > +	snd_pcm_sync_stop(substream);
> > +	if (substream->ops->hw_free)
> > +		result = substream->ops->hw_free(substream);
> > +	if (substream->managed_buffer_alloc)
> > +		snd_pcm_lib_free_pages(substream);
> > +	return result;
> > +}
> > +
> >   static int snd_pcm_hw_free(struct snd_pcm_substream *substream)
> >   {
> >   	struct snd_pcm_runtime *runtime;
> > -	int result = 0;
> > +	int result;
> >     	if (PCM_RUNTIME_CHECK(substream))
> >   		return -ENXIO;
> > @@ -806,11 +818,7 @@ static int snd_pcm_hw_free(struct snd_pcm_substream *substream)
> >   	snd_pcm_stream_unlock_irq(substream);
> >   	if (atomic_read(&substream->mmap_count))
> >   		return -EBADFD;
> > -	snd_pcm_sync_stop(substream);
> > -	if (substream->ops->hw_free)
> > -		result = substream->ops->hw_free(substream);
> > -	if (substream->managed_buffer_alloc)
> > -		snd_pcm_lib_free_pages(substream);
> > +	result = do_hw_free(substream);
> >   	snd_pcm_set_state(substream, SNDRV_PCM_STATE_OPEN);
> >   	pm_qos_remove_request(&substream->latency_pm_qos_req);
> >   	return result;
> > @@ -2529,9 +2537,7 @@ void snd_pcm_release_substream(struct snd_pcm_substream *substream)
> >     	snd_pcm_drop(substream);
> >   	if (substream->hw_opened) {
> > -		if (substream->ops->hw_free &&
> > -		    substream->runtime->status->state != SNDRV_PCM_STATE_OPEN)
> > -			substream->ops->hw_free(substream);
> > +		do_hw_free(substream);
> 
> [1] don't we need to only do the hw_free() when	
> 
> substream->runtime->status->state != SNDRV_PCM_STATE_OPEN
> 
> e.g. with the following patch?

Yes, my bad, it's just an oversight.

But the condition check should be applied to the whole do_hw_free()
call, so it can be simpler like the patch below.

> Or is the expectation that the hw_free() callback be implemented so
> that only the first call has an effect?

This is another solution, but let's follow to the original code that
had the condition check at the caller side.


thanks,

Takashi

-- 8< --
From: Takashi Iwai <tiwai@suse.de>
Subject: [PATCH] ALSA: pcm: Fix double hw_free calls

The commit 66f2d19f8116 ("ALSA: pcm: Fix memory leak at closing a
stream without hw_free") tried to fix the regression wrt the missing
hw_free call at closing without SNDRV_PCM_IOCTL_HW_FREE ioctl.
However, the code change dropped mistakenly the state check, resulting
in calling hw_free twice when SNDRV_PCM_IOCTL_HW_FRE got called
beforehand.  For most drivers, this is almost harmless, but the
drivers like SOF show another regression now.

This patch adds the state condition check before calling do_hw_free()
at releasing the stream for avoiding the double hw_free calls.

Fixes: 66f2d19f8116 ("ALSA: pcm: Fix memory leak at closing a stream without hw_free")
Reported-by: Bard Liao <yung-chuan.liao@linux.intel.com>
Reported-by: Pierre-Louis Bossart <pierre-louis.bossart@linux.intel.com>
Cc: <stable@vger.kernel.org>
Signed-off-by: Takashi Iwai <tiwai@suse.de>
---
 sound/core/pcm_native.c | 3 ++-
 1 file changed, 2 insertions(+), 1 deletion(-)

diff --git a/sound/core/pcm_native.c b/sound/core/pcm_native.c
index 336406bcb59e..d5443eeb8b63 100644
--- a/sound/core/pcm_native.c
+++ b/sound/core/pcm_native.c
@@ -2594,7 +2594,8 @@ void snd_pcm_release_substream(struct snd_pcm_substream *substream)
 
 	snd_pcm_drop(substream);
 	if (substream->hw_opened) {
-		do_hw_free(substream);
+		if (substream->runtime->status->state != SNDRV_PCM_STATE_OPEN)
+			do_hw_free(substream);
 		substream->ops->close(substream);
 		substream->hw_opened = 0;
 	}
-- 
2.16.4

_______________________________________________
Alsa-devel mailing list
Alsa-devel@alsa-project.org
https://mailman.alsa-project.org/mailman/listinfo/alsa-devel
